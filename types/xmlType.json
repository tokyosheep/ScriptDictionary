{
	"?xml": {
		"@_version": "1.0",
		"@_encoding": "utf-8"
	},
	"dictionary": {
		"map": {
			"topicref": [
				{
					"topicref": [
						{
							"@_navtitle": "Application",
							"@_href": "#/Application"
						},
						{
							"@_navtitle": "Document",
							"@_href": "#/Document"
						}
					],
					"@_navtitle": "Suite that applies to all applications"
				},
				{
					"topicref": [
						{
							"@_navtitle": "ScreenMode",
							"@_href": "#/ScreenMode"
						},
						{
							"@_navtitle": "DocumentColorSpace",
							"@_href": "#/DocumentColorSpace"
						},
						{
							"@_navtitle": "DocumentPresetType",
							"@_href": "#/DocumentPresetType"
						},
						{
							"@_navtitle": "DocumentRasterResolution",
							"@_href": "#/DocumentRasterResolution"
						},
						{
							"@_navtitle": "DocumentTransparencyGrid",
							"@_href": "#/DocumentTransparencyGrid"
						},
						{
							"@_navtitle": "DocumentPreviewMode",
							"@_href": "#/DocumentPreviewMode"
						},
						{
							"@_navtitle": "DocumentArtboardLayout",
							"@_href": "#/DocumentArtboardLayout"
						},
						{
							"@_navtitle": "ImageColorSpace",
							"@_href": "#/ImageColorSpace"
						},
						{
							"@_navtitle": "StrokeCap",
							"@_href": "#/StrokeCap"
						},
						{
							"@_navtitle": "StrokeJoin",
							"@_href": "#/StrokeJoin"
						},
						{
							"@_navtitle": "PathPointSelection",
							"@_href": "#/PathPointSelection"
						},
						{
							"@_navtitle": "PointType",
							"@_href": "#/PointType"
						},
						{
							"@_navtitle": "TextType",
							"@_href": "#/TextType"
						},
						{
							"@_navtitle": "TextAntialias",
							"@_href": "#/TextAntialias"
						},
						{
							"@_navtitle": "GradientType",
							"@_href": "#/GradientType"
						},
						{
							"@_navtitle": "TextOrientation",
							"@_href": "#/TextOrientation"
						},
						{
							"@_navtitle": "CropOptions",
							"@_href": "#/CropOptions"
						},
						{
							"@_navtitle": "RasterLinkState",
							"@_href": "#/RasterLinkState"
						},
						{
							"@_navtitle": "TabStopAlignment",
							"@_href": "#/TabStopAlignment"
						},
						{
							"@_navtitle": "Justification",
							"@_href": "#/Justification"
						},
						{
							"@_navtitle": "Transformation",
							"@_href": "#/Transformation"
						},
						{
							"@_navtitle": "Compatibility",
							"@_href": "#/Compatibility"
						},
						{
							"@_navtitle": "PDFXStandard",
							"@_href": "#/PDFXStandard"
						},
						{
							"@_navtitle": "PDFCompatibility",
							"@_href": "#/PDFCompatibility"
						},
						{
							"@_navtitle": "PhotoshopCompatibility",
							"@_href": "#/PhotoshopCompatibility"
						},
						{
							"@_navtitle": "CompressionQuality",
							"@_href": "#/CompressionQuality"
						},
						{
							"@_navtitle": "ColorConversion",
							"@_href": "#/ColorConversion"
						},
						{
							"@_navtitle": "ColorDestination",
							"@_href": "#/ColorDestination"
						},
						{
							"@_navtitle": "ColorProfile",
							"@_href": "#/ColorProfile"
						},
						{
							"@_navtitle": "MonochromeCompression",
							"@_href": "#/MonochromeCompression"
						},
						{
							"@_navtitle": "PDFTrimMarkWeight",
							"@_href": "#/PDFTrimMarkWeight"
						},
						{
							"@_navtitle": "PDFOverprint",
							"@_href": "#/PDFOverprint"
						},
						{
							"@_navtitle": "PDFPrintAllowedEnum",
							"@_href": "#/PDFPrintAllowedEnum"
						},
						{
							"@_navtitle": "PDFChangesAllowedEnum",
							"@_href": "#/PDFChangesAllowedEnum"
						},
						{
							"@_navtitle": "DownsampleMethod",
							"@_href": "#/DownsampleMethod"
						},
						{
							"@_navtitle": "EPSPreview",
							"@_href": "#/EPSPreview"
						},
						{
							"@_navtitle": "EPSPostScriptLevelEnum",
							"@_href": "#/EPSPostScriptLevelEnum"
						},
						{
							"@_navtitle": "PrinterPostScriptLevelEnum",
							"@_href": "#/PrinterPostScriptLevelEnum"
						},
						{
							"@_navtitle": "SaveOptions",
							"@_href": "#/SaveOptions"
						},
						{
							"@_navtitle": "RulerUnits",
							"@_href": "#/RulerUnits"
						},
						{
							"@_navtitle": "BlendModes",
							"@_href": "#/BlendModes"
						},
						{
							"@_navtitle": "KnockoutState",
							"@_href": "#/KnockoutState"
						},
						{
							"@_navtitle": "ZOrderMethod",
							"@_href": "#/ZOrderMethod"
						},
						{
							"@_navtitle": "SVGDTDVersion",
							"@_href": "#/SVGDTDVersion"
						},
						{
							"@_navtitle": "SVGFontType",
							"@_href": "#/SVGFontType"
						},
						{
							"@_navtitle": "SVGFontSubsetting",
							"@_href": "#/SVGFontSubsetting"
						},
						{
							"@_navtitle": "SVGDocumentEncoding",
							"@_href": "#/SVGDocumentEncoding"
						},
						{
							"@_navtitle": "SVGCSSPropertyLocation",
							"@_href": "#/SVGCSSPropertyLocation"
						},
						{
							"@_navtitle": "SVGIdType",
							"@_href": "#/SVGIdType"
						},
						{
							"@_navtitle": "RasterImageLocation",
							"@_href": "#/RasterImageLocation"
						},
						{
							"@_navtitle": "OutputFlattening",
							"@_href": "#/OutputFlattening"
						},
						{
							"@_navtitle": "ColorModel",
							"@_href": "#/ColorModel"
						},
						{
							"@_navtitle": "SpotColorKind",
							"@_href": "#/SpotColorKind"
						},
						{
							"@_navtitle": "VariableKind",
							"@_href": "#/VariableKind"
						},
						{
							"@_navtitle": "AutoCADExportFileFormat",
							"@_href": "#/AutoCADExportFileFormat"
						},
						{
							"@_navtitle": "AutoCADCompatibility",
							"@_href": "#/AutoCADCompatibility"
						},
						{
							"@_navtitle": "AutoCADUnit",
							"@_href": "#/AutoCADUnit"
						},
						{
							"@_navtitle": "AutoCADColors",
							"@_href": "#/AutoCADColors"
						},
						{
							"@_navtitle": "AutoCADRasterFormat",
							"@_href": "#/AutoCADRasterFormat"
						},
						{
							"@_navtitle": "AutoCADExportOption",
							"@_href": "#/AutoCADExportOption"
						},
						{
							"@_navtitle": "AutoCADGlobalScaleOption",
							"@_href": "#/AutoCADGlobalScaleOption"
						},
						{
							"@_navtitle": "TIFFByteOrder",
							"@_href": "#/TIFFByteOrder"
						},
						{
							"@_navtitle": "UserInteractionLevel",
							"@_href": "#/UserInteractionLevel"
						},
						{
							"@_navtitle": "PolarityValues",
							"@_href": "#/PolarityValues"
						},
						{
							"@_navtitle": "JavaScriptExecutionMode",
							"@_href": "#/JavaScriptExecutionMode"
						},
						{
							"@_navtitle": "PDFBoxType",
							"@_href": "#/PDFBoxType"
						},
						{
							"@_navtitle": "RasterizationColorModel",
							"@_href": "#/RasterizationColorModel"
						},
						{
							"@_navtitle": "AntiAliasingMethod",
							"@_href": "#/AntiAliasingMethod"
						},
						{
							"@_navtitle": "FXGVersion",
							"@_href": "#/FXGVersion"
						},
						{
							"@_navtitle": "FiltersPreservePolicy",
							"@_href": "#/FiltersPreservePolicy"
						},
						{
							"@_navtitle": "TextPreservePolicy",
							"@_href": "#/TextPreservePolicy"
						},
						{
							"@_navtitle": "GradientsPreservePolicy",
							"@_href": "#/GradientsPreservePolicy"
						},
						{
							"@_navtitle": "BlendsExpandPolicy",
							"@_href": "#/BlendsExpandPolicy"
						},
						{
							"@_navtitle": "CoordinateSystem",
							"@_href": "#/CoordinateSystem"
						},
						{
							"@_navtitle": "SymbolRegistrationPoint",
							"@_href": "#/SymbolRegistrationPoint"
						},
						{
							"@_navtitle": "PerspectiveGridPlaneType",
							"@_href": "#/PerspectiveGridPlaneType"
						},
						{
							"@_navtitle": "DocumentLayoutStyle",
							"@_href": "#/DocumentLayoutStyle"
						},
						{
							"@_navtitle": "JPEGCompressionMethodType",
							"@_href": "#/JPEGCompressionMethodType"
						},
						{
							"@_navtitle": "Layer",
							"@_href": "#/Layer"
						},
						{
							"@_navtitle": "View",
							"@_href": "#/View"
						},
						{
							"@_navtitle": "Gradient",
							"@_href": "#/Gradient"
						},
						{
							"@_navtitle": "GradientStop",
							"@_href": "#/GradientStop"
						},
						{
							"@_navtitle": "Preferences",
							"@_href": "#/Preferences"
						},
						{
							"@_navtitle": "Symbol",
							"@_href": "#/Symbol"
						},
						{
							"@_navtitle": "Brush",
							"@_href": "#/Brush"
						},
						{
							"@_navtitle": "ArtStyle",
							"@_href": "#/ArtStyle"
						},
						{
							"@_navtitle": "TextFont",
							"@_href": "#/TextFont"
						},
						{
							"@_navtitle": "PageItem",
							"@_href": "#/PageItem"
						},
						{
							"@_navtitle": "CompoundPathItem",
							"@_href": "#/CompoundPathItem"
						},
						{
							"@_navtitle": "Tag",
							"@_href": "#/Tag"
						},
						{
							"@_navtitle": "PathItem",
							"@_href": "#/PathItem"
						},
						{
							"@_navtitle": "PathPoint",
							"@_href": "#/PathPoint"
						},
						{
							"@_navtitle": "RasterItem",
							"@_href": "#/RasterItem"
						},
						{
							"@_navtitle": "PlacedItem",
							"@_href": "#/PlacedItem"
						},
						{
							"@_navtitle": "EmbedItem",
							"@_href": "#/EmbedItem"
						},
						{
							"@_navtitle": "GraphItem",
							"@_href": "#/GraphItem"
						},
						{
							"@_navtitle": "NonNativeItem",
							"@_href": "#/NonNativeItem"
						},
						{
							"@_navtitle": "MeshItem",
							"@_href": "#/MeshItem"
						},
						{
							"@_navtitle": "PluginItem",
							"@_href": "#/PluginItem"
						},
						{
							"@_navtitle": "GroupItem",
							"@_href": "#/GroupItem"
						},
						{
							"@_navtitle": "SymbolItem",
							"@_href": "#/SymbolItem"
						},
						{
							"@_navtitle": "TextFrameItem",
							"@_href": "#/TextFrameItem"
						},
						{
							"@_navtitle": "LegacyTextItem",
							"@_href": "#/LegacyTextItem"
						},
						{
							"@_navtitle": "Artboard",
							"@_href": "#/Artboard"
						},
						{
							"@_navtitle": "Dimensions",
							"@_href": "#/Dimensions"
						},
						{
							"@_navtitle": "TabStopInfo",
							"@_href": "#/TabStopInfo"
						},
						{
							"@_navtitle": "DocumentPreset",
							"@_href": "#/DocumentPreset"
						},
						{
							"@_navtitle": "RasterEffectOptions",
							"@_href": "#/RasterEffectOptions"
						},
						{
							"@_navtitle": "RasterizeOptions",
							"@_href": "#/RasterizeOptions"
						}
					],
					"@_navtitle": "Scripting commands and classes for Adobe Illustrator"
				},
				{
					"topicref": [
						{
							"@_navtitle": "ColorConvertPurpose",
							"@_href": "#/ColorConvertPurpose"
						},
						{
							"@_navtitle": "Spot",
							"@_href": "#/Spot"
						},
						{
							"@_navtitle": "Swatch",
							"@_href": "#/Swatch"
						},
						{
							"@_navtitle": "SwatchGroup",
							"@_href": "#/SwatchGroup"
						},
						{
							"@_navtitle": "Pattern",
							"@_href": "#/Pattern"
						},
						{
							"@_navtitle": "Color",
							"@_href": "#/Color"
						},
						{
							"@_navtitle": "LabColor",
							"@_href": "#/LabColor"
						},
						{
							"@_navtitle": "RGBColor",
							"@_href": "#/RGBColor"
						},
						{
							"@_navtitle": "CMYKColor",
							"@_href": "#/CMYKColor"
						},
						{
							"@_navtitle": "GrayColor",
							"@_href": "#/GrayColor"
						},
						{
							"@_navtitle": "NoColor",
							"@_href": "#/NoColor"
						},
						{
							"@_navtitle": "SpotColor",
							"@_href": "#/SpotColor"
						},
						{
							"@_navtitle": "PatternColor",
							"@_href": "#/PatternColor"
						},
						{
							"@_navtitle": "GradientColor",
							"@_href": "#/GradientColor"
						}
					],
					"@_navtitle": "Color classes for Adobe Illustrator"
				},
				{
					"topicref": [
						{
							"@_navtitle": "AutoKernType",
							"@_href": "#/AutoKernType"
						},
						{
							"@_navtitle": "AutoLeadingType",
							"@_href": "#/AutoLeadingType"
						},
						{
							"@_navtitle": "CaseChangeType",
							"@_href": "#/CaseChangeType"
						},
						{
							"@_navtitle": "FontCapsOption",
							"@_href": "#/FontCapsOption"
						},
						{
							"@_navtitle": "FontBaselineOption",
							"@_href": "#/FontBaselineOption"
						},
						{
							"@_navtitle": "FontOpenTypePositionOption",
							"@_href": "#/FontOpenTypePositionOption"
						},
						{
							"@_navtitle": "FigureStyleType",
							"@_href": "#/FigureStyleType"
						},
						{
							"@_navtitle": "BaselineDirectionType",
							"@_href": "#/BaselineDirectionType"
						},
						{
							"@_navtitle": "LanguageType",
							"@_href": "#/LanguageType"
						},
						{
							"@_navtitle": "AlternateGlyphsForm",
							"@_href": "#/AlternateGlyphsForm"
						},
						{
							"@_navtitle": "StyleRunAlignmentType",
							"@_href": "#/StyleRunAlignmentType"
						},
						{
							"@_navtitle": "WariChuJustificationType",
							"@_href": "#/WariChuJustificationType"
						},
						{
							"@_navtitle": "KashidasType",
							"@_href": "#/KashidasType"
						},
						{
							"@_navtitle": "DirOverrideType",
							"@_href": "#/DirOverrideType"
						},
						{
							"@_navtitle": "DigitSetType",
							"@_href": "#/DigitSetType"
						},
						{
							"@_navtitle": "DiacVPosType",
							"@_href": "#/DiacVPosType"
						},
						{
							"@_navtitle": "KashidaWidthType",
							"@_href": "#/KashidaWidthType"
						},
						{
							"@_navtitle": "ComposerEngineType",
							"@_href": "#/ComposerEngineType"
						},
						{
							"@_navtitle": "ParagraphDirectionType",
							"@_href": "#/ParagraphDirectionType"
						},
						{
							"@_navtitle": "BurasagariTypeEnum",
							"@_href": "#/BurasagariTypeEnum"
						},
						{
							"@_navtitle": "KinsokuOrderEnum",
							"@_href": "#/KinsokuOrderEnum"
						},
						{
							"@_navtitle": "FirstBaselineType",
							"@_href": "#/FirstBaselineType"
						},
						{
							"@_navtitle": "TextPath",
							"@_href": "#/TextPath"
						},
						{
							"@_navtitle": "Story",
							"@_href": "#/Story"
						},
						{
							"@_navtitle": "TextRange",
							"@_href": "#/TextRange"
						},
						{
							"@_navtitle": "InsertionPoint",
							"@_href": "#/InsertionPoint"
						},
						{
							"@_navtitle": "CharacterStyle",
							"@_href": "#/CharacterStyle"
						},
						{
							"@_navtitle": "ParagraphStyle",
							"@_href": "#/ParagraphStyle"
						},
						{
							"@_navtitle": "CharacterAttributes",
							"@_href": "#/CharacterAttributes"
						},
						{
							"@_navtitle": "ParagraphAttributes",
							"@_href": "#/ParagraphAttributes"
						}
					],
					"@_navtitle": "Text processing commands and classes for Adobe Illustrator"
				},
				{
					"topicref": {
						"@_navtitle": "Matrix",
						"@_href": "#/Matrix"
					},
					"@_navtitle": "Transformation matrix events and classes for Adobe Illustrator"
				},
				{
					"@_navtitle": "Classes used only for creating path items. Cannot be use to access page items."
				},
				{
					"topicref": [
						{
							"@_navtitle": "LibraryType",
							"@_href": "#/LibraryType"
						},
						{
							"@_navtitle": "OpenOptionsPhotoshop",
							"@_href": "#/OpenOptionsPhotoshop"
						},
						{
							"@_navtitle": "OpenOptionsPDF",
							"@_href": "#/OpenOptionsPDF"
						},
						{
							"@_navtitle": "OpenOptionsAutoCAD",
							"@_href": "#/OpenOptionsAutoCAD"
						},
						{
							"@_navtitle": "OpenOptions",
							"@_href": "#/OpenOptions"
						}
					],
					"@_navtitle": "File opening options classes for Adobe Illustrator"
				},
				{
					"topicref": [
						{
							"@_navtitle": "FXGSaveOptions",
							"@_href": "#/FXGSaveOptions"
						},
						{
							"@_navtitle": "EPSSaveOptions",
							"@_href": "#/EPSSaveOptions"
						},
						{
							"@_navtitle": "PDFSaveOptions",
							"@_href": "#/PDFSaveOptions"
						},
						{
							"@_navtitle": "IllustratorSaveOptions",
							"@_href": "#/IllustratorSaveOptions"
						}
					],
					"@_navtitle": "File save options classes for Adobe Illustrator"
				},
				{
					"topicref": [
						{
							"@_navtitle": "DocumentType",
							"@_href": "#/DocumentType"
						},
						{
							"@_navtitle": "ExportForScreensScaleType",
							"@_href": "#/ExportForScreensScaleType"
						},
						{
							"@_navtitle": "ExportForScreensType",
							"@_href": "#/ExportForScreensType"
						},
						{
							"@_navtitle": "ExportType",
							"@_href": "#/ExportType"
						},
						{
							"@_navtitle": "ColorReductionMethod",
							"@_href": "#/ColorReductionMethod"
						},
						{
							"@_navtitle": "ColorDitherMethod",
							"@_href": "#/ColorDitherMethod"
						},
						{
							"@_navtitle": "ExportForScreensItemToExport",
							"@_href": "#/ExportForScreensItemToExport"
						},
						{
							"@_navtitle": "ExportForScreensOptionsJPEG",
							"@_href": "#/ExportForScreensOptionsJPEG"
						},
						{
							"@_navtitle": "ExportForScreensOptionsPNG8",
							"@_href": "#/ExportForScreensOptionsPNG8"
						},
						{
							"@_navtitle": "ExportForScreensOptionsPNG24",
							"@_href": "#/ExportForScreensOptionsPNG24"
						},
						{
							"@_navtitle": "ExportForScreensOptionsWebOptimizedSVG",
							"@_href": "#/ExportForScreensOptionsWebOptimizedSVG"
						},
						{
							"@_navtitle": "ExportForScreensPDFOptions",
							"@_href": "#/ExportForScreensPDFOptions"
						},
						{
							"@_navtitle": "ExportOptionsJPEG",
							"@_href": "#/ExportOptionsJPEG"
						},
						{
							"@_navtitle": "ExportOptionsPNG8",
							"@_href": "#/ExportOptionsPNG8"
						},
						{
							"@_navtitle": "ExportOptionsPNG24",
							"@_href": "#/ExportOptionsPNG24"
						},
						{
							"@_navtitle": "ExportOptionsGIF",
							"@_href": "#/ExportOptionsGIF"
						},
						{
							"@_navtitle": "ExportOptionsPhotoshop",
							"@_href": "#/ExportOptionsPhotoshop"
						},
						{
							"@_navtitle": "ExportOptionsSVG",
							"@_href": "#/ExportOptionsSVG"
						},
						{
							"@_navtitle": "ExportOptionsWebOptimizedSVG",
							"@_href": "#/ExportOptionsWebOptimizedSVG"
						},
						{
							"@_navtitle": "ExportOptionsAutoCAD",
							"@_href": "#/ExportOptionsAutoCAD"
						},
						{
							"@_navtitle": "ExportOptionsTIFF",
							"@_href": "#/ExportOptionsTIFF"
						},
						{
							"@_navtitle": "ImageCaptureOptions",
							"@_href": "#/ImageCaptureOptions"
						}
					],
					"@_navtitle": "File export options classes for Adobe Illustrator"
				},
				{
					"topicref": [
						{
							"@_navtitle": "Variable",
							"@_href": "#/Variable"
						},
						{
							"@_navtitle": "DataSet",
							"@_href": "#/DataSet"
						}
					],
					"@_navtitle": "Commands and classes for controling Adobe Illustrator's dynamic publishing behavior"
				},
				{
					"@_navtitle": "Miscellaneous standard events and classes"
				},
				{
					"topicref": [
						{
							"@_navtitle": "PrintArtworkDesignation",
							"@_href": "#/PrintArtworkDesignation"
						},
						{
							"@_navtitle": "PrintingBounds",
							"@_href": "#/PrintingBounds"
						},
						{
							"@_navtitle": "PrintColorSeparationMode",
							"@_href": "#/PrintColorSeparationMode"
						},
						{
							"@_navtitle": "PrintOrientation",
							"@_href": "#/PrintOrientation"
						},
						{
							"@_navtitle": "PrintPosition",
							"@_href": "#/PrintPosition"
						},
						{
							"@_navtitle": "PrintTiling",
							"@_href": "#/PrintTiling"
						},
						{
							"@_navtitle": "PageMarksTypes",
							"@_href": "#/PageMarksTypes"
						},
						{
							"@_navtitle": "PrintFontDownloadMode",
							"@_href": "#/PrintFontDownloadMode"
						},
						{
							"@_navtitle": "FontSubstitutionPolicy",
							"@_href": "#/FontSubstitutionPolicy"
						},
						{
							"@_navtitle": "PostScriptImageCompressionType",
							"@_href": "#/PostScriptImageCompressionType"
						},
						{
							"@_navtitle": "PrintColorProfile",
							"@_href": "#/PrintColorProfile"
						},
						{
							"@_navtitle": "PrintColorIntent",
							"@_href": "#/PrintColorIntent"
						},
						{
							"@_navtitle": "PrinterTypeEnum",
							"@_href": "#/PrinterTypeEnum"
						},
						{
							"@_navtitle": "PrinterColorMode",
							"@_href": "#/PrinterColorMode"
						},
						{
							"@_navtitle": "InkPrintStatus",
							"@_href": "#/InkPrintStatus"
						},
						{
							"@_navtitle": "InkType",
							"@_href": "#/InkType"
						},
						{
							"@_navtitle": "TrappingType",
							"@_href": "#/TrappingType"
						},
						{
							"@_navtitle": "Printer",
							"@_href": "#/Printer"
						},
						{
							"@_navtitle": "PrinterInfo",
							"@_href": "#/PrinterInfo"
						},
						{
							"@_navtitle": "PPDFile",
							"@_href": "#/PPDFile"
						},
						{
							"@_navtitle": "PPDFileInfo",
							"@_href": "#/PPDFileInfo"
						},
						{
							"@_navtitle": "Paper",
							"@_href": "#/Paper"
						},
						{
							"@_navtitle": "PaperInfo",
							"@_href": "#/PaperInfo"
						},
						{
							"@_navtitle": "Screen",
							"@_href": "#/Screen"
						},
						{
							"@_navtitle": "ScreenInfo",
							"@_href": "#/ScreenInfo"
						},
						{
							"@_navtitle": "ScreenSpotFunction",
							"@_href": "#/ScreenSpotFunction"
						},
						{
							"@_navtitle": "Ink",
							"@_href": "#/Ink"
						},
						{
							"@_navtitle": "InkInfo",
							"@_href": "#/InkInfo"
						},
						{
							"@_navtitle": "PrintOptions",
							"@_href": "#/PrintOptions"
						},
						{
							"@_navtitle": "PrintPaperOptions",
							"@_href": "#/PrintPaperOptions"
						},
						{
							"@_navtitle": "PrintJobOptions",
							"@_href": "#/PrintJobOptions"
						},
						{
							"@_navtitle": "PrintColorSeparationOptions",
							"@_href": "#/PrintColorSeparationOptions"
						},
						{
							"@_navtitle": "PrintCoordinateOptions",
							"@_href": "#/PrintCoordinateOptions"
						},
						{
							"@_navtitle": "PrintPageMarksOptions",
							"@_href": "#/PrintPageMarksOptions"
						},
						{
							"@_navtitle": "PrintFontOptions",
							"@_href": "#/PrintFontOptions"
						},
						{
							"@_navtitle": "PrintPostScriptOptions",
							"@_href": "#/PrintPostScriptOptions"
						},
						{
							"@_navtitle": "PrintColorManagementOptions",
							"@_href": "#/PrintColorManagementOptions"
						},
						{
							"@_navtitle": "PrintFlattenerOptions",
							"@_href": "#/PrintFlattenerOptions"
						}
					],
					"@_navtitle": "Printing classes for Adobe Illustrator"
				},
				{
					"topicref": [
						{
							"@_navtitle": "TracingMethodType",
							"@_href": "#/TracingMethodType"
						},
						{
							"@_navtitle": "TracingModeType",
							"@_href": "#/TracingModeType"
						},
						{
							"@_navtitle": "TracingColorType",
							"@_href": "#/TracingColorType"
						},
						{
							"@_navtitle": "ViewType",
							"@_href": "#/ViewType"
						},
						{
							"@_navtitle": "TracingOptions",
							"@_href": "#/TracingOptions"
						},
						{
							"@_navtitle": "TracingObject",
							"@_href": "#/TracingObject"
						}
					],
					"@_navtitle": "Tracing classes for Adobe Illustrator"
				},
				{
					"topicref": {
						"@_navtitle": "Asset",
						"@_href": "#/Asset"
					},
					"@_navtitle": "Classes used for working with (exportable) assets in Adobe Illustrator"
				},
				{
					"topicref": [
						{
							"@_navtitle": "RepeatGridShiftFlipType",
							"@_href": "#/RepeatGridShiftFlipType"
						},
						{
							"@_navtitle": "RadialRepeatUpdate",
							"@_href": "#/RadialRepeatUpdate"
						},
						{
							"@_navtitle": "GridRepeatUpdate",
							"@_href": "#/GridRepeatUpdate"
						},
						{
							"@_navtitle": "SymmetryRepeatUpdate",
							"@_href": "#/SymmetryRepeatUpdate"
						},
						{
							"@_navtitle": "SymmetryRepeatItem",
							"@_href": "#/SymmetryRepeatItem"
						},
						{
							"@_navtitle": "RadialRepeatItem",
							"@_href": "#/RadialRepeatItem"
						},
						{
							"@_navtitle": "GridRepeatItem",
							"@_href": "#/GridRepeatItem"
						},
						{
							"@_navtitle": "RadialRepeatConfig",
							"@_href": "#/RadialRepeatConfig"
						},
						{
							"@_navtitle": "GridRepeatConfig",
							"@_href": "#/GridRepeatConfig"
						},
						{
							"@_navtitle": "SymmetryRepeatConfig",
							"@_href": "#/SymmetryRepeatConfig"
						}
					],
					"@_navtitle": "Classes used for working with Repeat art in Adobe Illustrator"
				},
				{
					"topicref": [
						{
							"@_navtitle": "Assets",
							"@_href": "#/Assets"
						},
						{
							"@_navtitle": "Artboards",
							"@_href": "#/Artboards"
						},
						{
							"@_navtitle": "Documents",
							"@_href": "#/Documents"
						},
						{
							"@_navtitle": "Layers",
							"@_href": "#/Layers"
						},
						{
							"@_navtitle": "GroupItems",
							"@_href": "#/GroupItems"
						},
						{
							"@_navtitle": "PageItems",
							"@_href": "#/PageItems"
						},
						{
							"@_navtitle": "PathItems",
							"@_href": "#/PathItems"
						},
						{
							"@_navtitle": "PathPoints",
							"@_href": "#/PathPoints"
						},
						{
							"@_navtitle": "CompoundPathItems",
							"@_href": "#/CompoundPathItems"
						},
						{
							"@_navtitle": "Stories",
							"@_href": "#/Stories"
						},
						{
							"@_navtitle": "TextFrameItems",
							"@_href": "#/TextFrameItems"
						},
						{
							"@_navtitle": "LegacyTextItems",
							"@_href": "#/LegacyTextItems"
						},
						{
							"@_navtitle": "TextRanges",
							"@_href": "#/TextRanges"
						},
						{
							"@_navtitle": "InsertionPoints",
							"@_href": "#/InsertionPoints"
						},
						{
							"@_navtitle": "Characters",
							"@_href": "#/Characters"
						},
						{
							"@_navtitle": "Words",
							"@_href": "#/Words"
						},
						{
							"@_navtitle": "Lines",
							"@_href": "#/Lines"
						},
						{
							"@_navtitle": "Paragraphs",
							"@_href": "#/Paragraphs"
						},
						{
							"@_navtitle": "CharacterStyles",
							"@_href": "#/CharacterStyles"
						},
						{
							"@_navtitle": "ParagraphStyles",
							"@_href": "#/ParagraphStyles"
						},
						{
							"@_navtitle": "Spots",
							"@_href": "#/Spots"
						},
						{
							"@_navtitle": "Swatches",
							"@_href": "#/Swatches"
						},
						{
							"@_navtitle": "SwatchGroups",
							"@_href": "#/SwatchGroups"
						},
						{
							"@_navtitle": "Gradients",
							"@_href": "#/Gradients"
						},
						{
							"@_navtitle": "GradientStops",
							"@_href": "#/GradientStops"
						},
						{
							"@_navtitle": "Patterns",
							"@_href": "#/Patterns"
						},
						{
							"@_navtitle": "Symbols",
							"@_href": "#/Symbols"
						},
						{
							"@_navtitle": "SymbolItems",
							"@_href": "#/SymbolItems"
						},
						{
							"@_navtitle": "Brushes",
							"@_href": "#/Brushes"
						},
						{
							"@_navtitle": "ArtStyles",
							"@_href": "#/ArtStyles"
						},
						{
							"@_navtitle": "TextFonts",
							"@_href": "#/TextFonts"
						},
						{
							"@_navtitle": "Tags",
							"@_href": "#/Tags"
						},
						{
							"@_navtitle": "RasterItems",
							"@_href": "#/RasterItems"
						},
						{
							"@_navtitle": "PlacedItems",
							"@_href": "#/PlacedItems"
						},
						{
							"@_navtitle": "EmbeddedItems",
							"@_href": "#/EmbeddedItems"
						},
						{
							"@_navtitle": "MeshItems",
							"@_href": "#/MeshItems"
						},
						{
							"@_navtitle": "GraphItems",
							"@_href": "#/GraphItems"
						},
						{
							"@_navtitle": "PluginItems",
							"@_href": "#/PluginItems"
						},
						{
							"@_navtitle": "NonNativeItems",
							"@_href": "#/NonNativeItems"
						},
						{
							"@_navtitle": "Views",
							"@_href": "#/Views"
						},
						{
							"@_navtitle": "Variables",
							"@_href": "#/Variables"
						},
						{
							"@_navtitle": "DataSets",
							"@_href": "#/DataSets"
						},
						{
							"@_navtitle": "SymmetryRepeatItems",
							"@_href": "#/SymmetryRepeatItems"
						},
						{
							"@_navtitle": "RadialRepeatItems",
							"@_href": "#/RadialRepeatItems"
						},
						{
							"@_navtitle": "GridRepeatItems",
							"@_href": "#/GridRepeatItems"
						}
					],
					"@_navtitle": "Collections"
				},
				{
					"topicref": [
						{
							"@_navtitle": "Point",
							"@_href": "#/Point"
						},
						{
							"@_navtitle": "Rectangle",
							"@_href": "#/Rectangle"
						}
					],
					"@_navtitle": "Other Classes"
				}
			],
			"@_title": "Adobe Illustrator 28 Type Library",
			"@_time": "Thu Aug 10 10:30:11 UTC+5 2023"
		},
		"package": {
			"classdef": [
				{
					"shortdesc": "The screen mode.",
					"elements": {
						"property": [
							{
								"shortdesc": "Display multiple windows.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "MULTIWINDOW",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Full screen with menu bar.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "DESKTOP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Full screen without menu bar.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "FULLSCREEN",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ScreenMode",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The color model.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "CMYK",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "GRAY",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "RGB",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "SPOT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PATTERN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "GRADIENT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ColorType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The color spaces available for documents.",
					"elements": {
						"property": [
							{
								"shortdesc": "RGB document color space.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "RGB",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "CMYK document color space.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "CMYK",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentColorSpace",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The preset types available for new documents.",
					"elements": {
						"property": [
							{
								"shortdesc": "The default Print document preset.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Print",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The default Web document preset.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "Web",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The default Mobile document preset.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "Mobile",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The default Video and Film document preset.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "Video",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The default CMYK document preset.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "BasicCMYK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The default RGB document preset.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "BasicRGB",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentPresetType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The raster resolutions available when creating a new document.",
					"elements": {
						"property": [
							{
								"shortdesc": "Low raster resolution, 72 PPI.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ScreenResolution",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Medium raster resolution, 150 PPI.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "MediumResolution",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "High raster resolution, 300 PPI.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "HighResolution",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentRasterResolution",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The transparency grid for the new document, in video presets.",
					"elements": {
						"property": [
							{
								"shortdesc": "No grids.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "TransparencyGridNone",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Light grid colors.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TransparencyGridLight",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Medium grid colors.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TransparencyGridMedium",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Dark color grids.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "TransparencyGridDark",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Red grids.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "TransparencyGridRed",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Orange grids.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "TransparencyGridOrange",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Green grids.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "TransparencyGridGreen",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Blue grids.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "TransparencyGridBlue",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Purple grids.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "TransparencyGridPurple",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentTransparencyGrid",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The preview modes available when creating a new document.",
					"elements": {
						"property": [
							{
								"shortdesc": "Default Preview mode.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "DefaultPreview",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Pixel Preview mode.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PixelPreview",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Overprint Preview Mode.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "OverprintPreview",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentPreviewMode",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The layout of artboards in document.",
					"elements": {
						"property": [
							{
								"shortdesc": "Arrange artboards in Grid by Row pattern.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "GridByRow",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arrange artboards in Grid by Column pattern.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "GridByCol",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arrange artboards in a single row.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "Row",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arrange artboards in a single column.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "Column",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arrange artboards in Grid by Row pattern from right-to-left.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "RLGridByRow",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arrange artboards in Grid by Column pattern from right-to-left.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "RLGridByCol",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arrange artboards in a single row from right-to-left.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "RLRow",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentArtboardLayout",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The color space.",
					"elements": {
						"property": [
							{
								"shortdesc": "Gray color space.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "GrayScale",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "RGB color space.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RGB",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "CMYK color space.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "CMYK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "LAB color space.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "LAB",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Separation color space.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "Separation",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "DeviceN color space.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "DeviceN",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Indexed color space.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "Indexed",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ImageColorSpace",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The stroke cap.",
					"elements": {
						"property": [
							{
								"shortdesc": "Butted cap.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "BUTTENDCAP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Rounded cap.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "ROUNDENDCAP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Projecting cap.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "PROJECTINGENDCAP",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "StrokeCap",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The stroke joint.",
					"elements": {
						"property": [
							{
								"shortdesc": "Mitered joints.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "MITERENDJOIN",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Rounded joints.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "ROUNDENDJOIN",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Beveled joints.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "BEVELENDJOIN",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "StrokeJoin",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The path point selection state.",
					"elements": {
						"property": [
							{
								"shortdesc": "Path point not selected.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "NOSELECTION",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Anchor point selected.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "ANCHORPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Left direction point selected.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "LEFTDIRECTION",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Right direction point selected.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "RIGHTDIRECTION",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Left and right direction points selected.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "LEFTRIGHTPOINT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PathPointSelection",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The path point type: smooth/corner.",
					"elements": {
						"property": [
							{
								"shortdesc": "Smooth path point.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SMOOTH",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Corner point.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "CORNER",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PointType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The type of text art.",
					"elements": {
						"property": [
							{
								"shortdesc": "Text from a point.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "POINTTEXT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Text within an area.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "AREATEXT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Text on a path.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PATHTEXT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TextType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The type of text antialiasing.",
					"elements": {
						"property": [
							{
								"shortdesc": "Text from a point.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "NONE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Text within an area.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SHARP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Text on a path.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "CRISP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Text on a path.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "STRONG",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TextAntialias",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The gradient type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Linear gradient.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "LINEAR",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RADIAL",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "GradientType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The orientation.",
					"elements": {
						"property": [
							{
								"shortdesc": "Horizontal orientation.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "HORIZONTAL",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Vertical orientation.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "VERTICAL",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TextOrientation",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The crop style.",
					"elements": {
						"property": [
							{
								"shortdesc": "Standard crop style.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Standard",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Japanese crop style.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "Japanese",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "CropOptions",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The raster link state.",
					"elements": {
						"property": [
							{
								"shortdesc": "Image data is not set.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "NODATA",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Image data is from the linked file.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "DATAFROMFILE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Image data has been modified.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "DATAMODIFIED",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "RasterLinkState",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The tab alignment.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "Left",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Center",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "Right",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "Decimal",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TabStopAlignment",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The paragraph alignment.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "LEFT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "RIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "CENTER",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "FULLJUSTIFYLASTLINELEFT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "FULLJUSTIFYLASTLINERIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "FULLJUSTIFYLASTLINECENTER",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "FULLJUSTIFY",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "Justification",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The transformation type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Transform relative to the illustration's page origin.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "DOCUMENTORIGIN",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's top left corner.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TOPLEFT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's left edge.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "LEFT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's bottom left corner.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "BOTTOMLEFT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's top edge.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "TOP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's center.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "CENTER",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's bottom edge.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "BOTTOM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's top right corner.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "TOPRIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's right edge.",
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "RIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transform relative to the object's bottom right corner.",
								"datatype": {
									"type": "int",
									"value": 10
								},
								"@_name": "BOTTOMRIGHT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "Transformation",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Illustrator library types.",
					"elements": {
						"property": [
							{
								"shortdesc": "Illustrator artwork.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ILLUSTRATORARTWORK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Illustrator swatches library.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SWATCHES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Illustrator brushes library.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "BRUSHES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Illustrator graphic styles library.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "GRAPHICSTYLES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Illustrator symbols library.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "SYMBOLS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "LibraryType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Savable document types.",
					"elements": {
						"property": [
							{
								"shortdesc": "Illustrator file format.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ILLUSTRATOR",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "EPS file format.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "EPS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Acrobat PDF file format.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "PDF",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "FXG file format.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "FXG",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Export for screens scale type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Scale artwork by factors like 1x, 2x, 3x and so on, where 1x means 72 ppi.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "SCALEBYFACTOR",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Scale artwork by specifying artwork width in pixels like 100px, 124px etc. Height of the artwork is adjusted automatically to maintain the aspect ratio.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SCALEBYWIDTH",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Scale artwork by specifying artwork height in pixels like 100px, 124px etc. Width of the artwork is adjusted automatically to maintain the aspect ratio.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SCALEBYHEIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Scale artwork by specifying resolution in ppi like 72 ppi, 100 ppi, 144 ppi etc.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "SCALEBYRESOLUTION",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportForScreensScaleType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Export for screens type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Export file in JPEG (100% quality) format.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SE_JPEG100",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Export file in JPEG (80% quality) format.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SE_JPEG80",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Export file in JPEG (50% quality) format.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "SE_JPEG50",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Export file in JPEG (20% quality) format.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "SE_JPEG20",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Export file in SVG format.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "SE_SVG",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Export file in PNG 8-bit format.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "SE_PNG8",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Export file in PNG 24-bit format.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "SE_PNG24",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Export file in Acrobat PDF format.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "SE_PDF",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportForScreensType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Export file types.",
					"elements": {
						"property": [
							{
								"shortdesc": "JPEG export file format.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "JPEG",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Photoshop export file format.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PHOTOSHOP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "SVG export file format.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "SVG",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "PNG 8-bit export file format.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "PNG8",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "PNG 24-bit export file format.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "PNG24",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "GIF export file format.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "GIF",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "AutoCAD export file format.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "AUTOCAD",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "TIFF export file format.",
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "TIFF",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Web Optimized SVG export file format.",
								"datatype": {
									"type": "int",
									"value": 10
								},
								"@_name": "WOSVG",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Method used to reduce color for PNG8 and GIF export formats.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 1399616630
								},
								"@_name": "SELECTIVE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1097101428
								},
								"@_name": "ADAPTIVE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1349673840
								},
								"@_name": "PERCEPTUAL",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1466262048
								},
								"@_name": "WEB",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ColorReductionMethod",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Method used to dither colors for PNG8 and GIF export formats.",
					"elements": {
						"property": [
							{
								"shortdesc": "No dithering.",
								"datatype": {
									"type": "int",
									"value": 1315925605
								},
								"@_name": "NOREDUCTION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1147564910
								},
								"@_name": "DIFFUSION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1349808750
								},
								"@_name": "PATTERNDITHER",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1112436585
								},
								"@_name": "NOISE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ColorDitherMethod",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The compatibility type.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "ILLUSTRATOR3",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "JAPANESEVERSION3",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "ILLUSTRATOR8",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "ILLUSTRATOR9",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 10
								},
								"@_name": "ILLUSTRATOR10",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 11
								},
								"@_name": "ILLUSTRATOR11",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 12
								},
								"@_name": "ILLUSTRATOR12",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 13
								},
								"@_name": "ILLUSTRATOR13",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 14
								},
								"@_name": "ILLUSTRATOR14",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 15
								},
								"@_name": "ILLUSTRATOR15",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 16
								},
								"@_name": "ILLUSTRATOR16",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 17
								},
								"@_name": "ILLUSTRATOR17",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 24
								},
								"@_name": "ILLUSTRATOR24",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "Compatibility",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "This provides a means for matching the color characteristics of a PDF document.",
					"elements": {
						"property": [
							{
								"shortdesc": "The user isn't complying with any PDF standard.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PDFXNONE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Supports only a CMYK and spot color workflow, targeted to a specific output device.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PDFX1A2001",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Supports only a CMYK and spot color workflow, targeted to a specific output device.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "PDFX1A2003",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Supports a color-managed workflow, allowing the use of device-independent color in addition to CMYK and spot colors.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "PDFX32001",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Supports a color-managed workflow, allowing the use of device-independent color in addition to CMYK and spot colors.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "PDFX32002",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Supports a color-managed workflow, allowing the use of device-independent color in addition to CMYK and spot colors.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "PDFX32003",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Supports a color-managed workflow, allowing the use of device-independent color in addition to CMYK and spot colors.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "PDFX42007",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PDFXStandard",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The PDF compatibility type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Acrobat version 4.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "ACROBAT4",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Acrobat version 5.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "ACROBAT5",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Acrobat version 6.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "ACROBAT6",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Acrobat version 7.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "ACROBAT7",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Acrobat version 8.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "ACROBAT8",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PDFCompatibility",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The Photoshop compatibility type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Photoshop version 8.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PHOTOSHOP8",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Photoshop version 6.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PHOTOSHOP6",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PhotoshopCompatibility",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The compression type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Automatic compression.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "JPEGMINIMUM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "JPEGLOW",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "JPEGMEDIUM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "JPEGHIGH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "JPEGMAXIMUM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "ZIP4BIT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "ZIP8BIT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatically choose between JPEG and ZIP performing minimum compression depending on images.",
								"datatype": {
									"type": "int",
									"value": 10
								},
								"@_name": "AUTOMATICJPEGMINIMUM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG compression low.",
								"datatype": {
									"type": "int",
									"value": 11
								},
								"@_name": "AUTOMATICJPEGLOW",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG compression medium.",
								"datatype": {
									"type": "int",
									"value": 12
								},
								"@_name": "AUTOMATICJPEGMEDIUM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG compression high.",
								"datatype": {
									"type": "int",
									"value": 13
								},
								"@_name": "AUTOMATICJPEGHIGH",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG compression maximum.",
								"datatype": {
									"type": "int",
									"value": 14
								},
								"@_name": "AUTOMATICJPEGMAXIMUM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG2000 compression minimum.",
								"datatype": {
									"type": "int",
									"value": 15
								},
								"@_name": "AUTOMATICJPEG2000MINIMUM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG2000 compression low.",
								"datatype": {
									"type": "int",
									"value": 16
								},
								"@_name": "AUTOMATICJPEG2000LOW",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG2000 compression medium.",
								"datatype": {
									"type": "int",
									"value": 17
								},
								"@_name": "AUTOMATICJPEG2000MEDIUM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG2000 compression high.",
								"datatype": {
									"type": "int",
									"value": 18
								},
								"@_name": "AUTOMATICJPEG2000HIGH",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG2000 compression maximum.",
								"datatype": {
									"type": "int",
									"value": 19
								},
								"@_name": "AUTOMATICJPEG2000MAXIMUM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatic JPEG2000 compression lossless.",
								"datatype": {
									"type": "int",
									"value": 20
								},
								"@_name": "AUTOMATICJPEG2000LOSSLESS",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 21
								},
								"@_name": "JPEG2000MINIMUM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 22
								},
								"@_name": "JPEG2000LOW",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 23
								},
								"@_name": "JPEG2000MEDIUM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 24
								},
								"@_name": "JPEG2000HIGH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 25
								},
								"@_name": "JPEG2000MAXIMUM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 26
								},
								"@_name": "JPEG2000LOSSLESS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "CompressionQuality",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "PDF color conversion policy.",
					"elements": {
						"property": [
							{
								"shortdesc": "Preserves color data as is.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Converts all colors to the profile selected for Destination.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "COLORCONVERSIONTODEST",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "COLORCONVERSIONREPURPOSE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ColorConversion",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "PDF destination profile.",
					"elements": {
						"property": [
							{
								"shortdesc": "N/A.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Converts all colors to the profile selected for Destination.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "COLORDESTINATIONDOCCMYK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "COLORDESTINATIONWORKINGCMYK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "COLORDESTINATIONDOCRGB",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "COLORDESTINATIONWORKINGRGB",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserves color numbers for untagged content in the same color space as the destination profile. Not available with CMS off.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "COLORDESTINATIONPROFILE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ColorDestination",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "PDF ICC profile inclusion.",
					"elements": {
						"property": [
							{
								"shortdesc": "All profiles removed (embedProfile == false)",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Everything gets tagged (embedProfile == true)",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "INCLUDEALLPROFILE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Leave tagged items tagged, untagged items untagged.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "LEAVEPROFILEUNCHANGED",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Tag all RGB, leave CMYK unchanged.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "INCLUDERGBPROFILE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Everything ends up tagged with the destination profile.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "INCLUDEDESTPROFILE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ColorProfile",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The monochrome compression type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Automatic compression.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "CCITT Group 3 compression.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "CCIT3",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "CCITT Group 4 compression.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "CCIT4",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "ZIP compression.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "MONOZIP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "RLE compression.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "RUNLENGTH",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "MonochromeCompression",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Pdf trim mark weight options.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TRIMMARKWEIGHT0125",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TRIMMARKWEIGHT025",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "TRIMMARKWEIGHT05",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PDFTrimMarkWeight",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Pdf overprint options.",
					"elements": {
						"property": [
							{
								"shortdesc": "Preserve overprint.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PRESERVEPDFOVERPRINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Discard overprint.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "DISCARDPDFOVERPRINT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PDFOverprint",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Pdf print permissions.",
					"elements": {
						"property": [
							{
								"shortdesc": "Printing allowed none - 128bit.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PRINT128NONE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Print allowed only in low resolution - 128bit.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PRINT128LOWRESOLUTION",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Print high resolution allowed - 128bit.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "PRINT128HIGHRESOLUTION",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Printing allowed none - 40bit.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "PRINT40NONE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Print high resolution allowed - 40bit.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "PRINT40HIGHRESOLUTION",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PDFPrintAllowedEnum",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Options available for making changes to a pdf document.",
					"elements": {
						"property": [
							{
								"shortdesc": "No changes allowed - 128bit.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "CHANGE128NONE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Editing page allowed - 128bit.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "CHANGE128EDITPAGE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Filling in of form field and signing allowed - 128bit.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "CHANGE128FILLFORM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Comment allowed - 128bit.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "CHANGE128COMMENTING",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Any changes allowed except extracting of pages- 128bit.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "CHANGE128ANYCHANGES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "No changes allowed - 40bit.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "CHANGE40NONE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Comment allowed - 40bit.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "CHANGE40COMMENTING",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Page layout allowed - 40bit.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "CHANGE40PAGELAYOUT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Any changes allowed except extracting of pages- 40bit.",
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "CHANGE40ANYCHANGES",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PDFChangesAllowedEnum",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The resample type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Downsampling.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "NODOWNSAMPLE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Average Downsampling.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "AVERAGEDOWNSAMPLE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Subsampling.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SUBSAMPLE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Bicubic Downsampling.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "BICUBICDOWNSAMPLE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DownsampleMethod",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The preview type.",
					"elements": {
						"property": [
							{
								"shortdesc": "No preview.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Black and white Macintosh preview.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "BWMACINTOSH",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Color Macintosh preview.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "COLORMACINTOSH",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Black and white PC preview.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "BWTIFF",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Color PC preview.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "COLORTIFF",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transparent color PC preview (8 or later)",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "TRANSPARENTCOLORTIFF",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "EPSPreview",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The PostScript levels available when saving EPS files.",
					"elements": {
						"property": [
							{
								"shortdesc": "PostScript Level 2.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "LEVEL2",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "PostScript Level 3.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "LEVEL3",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "EPSPostScriptLevelEnum",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The PostScript levels supported by various printers.",
					"elements": {
						"property": [
							{
								"shortdesc": "PostScript Level 1.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PSLEVEL1",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "PostScript Level 2.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PSLEVEL2",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "PostScript Level 3.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "PSLEVEL3",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrinterPostScriptLevelEnum",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The options that may be applied when saving a file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Save changes.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SAVECHANGES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Do not save changes.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "DONOTSAVECHANGES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ask the user whether to save.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "PROMPTTOSAVECHANGES",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SaveOptions",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"shortdesc": "Ruler units are unknown.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Unknown",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are unknown.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "Inches",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in centimeters.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "Centimeters",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in points.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "Points",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in picas.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "Picas",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in millimeters.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "Millimeters",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in Qs.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "Qs",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in pixels.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "Pixels",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in pixels.",
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "FeetInches",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in pixels.",
								"datatype": {
									"type": "int",
									"value": 10
								},
								"@_name": "Meters",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in pixels.",
								"datatype": {
									"type": "int",
									"value": 11
								},
								"@_name": "Yards",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ruler units are measured in pixels.",
								"datatype": {
									"type": "int",
									"value": 12
								},
								"@_name": "Feet",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "RulerUnits",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Blend modes used when compositing an object.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "NORMAL",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "MULTIPLY",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SCREEN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "OVERLAY",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "SOFTLIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "HARDLIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "COLORDODGE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "COLORBURN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "DARKEN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "LIGHTEN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 10
								},
								"@_name": "DIFFERENCE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 11
								},
								"@_name": "EXCLUSION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 12
								},
								"@_name": "HUE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 13
								},
								"@_name": "SATURATIONBLEND",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 14
								},
								"@_name": "COLORBLEND",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 15
								},
								"@_name": "LUMINOSITY",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "BlendModes",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Knockout state of a page item.",
					"elements": {
						"property": [
							{
								"shortdesc": "Unknown/uninitialized knockout state.",
								"datatype": {
									"type": "int",
									"value": -1
								},
								"@_name": "Unknown",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Knockout off.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DISABLED",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Knockout off.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ENABLED",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Knockout state inherited from group?",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "INHERITED",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "KnockoutState",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "How to re-arrange the art item.",
					"elements": {
						"property": [
							{
								"shortdesc": "Move art to front of it's group or layer.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "BRINGTOFRONT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Move art one step forward in it's group or layer.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "BRINGFORWARD",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Move art one step backwards in it's group or layer.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "SENDBACKWARD",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Move art to back of it's group or layer.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "SENDTOBACK",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ZOrderMethod",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The version of the SVG DTD.",
					"elements": {
						"property": [
							{
								"shortdesc": "SVG 1.0.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SVG1_0",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "SVG 1.1.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SVG1_1",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "SVG Tiny 1.1.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "SVGTINY1_1",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "SVG Tiny 1.1 Plus.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "SVGTINY1_1PLUS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "SVG Basic 1.1.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "SVGBASIC1_1",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "SVG Tiny 1.2.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "SVGTINY1_2",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SVGDTDVersion",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "What font type to include with the file?",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SVGFONT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "OUTLINEFONT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SVGFontType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "What fonts to include with the file?",
					"elements": {
						"property": [
							{
								"shortdesc": "Use system fonts.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "GLYPHSUSED",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "COMMONENGLISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "GLYPHSUSEDPLUSENGLISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "COMMONROMAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "GLYPHSUSEDPLUSROMAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "ALLGLYPHS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SVGFontSubsetting",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"shortdesc": "ISO 8859-1.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ASCII",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "UTF8",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "UTF16",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SVGDocumentEncoding",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"shortdesc": "Style attributes with entity reference.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "ENTITIES",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "STYLEATTRIBUTES",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "STYLEELEMENTS",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "PRESENTATIONATTRIBUTES",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SVGCSSPropertyLocation",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Type of SVG Id.",
					"elements": {
						"property": [
							{
								"shortdesc": "Style attributes with entity reference.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "SVGIDMINIMAL",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SVGIDREGULAR",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SVGIDUNIQUE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SVGIdType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Decide where the raster images will be stored.",
					"elements": {
						"property": [
							{
								"shortdesc": "Embed the raster images in the svg file.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "EMBED",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "LINK",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PRESERVE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "RasterImageLocation",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "How should transparency be flattened for pre-AI9 file formats.",
					"elements": {
						"property": [
							{
								"shortdesc": "Discard transparency.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "PRESERVEPATHS",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PRESERVEAPPEARANCE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "OutputFlattening",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Color model of the custom color.",
					"elements": {
						"property": [
							{
								"shortdesc": "Registration color (prints on in all separations)",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "REGISTRATION",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Process color (mixed ink)",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PROCESS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Spot color (separate ink)",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SPOT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ColorModel",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Custom color kind of the spot color.",
					"elements": {
						"property": [
							{
								"shortdesc": "Solid ink, expressed in four CMYK values.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "SPOTCMYK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Solid color, expressed as three RGB values.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SPOTRGB",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Lab color. Only valid for spot colors.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SPOTLAB",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SpotColorKind",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Unknown",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "VISIBILITY",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "TEXTUAL",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "IMAGE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "GRAPH",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "VariableKind",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DXF",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "DWG",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoCADExportFileFormat",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "AutoCADRelease13",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "AutoCADRelease14",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "AutoCADRelease15",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "AutoCADRelease18",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "AutoCADRelease21",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "AutoCADRelease24",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoCADCompatibility",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "Points",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Picas",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "Inches",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "Millimeters",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "Centimeters",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "Pixels",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoCADUnit",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "Max8Colors",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Max16Colors",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "Max256Colors",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "TrueColors",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoCADColors",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "PNG",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "JPEG",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoCADRasterFormat",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "PreserveAppearance",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "MaximumEditability",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoCADExportOption",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "OriginalSize",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "FitArtboard",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "ScaleByValue",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoCADGlobalScaleOption",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Byte Order of TIFF file.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "IBMPC",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "MACINTOSH",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TIFFByteOrder",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "COM user interaction enumeration.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": -1
								},
								"@_name": "DONTDISPLAYALERTS",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "DISPLAYALERTS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "UserInteractionLevel",
					"@_enumeration": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "POSITIVE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": -1
								},
								"@_name": "NEGATIVE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PolarityValues",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "When should a JavaScript debugger be shown.",
					"elements": {
						"property": [
							{
								"shortdesc": "Never show the JavaScript debugger. Treat runtime errors by throwing a JavaScript exceptions.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "never",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Show the JavaScript debugger is a runtime error occurs.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "OnRuntimeError",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Show the JavaScript debugger at the first line of the JavaScript.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "BeforeRunning",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "JavaScriptExecutionMode",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The artwork layers/objects to be printed.",
					"elements": {
						"property": [
							{
								"shortdesc": "Print visible printable layers.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "VISIBLEPRINTABLELAYERS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Print visible layers.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "VISIBLELAYERS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Print all layers.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "ALLLAYERS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintArtworkDesignation",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The printing bounds type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Use artboard bounds.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "ARTBOARDBOUNDS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Use artwork bounds.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ARTWORKBOUNDS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Use crop bounds.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "CROPBOUNDS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintingBounds",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The color separation mode.",
					"elements": {
						"property": [
							{
								"shortdesc": "The composite mode.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "COMPOSITE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The host based color separation mode.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "HOSTBASEDSEPARATION",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The InRIP color separation mode.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "INRIPSEPARATION",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintColorSeparationMode",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The artwork printing orientation.",
					"elements": {
						"property": [
							{
								"shortdesc": "Portrait.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "PORTRAIT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Landscape.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "LANDSCAPE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Reverse portrait.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "REVERSEPORTRAIT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Reverse landscape.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "REVERSELANDSCAPE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Auto Rotate.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "AUTOROTATE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintOrientation",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The artwork printing position on media.",
					"elements": {
						"property": [
							{
								"shortdesc": "Translate to the top left of media.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TRANSLATETOPLEFT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Translate to the top center of media.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TRANSLATETOP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Translate to the top right of media.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "TRANSLATETOPRIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Translate to the left center of media.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "TRANSLATELEFT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Translate to the center of media.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "TRANSLATECENTER",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Translate to the right center of media.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "TRANSLATERIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Translate to the bottom left of media.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "TRANSLATEBOTTOMLEFT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Translate to the bottom center of media.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "TRANSLATEBOTTOM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Translate to the bottom right of media.",
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "TRANSLATEBOTTOMRIGHT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintPosition",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The page tiling type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Tile single full page.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "TILESINGLEFULLPAGE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Tile full pages.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TILEFULLPAGES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Tile imageable areas.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TILEIMAGEABLEAREAS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintTiling",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The page marks style type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Roman page marks style.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "Roman",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Japanese page marks style.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Japanese",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PageMarksTypes",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The printer font download mode.",
					"elements": {
						"property": [
							{
								"shortdesc": "Download none.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DOWNLOADNONE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Download subset.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "DOWNLOADSUBSET",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Download complete.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "DOWNLOADCOMPLETE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintFontDownloadMode",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The font substitution policy.",
					"elements": {
						"property": [
							{
								"shortdesc": "Substitute oblique font.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "SUBSTITUTEOBLIQUE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Substitute tint font.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SUBSTITUTETINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Substitute device font.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SUBSTITUTEDEVICE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "FontSubstitutionPolicy",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The PostScript image compression type.",
					"elements": {
						"property": [
							{
								"shortdesc": "No image compression.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "IMAGECOMPRESSIONNONE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "RLE image compression.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "RLE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "JPEG image compression.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "JPEG",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PostScriptImageCompressionType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The color profile type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Use old style AI color profile.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "OLDSTYLEPROFILE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Same as source color profile.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SOURCEPROFILE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Same as printer color profile.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PRINTERPROFILE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Use custom color profile.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "CUSTOMPROFILE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintColorProfile",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The color intent type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Perceptual color intent.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "PERCEPTUALINTENT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Saturation color intent.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SATURATIONINTENT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Relative colorimetric.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RELATIVECOLORIMETRIC",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Absolute colorimetric.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "ABSOLUTECOLORIMETRIC",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintColorIntent",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The printer type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Unknown printer type.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "Unknown",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "PostScript printer.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "POSTSCRIPTPRINTER",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Non PostScript printer.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "NONPOSTSCRIPTPRINTER",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrinterTypeEnum",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The printer color mode.",
					"elements": {
						"property": [
							{
								"shortdesc": "Color printer.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "COLORPRINTER",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Grayscale printer.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "GRAYSCALEPRINTER",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Black and white printer.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "BLACKANDWHITEPRINTER",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrinterColorMode",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The ink printing status.",
					"elements": {
						"property": [
							{
								"shortdesc": "Disable the ink during print.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DISABLEINK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Enable the ink during print.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ENABLEINK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Convert to process color during print.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "CONVERTINK",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "InkPrintStatus",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The ink type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Cyan color ink.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "CYANINK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Magenta color ink.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "MAGENTAINK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Yellow color ink.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "YELLOWINK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Black color ink.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "BLACKINK",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Custom color ink.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "CUSTOMINK",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "InkType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The trapping type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Normal trapping type.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "NORMALTRAPPING",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Transparent trapping type.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TRANSPARENT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Opaque trapping type.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "OPAQUE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Ignore opaque trapping type.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "IGNOREOPAQUE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TrappingType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The auto kern type.",
					"elements": {
						"property": [
							{
								"shortdesc": "No auto kerning.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "NOAUTOKERN",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Auto kerning.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "AUTO",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Optical kerning.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "OPTICAL",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Metrics roman only.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "METRICSROMANONLY",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoKernType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The auto leading type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Roman leading type.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "BOTTOMTOBOTTOM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Japanese leading type.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TOPTOTOP",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AutoLeadingType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The case change type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Change to upper case.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "UPPERCASE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Change to lower case.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "LOWERCASE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Change to title case.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TITLECASE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Change to sentence case.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "SENTENCECASE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "CaseChangeType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The font capitalization option.",
					"elements": {
						"property": [
							{
								"shortdesc": "Normal caps.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "NORMALCAPS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Small caps.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SMALLCAPS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All caps.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "ALLCAPS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All small caps.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "ALLSMALLCAPS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "FontCapsOption",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The font baseline option.",
					"elements": {
						"property": [
							{
								"shortdesc": "Normal baseline.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "NORMALBASELINE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Fauxed superscript baseline.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SUPERSCRIPT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Fauxed subscript baseline.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SUBSCRIPT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "FontBaselineOption",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The OpenType font position option.",
					"elements": {
						"property": [
							{
								"shortdesc": "Default position.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "OPENTYPEDEFAULT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "OpenType superscript position.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "OPENTYPESUPERSCRIPT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "OpenType subscript position.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "OPENTYPESUBSCRIPT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "OpenType numerator position.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "NUMERATOR",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "OpenType denominator position.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "DENOMINATOR",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "FontOpenTypePositionOption",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The figure style type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Default figure style.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DEFAULTFIGURESTYLE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Tabular lining style.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TABULAR",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Proportional oldstyle.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PROPORTIONALOLDSTYLE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Proportional lining style.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "PROPORTIONAL",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Tabular oldstyle.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "TABULAROLDSTYLE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "FigureStyleType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The baseline direction type.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Standard",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "VerticalRotated",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "TateChuYoko",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "BaselineDirectionType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The language of text.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "ENGLISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "FINNISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "STANDARDFRENCH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "CANADIANFRENCH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "STANDARDGERMAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "OLDGERMAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "SWISSGERMAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "ITALIAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "BOKMALNORWEGIAN",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Nynorsk Norwegian.",
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "NYNORSKNORWEGIAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 10
								},
								"@_name": "STANDARDPORTUGUESE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 11
								},
								"@_name": "BRAZILLIANPORTUGUESE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 12
								},
								"@_name": "SPANISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 13
								},
								"@_name": "SWEDISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 14
								},
								"@_name": "UKENGLISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 15
								},
								"@_name": "DUTCH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 16
								},
								"@_name": "DANISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 17
								},
								"@_name": "CATALAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 18
								},
								"@_name": "RUSSIAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 19
								},
								"@_name": "UKRANIAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 20
								},
								"@_name": "BULGARIAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 21
								},
								"@_name": "SERBIAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 22
								},
								"@_name": "CZECH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 23
								},
								"@_name": "POLISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 24
								},
								"@_name": "RUMANIAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 25
								},
								"@_name": "GREEK",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 26
								},
								"@_name": "TURKISH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 27
								},
								"@_name": "ICELANDIC",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 28
								},
								"@_name": "HUNGARIAN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 29
								},
								"@_name": "CHINESE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 30
								},
								"@_name": "JAPANESE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 39
								},
								"@_name": "ARABIC",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 41
								},
								"@_name": "FARSI",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 42
								},
								"@_name": "GERMAN2006REFORM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 43
								},
								"@_name": "DUTCH2005REFORM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 44
								},
								"@_name": "SWISSGERMAN2006REFORM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 49
								},
								"@_name": "HINDI",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 50
								},
								"@_name": "MARATHI",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 51
								},
								"@_name": "BENGALIINDIA",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 52
								},
								"@_name": "PUNJABI",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 53
								},
								"@_name": "GUJARATI",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 54
								},
								"@_name": "ORIYA",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 55
								},
								"@_name": "TAMIL",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 56
								},
								"@_name": "TELUGU",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 57
								},
								"@_name": "KANNADA",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 58
								},
								"@_name": "MALAYALAM",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "LanguageType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The alternate glyphs form of text.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DEFAULTFORM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TRADITIONAL",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "EXPERT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "JIS78FORM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "JIS83FORM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "HALFWIDTH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "THIRDWIDTH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "QUARTERWIDTH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "FULLWIDTH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "PROPORTIONALWIDTH",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 10
								},
								"@_name": "JIS90FORM",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 11
								},
								"@_name": "JIS04FORM",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AlternateGlyphsForm",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The style run alignment.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "bottom",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "icfBottom",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "ROMANBASELINE",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "center",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "icfTop",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "top",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "StyleRunAlignmentType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The Wari-Chu alignment type.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "Left",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Right",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "Center",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "WARICHUFULLJUSTIFYLASTLINELEFT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "WARICHUFULLJUSTIFYLASTLINERIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "WARICHUFULLJUSTIFYLASTLINECENTER",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "WARICHUFULLJUSTIFY",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "WARICHUAUTOJUSTIFY",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "WariChuJustificationType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The kashida type constants.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DEFAULT_KASHIDAS",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "KASHIDAS_ON",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "KASHIDAS_OFF",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "KashidasType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Direction override type constants.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DEFAULT_DIRECTION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "LEFT_TO_RIGHT_DIRECTION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RIGHT_TO_LEFT_DIRECTION",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DirOverrideType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Digit set type constants.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DEFAULT_DIGITS",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ARABIC_DIGITS",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "HINDI_DIGITS",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "FARSI_DIGITS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DigitSetType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Diacritic vertical position type constants.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DEFAULT_POSITION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "LOOSE_POSITION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "MEDIUM_POSITION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "TIGHT_POSITION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "OPENTYPE_POSITION",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DiacVPosType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The kashida width type constants.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "kashidaNone",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "kashidaSmall",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "kashidaMedium",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "kashidaLong",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "kashidaStylistic",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "KashidaWidthType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The composer type constants.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "latinCJKComposer",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "optycaComposer",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "adornment",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ComposerEngineType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The composer type constants.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "LEFT_TO_RIGHT_DIRECTION",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "RIGHT_TO_LEFT_DIRECTION",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ParagraphDirectionType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The Burasagari type.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "Standard",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "Forced",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "BurasagariTypeEnum",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The preferred Kinsoku order.",
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "PUSHIN",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PUSHOUTFIRST",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PUSHOUTONLY",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "KinsokuOrderEnum",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Crop box.",
					"elements": {
						"property": [
							{
								"shortdesc": "Crop to ArtBox. The art box defines the extent of the page's meaningful content (including potential white space) as intended by the page's creator.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "PDFARTBOX",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Crop to CropBox. The crop box is the region of the page to display and to print.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "PDFCROPBOX",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Crop to TrimBox. The trim box specifies the positioning of the page's content within the imposition.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PDFTRIMBOX",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Crop to BleedBox. The bleed box defines the region to which the contents of the page should be clipped when output in a production environment.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "PDFBLEEDBOX",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Crop to MediaBox. The media box is a natural size of the page. For example, the dimensions of A4 sheet of paper.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "PDFMEDIABOX",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Crop to Bounding Box. The bounding box is the rectangle that encloses all text, graphics, and images on the page.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "PDFBOUNDINGBOX",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PDFBoxType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The tracing method: abutting and overlapping.",
					"elements": {
						"property": [
							{
								"shortdesc": "Tracing abutting method.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "TRACINGMETHODABUTTING",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Tracing overlapping method.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TRACINGMETHODOVERLAPPING",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TracingMethodType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The tracing mode: color, grayscale, black and white.",
					"elements": {
						"property": [
							{
								"shortdesc": "Color tracing mode.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "TRACINGMODECOLOR",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Grayscale tracing mode.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TRACINGMODEGRAY",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Black and white tracing mode.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TRACINGMODEBLACKANDWHITE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TracingModeType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The input color type Full Color or Limited colors.",
					"elements": {
						"property": [
							{
								"shortdesc": "Use Limited colors for Tracing.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "TRACINGLIMITEDCOLOR",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Use Full colors for Tracing.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TRACINGFULLCOLOR",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TracingColorType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Controls the type of vector view.",
					"elements": {
						"property": [
							{
								"shortdesc": "View artwork.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "TRACINGVIEWVECTORTRACINGRESULT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "View paths and transparent fills.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "TRACINGVIEWVECTOROUTLINESWITHTRACING",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "View just the paths.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TRACINGVIEWVECTOROUTLINES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "View Outlines with Transparent Image.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "TRACINGVIEWVECTORWITHTRANSPARENTIMAGE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "View Source Image.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "TRACINGVIEWIMAGE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ViewType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Controls the color model for the rasterization.",
					"elements": {
						"property": [
							{
								"shortdesc": "Rasterize in the default document color space.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "DEFAULTCOLORMODEL",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Rasterize as grayscale image.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "GRAYSCALE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Rasterize as 1-bit bitmap.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "BITMAP",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "RasterizationColorModel",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Controls the type of antialiasing method used in the rasterization.",
					"elements": {
						"property": [
							{
								"shortdesc": "No anti-aliasing allowed.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "None",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Optimize for the art object.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ARTOPTIMIZED",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Optimize for the type object.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "TYPEOPTIMIZED",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "AntiAliasingMethod",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Denotes the purpose of color conversion using ConvertSmapleColor method.",
					"elements": {
						"property": [
							{
								"shortdesc": "Do standard conversion, without black preservation.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "defaultpurpose",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Conversion options appropriate to creating an image for screen display.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "previewpurpose",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Conversion options appropriate to creating an image for print or export.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "exportpurpose",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Dummy option.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "dummypurpose",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "ColorConvertPurpose",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The FXG file format version.",
					"elements": {
						"property": [
							{
								"shortdesc": "FXG version 1.0.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "VERSION1PT0",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "FXG version 2.0.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "VERSION2PT0",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "FXGVersion",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Filters preserve policy used by FXG file format.",
					"elements": {
						"property": [
							{
								"shortdesc": "Preserve the appearance of filters by expanding it.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "EXPANDFILTERS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserve the appearance of filters by rasterizing it.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RASTERIZEFILTERS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserve the editability of filters.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "KEEPFILTERSEDITABLE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "FiltersPreservePolicy",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Text preserve policy used by FXG file format.",
					"elements": {
						"property": [
							{
								"shortdesc": "Preserve the appearance of text by outlining it.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "OUTLINETEXT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserve the appearance of text by rasterizing it.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RASTERIZETEXT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Preserve the editability of text.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "KEEPTEXTEDITABLE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatically convert text.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "AUTOMATICALLYCONVERTTEXT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "TextPreservePolicy",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Gradients preserve policy used by FXG file format.",
					"elements": {
						"property": [
							{
								"shortdesc": "Preserve the editability of gradients.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "KEEPGRADIENTSEDITABLE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Automatically Convert Gradients.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "AUTOMATICALLYCONVERTGRADIENTS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "GradientsPreservePolicy",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Blends Expand policy used by FXG file format.",
					"elements": {
						"property": [
							{
								"shortdesc": "Automatically Convert Blends.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "AUTOMATICALLYCONVERTBLENDS",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Expand Blends by Rasterizing.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RASTERIZEBLENDS",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "BlendsExpandPolicy",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Coordinate system used by Illustrator.",
					"elements": {
						"property": [
							{
								"shortdesc": "Document coordinate system.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "DOCUMENTCOORDINATESYSTEM",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Artboard coordinate system.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "ARTBOARDCOORDINATESYSTEM",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "CoordinateSystem",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "The symbol registration point.",
					"elements": {
						"property": [
							{
								"shortdesc": "Top left point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "SYMBOLTOPLEFTPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Top middle point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "SYMBOLTOPMIDDLEPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Top right point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "SYMBOLTOPRIGHTPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Middle left point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "SYMBOLMIDDLELEFTPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Center point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "SYMBOLCENTERPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Middle right point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "SYMBOLMIDDLERIGHTPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Bottom left point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "SYMBOLBOTTOMLEFTPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Bottom middle point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "SYMBOLBOTTOMMIDDLEPOINT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Bottom right point of symbol bounding box.",
								"datatype": {
									"type": "int",
									"value": 9
								},
								"@_name": "SYMBOLBOTTOMRIGHTPOINT",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SymbolRegistrationPoint",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Perspective grid plane types.",
					"elements": {
						"property": [
							{
								"shortdesc": "Invalid Perspective Grid Plane Type.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "NOPLANE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Perspective Grid Left Plane Type.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "LEFTPLANE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Perspective Grid Right Plane Type.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RIGHTPLANE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Perspective Grid Floor Plane Type.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "FLOORPLANE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "PerspectiveGridPlaneType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Text Item First baseline types.",
					"elements": {
						"property": [
							{
								"shortdesc": "First Baseline Ascent Type.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "BASELINEASCENT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "First baseline Cap Height Type.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "BASELINECAPHEIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "First Baseline Leading Type.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "BASELINELEADING",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "First Baseline x Height Type.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "BASELINEXHEIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "First Baseline Em Box Height Type.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "BASELINEEMBOXHEIGHT",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "First Baseline Fixed Type.",
								"datatype": {
									"type": "int",
									"value": 5
								},
								"@_name": "BASELINEFIXED",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "First Baseline Legacy Type.",
								"datatype": {
									"type": "int",
									"value": 6
								},
								"@_name": "BASELINELEGACY",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "FirstBaselineType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Document layout style types.",
					"elements": {
						"property": [
							{
								"shortdesc": "Arranges document in cascaded style.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "CASCADE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arranges documents as horizontal tiles.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "HORIZONTALTILE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arranges documents as vertical tiles.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "VERTICALTILE",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Arranges all documents floating layout.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "FLOATALL",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Consolidates all documents.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "CONSOLIDATEALL",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentLayoutStyle",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "JPEG Compression Method type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Select Baseline (Standard) to use a format recognized by most web browsers.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "BASELINESTANDARD",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Select Baseline Optimized for optimized color and a slightly smaller file size. Not supported by all web browsers.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "BASELINEOPTIMIZED",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Select Progressive to display a series of increasingly detailed scans (you specify how many in ProgressiveScan) as the image downloads. Not supported by all web browsers.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "PROGRESSIVE",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "JPEGCompressionMethodType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Grid Repeat shift and flip type.",
					"elements": {
						"property": [
							{
								"shortdesc": "Create a normal grid of arts.",
								"datatype": {
									"type": "int",
									"value": 0
								},
								"@_name": "NOSF",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Create a grid after shifting alternate rows by half or flip the alternate rows about y axis.",
								"datatype": {
									"type": "int",
									"value": 1
								},
								"@_name": "HORIZONTALSF",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Create a grid after shifting alternate columns by half or flip the alternate rows about x axis.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "VERTICALSF",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Create a grid after shifting both alternate rows and columns by half or flip the alternate rows about both x and y axis.",
								"datatype": {
									"type": "int",
									"value": 3
								},
								"@_name": "HORIZONTALANDVERTICALSF",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "RepeatGridShiftFlipType",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Each flag represent which property of radial repeat gets updated.",
					"elements": {
						"property": [
							{
								"shortdesc": "Update the radius of radial repeat art.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "RADIUSOFART",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Update number of instances of radial repeat art.",
								"datatype": {
									"type": "int",
									"value": 32
								},
								"@_name": "NUMBEROFINSTANCES",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Update reverse overlap of radial repeat art.",
								"datatype": {
									"type": "int",
									"value": 64
								},
								"@_name": "REVERSEOVERLAP",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Update all the properties of radial repeat art.",
								"datatype": {
									"type": "int",
									"value": 127
								},
								"@_name": "RADIALALL",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "RadialRepeatUpdate",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Each flag represent which property of grid repeat gets updated.",
					"elements": {
						"property": [
							{
								"shortdesc": "Update spacing between rows of grid repeat art.",
								"datatype": {
									"type": "int",
									"value": 4
								},
								"@_name": "HORIZONTALSPACING",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Update spacing between columns of grid repeat art.",
								"datatype": {
									"type": "int",
									"value": 8
								},
								"@_name": "VERTICALSPACING",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Update all the properties of grid repeat art.",
								"datatype": {
									"type": "int",
									"value": 63
								},
								"@_name": "GRIDALL",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "GridRepeatUpdate",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "Each flag represent which property of symmetry repeat gets updated.",
					"elements": {
						"property": [
							{
								"shortdesc": "Update axis rotation angle wrt x-axis.",
								"datatype": {
									"type": "int",
									"value": 2
								},
								"@_name": "AXISROTATION",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Update all the properties of symmetry repeat art.",
								"datatype": {
									"type": "int",
									"value": 7
								},
								"@_name": "SYMMETRYALL",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "class"
					},
					"@_name": "SymmetryRepeatUpdate",
					"@_enumeration": "true"
				},
				{
					"shortdesc": "A collection of assets.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Creates an asset from the selected arts.",
									"datatype": {
										"type": "Asset"
									},
									"@_name": "addFromSelection"
								},
								{
									"shortdesc": "Creates an asset from the given art(s)",
									"parameters": {
										"parameter": {
											"shortdesc": "The page item(s) to apply to.",
											"datatype": {
												"type": "any"
											},
											"@_name": "sourceArt"
										}
									},
									"datatype": {
										"type": "Asset"
									},
									"@_name": "add"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Asset",
											"@_href": "#/Asset"
										}
									},
									"@_name": "getByName"
								},
								{
									"shortdesc": "Deletes the asset with specified id.",
									"parameters": {
										"parameter": {
											"shortdesc": "UID of the asset to be deleted.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "assetID"
										}
									},
									"@_name": "remove"
								},
								{
									"shortdesc": "Gets the first asset with specified name.",
									"parameters": {
										"parameter": {
											"shortdesc": "Name of the asset.",
											"datatype": {
												"type": "string"
											},
											"@_name": "assetName"
										}
									},
									"datatype": {
										"type": {
											"#text": "Asset",
											"@_href": "#/Asset"
										}
									},
									"@_name": "getByName"
								},
								{
									"shortdesc": "Gets the asset with the specified AssetID.",
									"parameters": {
										"parameter": {
											"shortdesc": "The UID of the asset.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "assetID"
										}
									},
									"datatype": {
										"type": {
											"#text": "Asset",
											"@_href": "#/Asset"
										}
									},
									"@_name": "getByID"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Assets",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of artboards.",
					"elements": [
						{
							"method": {
								"shortdesc": "Add artboard object.",
								"parameters": {
									"parameter": {
										"shortdesc": "Size and position of artboard.",
										"datatype": {
											"type": {
												"#text": "Rect",
												"@_href": "#/Rect"
											}
										},
										"@_name": "artboardRect"
									}
								},
								"datatype": {
									"type": "Artboard"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Artboard",
											"@_href": "#/Artboard"
										}
									},
									"@_name": "getByName"
								},
								{
									"shortdesc": "Delete artboard object.",
									"parameters": {
										"parameter": {
											"shortdesc": "Index of the crop area to be deleted.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "index"
										}
									},
									"@_name": "remove"
								},
								{
									"shortdesc": "Get the first Artboard with specified name.",
									"parameters": {
										"parameter": {
											"shortdesc": "The name of the artboard.",
											"datatype": {
												"type": "string"
											},
											"@_name": "artboardName"
										}
									},
									"datatype": {
										"type": {
											"#text": "Artboard",
											"@_href": "#/Artboard"
										}
									},
									"@_name": "getByName"
								},
								{
									"shortdesc": "Insert an Artboard at specified location.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "Size and position of artboard.",
												"datatype": {
													"type": {
														"#text": "Rect",
														"@_href": "#/Rect"
													}
												},
												"@_name": "artboardRect"
											},
											{
												"shortdesc": "Index position where artboard should be inserted.",
												"datatype": {
													"type": {
														"#text": "Int32",
														"@_href": "#/Int32"
													}
												},
												"@_name": "index"
											}
										]
									},
									"@_name": "insert"
								},
								{
									"shortdesc": "Retrieves the index position of the active artboard in the document's list.",
									"datatype": {
										"type": {
											"#text": "Int32",
											"@_href": "#/Int32"
										}
									},
									"@_name": "getActiveArtboardIndex"
								},
								{
									"shortdesc": "Makes a specific artboard active, and makes it current in the iteration order.",
									"parameters": {
										"parameter": {
											"shortdesc": "The 0-based index position of the artboard in the document list.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "index"
										}
									},
									"@_name": "setActiveArtboardIndex"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Artboards",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of documents.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Create a new document from a preset.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The name of a startup document preset.",
												"datatype": {
													"type": "string"
												},
												"@_name": "startupPreset"
											},
											{
												"shortdesc": "Custom settings to apply to the preset.",
												"datatype": {
													"type": {
														"#text": "DocumentPreset",
														"@_href": "#/DocumentPreset"
													}
												},
												"@_name": "presetSettings",
												"@_optional": "true"
											},
											{
												"shortdesc": "If false, do not show Options dialog.",
												"datatype": {
													"type": "bool"
												},
												"@_name": "showOptionsDialog",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "Document"
									},
									"@_name": "addDocument"
								},
								{
									"shortdesc": "Create a document from the preset with option to throw dialog to customize present settings.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The name of startup document preset.",
												"datatype": {
													"type": "string"
												},
												"@_name": "startupPreset"
											},
											{
												"shortdesc": "Argument controls if options Dialog is shown or not.",
												"datatype": {
													"type": "bool"
												},
												"@_name": "showOptionsDialog",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "Document"
									},
									"@_name": "addDocumentWithDialogOption"
								},
								{
									"shortdesc": "A document.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The color model used for the document.",
												"datatype": {
													"type": {
														"#text": "DocumentColorSpace",
														"@_href": "#/DocumentColorSpace"
													},
													"value": "DocumentColorSpace.CMYK"
												},
												"@_name": "documentColorSpace",
												"@_optional": "true"
											},
											{
												"shortdesc": "Width of the artboard.",
												"datatype": {
													"type": "number",
													"value": 612
												},
												"@_name": "width",
												"@_optional": "true"
											},
											{
												"shortdesc": "Height of the artboard.",
												"datatype": {
													"type": "number",
													"value": 792
												},
												"@_name": "height",
												"@_optional": "true"
											},
											{
												"shortdesc": "Number of artboards for new document.Range (1:100).",
												"datatype": {
													"type": {
														"#text": "Int32",
														"@_href": "#/Int32"
													},
													"value": 1
												},
												"@_name": "numArtboards",
												"@_optional": "true"
											},
											{
												"shortdesc": "Layout of artboards for new document.",
												"datatype": {
													"type": {
														"#text": "DocumentArtboardLayout",
														"@_href": "#/DocumentArtboardLayout"
													},
													"value": "DocumentArtboardLayout.GridByRow"
												},
												"@_name": "artboardLayout",
												"@_optional": "true"
											},
											{
												"shortdesc": "Spacing between artboards for new document.",
												"datatype": {
													"type": "number",
													"value": 20
												},
												"@_name": "artboardSpacing",
												"@_optional": "true"
											},
											{
												"shortdesc": "Number of rows (for rows layout) OR column(for column layouts)of artboards.Range is 1 to (docNumArtboards - 1) or 1 for single row or column layouts.",
												"datatype": {
													"type": {
														"#text": "Int32",
														"@_href": "#/Int32"
													},
													"value": 1
												},
												"@_name": "artboardRowsOrCols",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "Document"
									},
									"@_name": "add"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Document",
											"@_href": "#/Document"
										}
									},
									"@_name": "getByName"
								},
								{
									"shortdesc": "Arranges the documents in the specified style.",
									"parameters": {
										"parameter": {
											"shortdesc": "The document layout style.",
											"datatype": {
												"type": {
													"#text": "DocumentLayoutStyle",
													"@_href": "#/DocumentLayoutStyle"
												}
											},
											"@_name": "layoutStyle"
										}
									},
									"datatype": {
										"type": "bool"
									},
									"@_name": "arrange"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Documents",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of layers.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a layer.",
								"datatype": {
									"type": "Layer"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Layer",
											"@_href": "#/Layer"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "gra",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of group items.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Create a group item.",
									"datatype": {
										"type": "GroupItem"
									},
									"@_name": "add"
								},
								{
									"shortdesc": "Create a group item from a vector graphics file.",
									"parameters": {
										"parameter": {
											"shortdesc": "The vector graphics file to be embedded.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "imageFile"
										}
									},
									"datatype": {
										"type": "GroupItem"
									},
									"@_name": "createFromFile"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "GroupItem",
											"@_href": "#/GroupItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "GroupItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of page items.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": {
							"shortdesc": "Get the first element in the collection with the provided name.",
							"parameters": {
								"parameter": {
									"datatype": {
										"type": "string"
									},
									"@_name": "name"
								}
							},
							"datatype": {
								"type": {
									"#text": "PageItem",
									"@_href": "#/PageItem"
								}
							},
							"@_name": "getByName"
						},
						"@_type": "instance"
					},
					"@_name": "PageItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of path items.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Create a path.",
									"datatype": {
										"type": "PathItem"
									},
									"@_name": "add"
								},
								{
									"shortdesc": "Create an elliptical path item.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The ellipse's bounds.",
												"datatype": {
													"type": "number",
													"value": 100
												},
												"@_name": "top",
												"@_optional": "true"
											},
											{
												"shortdesc": "The ellipse's bounds.",
												"datatype": {
													"type": "number",
													"value": 100
												},
												"@_name": "left",
												"@_optional": "true"
											},
											{
												"shortdesc": "The ellipse's bounds.",
												"datatype": {
													"type": "number",
													"value": 50
												},
												"@_name": "width",
												"@_optional": "true"
											},
											{
												"shortdesc": "The height of the ellipse.",
												"datatype": {
													"type": "number",
													"value": 100
												},
												"@_name": "height",
												"@_optional": "true"
											},
											{
												"shortdesc": "Is the ellipse path reversed?",
												"datatype": {
													"type": "bool",
													"value": false
												},
												"@_name": "reversed",
												"@_optional": "true"
											},
											{
												"shortdesc": "Is the ellipse path inscribed?",
												"datatype": {
													"type": "bool",
													"value": true
												},
												"@_name": "inscribed",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "PathItem"
									},
									"@_name": "ellipse"
								},
								{
									"shortdesc": "Used to create a rectangular path item. Not for path item access.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The top coordinate of the rectangle's bounds.",
												"datatype": {
													"type": "number"
												},
												"@_name": "top"
											},
											{
												"shortdesc": "The left coordinate of the rectangle's bounds.",
												"datatype": {
													"type": "number"
												},
												"@_name": "left"
											},
											{
												"shortdesc": "The width of the rectangle.",
												"datatype": {
													"type": "number"
												},
												"@_name": "width"
											},
											{
												"shortdesc": "The height of the rectangle.",
												"datatype": {
													"type": "number"
												},
												"@_name": "height"
											},
											{
												"shortdesc": "Is the rectangle path reversed?",
												"datatype": {
													"type": "bool",
													"value": false
												},
												"@_name": "reversed",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "PathItem"
									},
									"@_name": "rectangle"
								},
								{
									"shortdesc": "Used to create a rounded-corner rectangular path item. Not for path item access.",
									"parameters": {
										"parameter": [
											{
												"datatype": {
													"type": "number"
												},
												"@_name": "top"
											},
											{
												"datatype": {
													"type": "number"
												},
												"@_name": "left"
											},
											{
												"datatype": {
													"type": "number"
												},
												"@_name": "width"
											},
											{
												"datatype": {
													"type": "number"
												},
												"@_name": "height"
											},
											{
												"shortdesc": "Horizontal corner radius.",
												"datatype": {
													"type": "number",
													"value": 15
												},
												"@_name": "horizontalRadius",
												"@_optional": "true"
											},
											{
												"shortdesc": "Vertical corner radius.",
												"datatype": {
													"type": "number",
													"value": 20
												},
												"@_name": "verticalRadius",
												"@_optional": "true"
											},
											{
												"shortdesc": "Is the rectangle path reversed?",
												"datatype": {
													"type": "bool",
													"value": false
												},
												"@_name": "reversed",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "PathItem"
									},
									"@_name": "roundedRectangle"
								},
								{
									"shortdesc": "Used to create a regular polygon path item. Not for path item access.",
									"parameters": {
										"parameter": [
											{
												"datatype": {
													"type": "number",
													"value": 200
												},
												"@_name": "centerX",
												"@_optional": "true"
											},
											{
												"datatype": {
													"type": "number",
													"value": 300
												},
												"@_name": "centerY",
												"@_optional": "true"
											},
											{
												"shortdesc": "The radius of the polygon points.",
												"datatype": {
													"type": "number",
													"value": 50
												},
												"@_name": "radius",
												"@_optional": "true"
											},
											{
												"shortdesc": "The number of sides on the polygon.",
												"datatype": {
													"type": {
														"#text": "Int32",
														"@_href": "#/Int32"
													},
													"value": 8
												},
												"@_name": "sides",
												"@_optional": "true"
											},
											{
												"shortdesc": "Is the polygon path reversed?",
												"datatype": {
													"type": "bool",
													"value": false
												},
												"@_name": "reversed",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "PathItem"
									},
									"@_name": "polygon"
								},
								{
									"shortdesc": "Used to create a star-shaped path item. Not for path item access.",
									"parameters": {
										"parameter": [
											{
												"datatype": {
													"type": "number",
													"value": 200
												},
												"@_name": "centerX",
												"@_optional": "true"
											},
											{
												"datatype": {
													"type": "number",
													"value": 300
												},
												"@_name": "centerY",
												"@_optional": "true"
											},
											{
												"shortdesc": "The outside radius of the star points.",
												"datatype": {
													"type": "number",
													"value": 50
												},
												"@_name": "radius",
												"@_optional": "true"
											},
											{
												"shortdesc": "The inside radius of the star points.",
												"datatype": {
													"type": "number",
													"value": 20
												},
												"@_name": "innerRadius",
												"@_optional": "true"
											},
											{
												"shortdesc": "The number of points on the star.",
												"datatype": {
													"type": {
														"#text": "Int32",
														"@_href": "#/Int32"
													},
													"value": 5
												},
												"@_name": "points",
												"@_optional": "true"
											},
											{
												"shortdesc": "Is the star path reversed?",
												"datatype": {
													"type": "bool",
													"value": false
												},
												"@_name": "reversed",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "PathItem"
									},
									"@_name": "star"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "PathItem",
											"@_href": "#/PathItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "PathItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of path points.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a path point.",
								"datatype": {
									"type": "PathPoint"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "PathPoint",
											"@_href": "#/PathPoint"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "PathPoints",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of compound path items.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a compound path item.",
								"datatype": {
									"type": "CompoundPathItem"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "CompoundPathItem",
											"@_href": "#/CompoundPathItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "CompoundPathItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of stories.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": {
							"shortdesc": "Get the first element in the collection with the provided name.",
							"parameters": {
								"parameter": {
									"datatype": {
										"type": "string"
									},
									"@_name": "name"
								}
							},
							"datatype": {
								"type": {
									"#text": "Story",
									"@_href": "#/Story"
								}
							},
							"@_name": "getByName"
						},
						"@_type": "instance"
					},
					"@_name": "Stories",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of text frame items.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Create a point text frame item.",
									"datatype": {
										"type": "TextFrameItem"
									},
									"@_name": "add"
								},
								{
									"shortdesc": "Create a point text frame item.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The position (coordinates) of the anchor point.",
												"datatype": {
													"type": {
														"#text": "Point",
														"@_href": "#/Point"
													}
												},
												"@_name": "anchor"
											},
											{
												"shortdesc": "The orientation of the text.",
												"datatype": {
													"type": {
														"#text": "TextOrientation",
														"@_href": "#/TextOrientation"
													},
													"value": "TextOrientation.HORIZONTAL"
												},
												"@_name": "orientation",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "TextFrameItem"
									},
									"@_name": "pointText"
								},
								{
									"shortdesc": "Create an area text frame item.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The path item associated with the text frame.",
												"datatype": {
													"type": {
														"#text": "PathItem",
														"@_href": "#/PathItem"
													}
												},
												"@_name": "textPath"
											},
											{
												"shortdesc": "The orientation of the text.",
												"datatype": {
													"type": {
														"#text": "TextOrientation",
														"@_href": "#/TextOrientation"
													},
													"value": "TextOrientation.HORIZONTAL"
												},
												"@_name": "orientation",
												"@_optional": "true"
											},
											{
												"shortdesc": "The base text frame if it has one.",
												"datatype": {
													"type": {
														"#text": "TextFrameItem",
														"@_href": "#/TextFrameItem"
													}
												},
												"@_name": "baseFrame",
												"@_optional": "true"
											},
											{
												"shortdesc": "Whether to postfix/prefix the new text frame to the specified base text frame.",
												"datatype": {
													"type": "bool",
													"value": true
												},
												"@_name": "postFix",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "TextFrameItem"
									},
									"@_name": "areaText"
								},
								{
									"shortdesc": "Create an on-path text frame item.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The path item associated with the text frame.",
												"datatype": {
													"type": {
														"#text": "PathItem",
														"@_href": "#/PathItem"
													}
												},
												"@_name": "textPath"
											},
											{
												"shortdesc": "The start position of text along a path, as a value relative to the path's segments (path text only)",
												"datatype": {
													"type": "number",
													"value": 0
												},
												"@_name": "startTValue",
												"@_optional": "true"
											},
											{
												"shortdesc": "The end position of text along a path, as a value relative to the path's segments (path text only)",
												"datatype": {
													"type": "number",
													"value": 0
												},
												"@_name": "endTValue",
												"@_optional": "true"
											},
											{
												"shortdesc": "The orientation of the text.",
												"datatype": {
													"type": {
														"#text": "TextOrientation",
														"@_href": "#/TextOrientation"
													},
													"value": "TextOrientation.HORIZONTAL"
												},
												"@_name": "orientation",
												"@_optional": "true"
											},
											{
												"shortdesc": "The base text frame if it has one.",
												"datatype": {
													"type": {
														"#text": "TextFrameItem",
														"@_href": "#/TextFrameItem"
													}
												},
												"@_name": "baseFrame",
												"@_optional": "true"
											},
											{
												"shortdesc": "Whether to postfix/prefix the new text frame to the specified base text frame.",
												"datatype": {
													"type": "bool",
													"value": true
												},
												"@_name": "postFix",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "TextFrameItem"
									},
									"@_name": "pathText"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "TextFrameItem",
											"@_href": "#/TextFrameItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "TextFrameItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of legacy text items.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Get the first element in the collection with the provided name.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "LegacyTextItem",
										"@_href": "#/LegacyTextItem"
									}
								},
								"@_name": "getByName"
							},
							{
								"shortdesc": "Create text frames from all legacy text items. The original legacy text items will be deleted.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "convertToNative"
							}
						],
						"@_type": "instance"
					},
					"@_name": "LegacyTextItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of text range items.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": {
							"shortdesc": "Get the first element in the collection with the provided name.",
							"parameters": {
								"parameter": {
									"datatype": {
										"type": "string"
									},
									"@_name": "name"
								}
							},
							"datatype": {
								"type": {
									"#text": "TextRange",
									"@_href": "#/TextRange"
								}
							},
							"@_name": "getByName"
						},
						"@_type": "instance"
					},
					"@_name": "TextRanges",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of insertion points.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": {
							"shortdesc": "Get the first element in the collection with the provided name.",
							"parameters": {
								"parameter": {
									"datatype": {
										"type": "string"
									},
									"@_name": "name"
								}
							},
							"datatype": {
								"type": {
									"#text": "InsertionPoint",
									"@_href": "#/InsertionPoint"
								}
							},
							"@_name": "getByName"
						},
						"@_type": "instance"
					},
					"@_name": "InsertionPoints",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of characters.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Create a character.",
									"parameters": {
										"parameter": {
											"shortdesc": "The text string.",
											"datatype": {
												"type": "string"
											},
											"@_name": "contents"
										}
									},
									"datatype": {
										"type": "TextRange"
									},
									"@_name": "add"
								},
								{
									"parameters": {
										"parameter": {
											"shortdesc": "The text string.",
											"datatype": {
												"type": "string"
											},
											"@_name": "contents"
										}
									},
									"datatype": {
										"type": "TextRange"
									},
									"@_name": "addBefore"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "TextRange",
											"@_href": "#/TextRange"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Characters",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of words.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Create a word.",
									"parameters": {
										"parameter": {
											"shortdesc": "The text string.",
											"datatype": {
												"type": "string"
											},
											"@_name": "contents"
										}
									},
									"datatype": {
										"type": "TextRange"
									},
									"@_name": "add"
								},
								{
									"parameters": {
										"parameter": {
											"shortdesc": "The text string.",
											"datatype": {
												"type": "string"
											},
											"@_name": "contents"
										}
									},
									"datatype": {
										"type": "TextRange"
									},
									"@_name": "addBefore"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "TextRange",
											"@_href": "#/TextRange"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Words",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of lines.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": {
							"shortdesc": "Get the first element in the collection with the provided name.",
							"parameters": {
								"parameter": {
									"datatype": {
										"type": "string"
									},
									"@_name": "name"
								}
							},
							"datatype": {
								"type": {
									"#text": "TextRange",
									"@_href": "#/TextRange"
								}
							},
							"@_name": "getByName"
						},
						"@_type": "instance"
					},
					"@_name": "Lines",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of Paragraphs.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Create a text art item.",
									"parameters": {
										"parameter": {
											"shortdesc": "The text string.",
											"datatype": {
												"type": "string"
											},
											"@_name": "contents"
										}
									},
									"datatype": {
										"type": "TextRange"
									},
									"@_name": "add"
								},
								{
									"parameters": {
										"parameter": {
											"shortdesc": "The text string.",
											"datatype": {
												"type": "string"
											},
											"@_name": "contents"
										}
									},
									"datatype": {
										"type": "TextRange"
									},
									"@_name": "addBefore"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "TextRange",
											"@_href": "#/TextRange"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Paragraphs",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of character styles.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a named character style.",
								"parameters": {
									"parameter": {
										"shortdesc": "The character style name.",
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": "CharacterStyle"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "CharacterStyle",
											"@_href": "#/CharacterStyle"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "CharacterStyles",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of paragraph styles.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a named paragraph style.",
								"parameters": {
									"parameter": {
										"shortdesc": "The paragraph style name.",
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": "ParagraphStyle"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "ParagraphStyle",
											"@_href": "#/ParagraphStyle"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "ParagraphStyles",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of custom spot colors.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a spot color.",
								"datatype": {
									"type": "Spot"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Spot",
											"@_href": "#/Spot"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Spots",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of swatches.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a swatch.",
								"datatype": {
									"type": "Swatch"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Swatch",
											"@_href": "#/Swatch"
										}
									},
									"@_name": "getByName"
								},
								{
									"shortdesc": "Get selected swatches in the document.",
									"parameters": {
										"parameter": {
											"shortdesc": "The selected element should include swatches in group.",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "includeSwatchInGroup",
											"@_optional": "true"
										}
									},
									"datatype": {
										"type": {
											"#text": "Swatch",
											"@_href": "#/Swatch"
										},
										"array": ""
									},
									"@_name": "getSelected"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Swatches",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of Swatch groups.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a Swatch group.",
								"datatype": {
									"type": "SwatchGroup"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "SwatchGroup",
											"@_href": "#/SwatchGroup"
										}
									},
									"@_name": "getByName"
								},
								{
									"shortdesc": "Get selected swatchGroups in the document.",
									"datatype": {
										"type": {
											"#text": "SwatchGroup",
											"@_href": "#/SwatchGroup"
										},
										"array": ""
									},
									"@_name": "getSelected"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "SwatchGroups",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of gradients.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a gradient.",
								"datatype": {
									"type": "Gradient"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Gradient",
											"@_href": "#/Gradient"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Gradients",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of gradient stops.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a gradient stop.",
								"datatype": {
									"type": "GradientStop"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "GradientStop",
											"@_href": "#/GradientStop"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "GradientStops",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of patterns.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a pattern.",
								"datatype": {
									"type": "Pattern"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Pattern",
											"@_href": "#/Pattern"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Patterns",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of symbols.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a symbol.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The art item from which to make this symbol.",
											"datatype": {
												"type": {
													"#text": "PageItem",
													"@_href": "#/PageItem"
												}
											},
											"@_name": "sourceArt"
										},
										{
											"shortdesc": "The symbol registration point.",
											"datatype": {
												"type": {
													"#text": "SymbolRegistrationPoint",
													"@_href": "#/SymbolRegistrationPoint"
												},
												"value": "SymbolRegistrationPoint.SYMBOLCENTERPOINT"
											},
											"@_name": "registrationPoint",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": "Symbol"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Symbol",
											"@_href": "#/Symbol"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Symbols",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of symbol items.",
					"elements": [
						{
							"method": {
								"shortdesc": "An instance of a symbol item.",
								"parameters": {
									"parameter": {
										"shortdesc": "The symbol to make an instance of.",
										"datatype": {
											"type": {
												"#text": "Symbol",
												"@_href": "#/Symbol"
											}
										},
										"@_name": "symbol"
									}
								},
								"datatype": {
									"type": "SymbolItem"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "SymbolItem",
											"@_href": "#/SymbolItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "SymbolItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of brushes.",
					"elements": [
						{
							"method": [
								{
									"shortdesc": "Create a brush.",
									"parameters": {
										"parameter": [
											{
												"shortdesc": "The brush definition from which the brush would be created.",
												"datatype": {
													"type": {
														"#text": "File",
														"@_href": "#/File"
													}
												},
												"@_name": "brushDefinition"
											},
											{
												"shortdesc": "The name of the brush.",
												"datatype": {
													"type": "string"
												},
												"@_name": "brushName",
												"@_optional": "true"
											}
										]
									},
									"datatype": {
										"type": "Brush"
									},
									"@_name": "add"
								},
								{
									"shortdesc": "Create a brush, select the brush tool and load the created brush in the brush tool.",
									"parameters": {
										"parameter": {
											"shortdesc": "The brush definition from which the brush would be created.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "brushDefinition"
										}
									},
									"datatype": {
										"type": "Brush"
									},
									"@_name": "addAndLoad"
								}
							],
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": {
								"shortdesc": "Get the first element in the collection with the provided name.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "Brush",
										"@_href": "#/Brush"
									}
								},
								"@_name": "getByName"
							},
							"@_type": "instance"
						}
					],
					"@_name": "Brushes",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of art styles.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Get the first element in the collection with the provided name.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "ArtStyle",
										"@_href": "#/ArtStyle"
									}
								},
								"@_name": "getByName"
							}
						],
						"@_type": "instance"
					},
					"@_name": "ArtStyles",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of fonts.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Get the first element in the collection with the provided name.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "TextFont",
										"@_href": "#/TextFont"
									}
								},
								"@_name": "getByName"
							},
							{
								"shortdesc": "Get the Text Font with the font name , if not avaiable it will create the substitute font.",
								"parameters": {
									"parameter": {
										"shortdesc": "The name of the font to find or create substitute.",
										"datatype": {
											"type": "string"
										},
										"@_name": "fontName"
									}
								},
								"datatype": {
									"type": {
										"#text": "TextFont",
										"@_href": "#/TextFont"
									}
								},
								"@_name": "getFontByName"
							},
							{
								"shortdesc": "Check if any original font is present with the given name.",
								"parameters": {
									"parameter": {
										"shortdesc": "The name of the font to find.",
										"datatype": {
											"type": "string"
										},
										"@_name": "fontName"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "isFontAvailable"
							},
							{
								"shortdesc": "Returns the current font name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "getCurrentFont"
							}
						],
						"@_type": "instance"
					},
					"@_name": "TextFonts",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The collection of tags associated with a page item.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a tag.",
								"datatype": {
									"type": "Tag"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Tag",
											"@_href": "#/Tag"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Tags",
					"@_dynamic": "true"
				},
				{
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Get the first element in the collection with the provided name.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "RasterItem",
										"@_href": "#/RasterItem"
									}
								},
								"@_name": "getByName"
							}
						],
						"@_type": "instance"
					},
					"@_name": "RasterItems",
					"@_dynamic": "true"
				},
				{
					"elements": [
						{
							"method": {
								"shortdesc": "Create a placed item.",
								"datatype": {
									"type": "PlacedItem"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "PlacedItem",
											"@_href": "#/PlacedItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "PlacedItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "EmbeddedItems Collection.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create an embedded item.",
								"datatype": {
									"type": "EmbedItem"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "EmbedItem",
											"@_href": "#/EmbedItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "EmbeddedItems",
					"@_dynamic": "true"
				},
				{
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Get the first element in the collection with the provided name.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "MeshItem",
										"@_href": "#/MeshItem"
									}
								},
								"@_name": "getByName"
							}
						],
						"@_type": "instance"
					},
					"@_name": "MeshItems",
					"@_dynamic": "true"
				},
				{
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Get the first element in the collection with the provided name.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "GraphItem",
										"@_href": "#/GraphItem"
									}
								},
								"@_name": "getByName"
							}
						],
						"@_type": "instance"
					},
					"@_name": "GraphItems",
					"@_dynamic": "true"
				},
				{
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Get the first element in the collection with the provided name.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "PluginItem",
										"@_href": "#/PluginItem"
									}
								},
								"@_name": "getByName"
							}
						],
						"@_type": "instance"
					},
					"@_name": "PluginItems",
					"@_dynamic": "true"
				},
				{
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": {
							"shortdesc": "Get the first element in the collection with the provided name.",
							"parameters": {
								"parameter": {
									"datatype": {
										"type": "string"
									},
									"@_name": "name"
								}
							},
							"datatype": {
								"type": {
									"#text": "NonNativeItem",
									"@_href": "#/NonNativeItem"
								}
							},
							"@_name": "getByName"
						},
						"@_type": "instance"
					},
					"@_name": "NonNativeItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of views.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Number of elements in the collection.",
								"datatype": {
									"type": "int"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"method": {
							"shortdesc": "Get the first element in the collection with the provided name.",
							"parameters": {
								"parameter": {
									"datatype": {
										"type": "string"
									},
									"@_name": "name"
								}
							},
							"datatype": {
								"type": {
									"#text": "View",
									"@_href": "#/View"
								}
							},
							"@_name": "getByName"
						},
						"@_type": "instance"
					},
					"@_name": "Views",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of variables.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a variable.",
								"datatype": {
									"type": "Variable"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "Variable",
											"@_href": "#/Variable"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "Variables",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of datasets.",
					"elements": [
						{
							"method": {
								"shortdesc": "Create a data set.",
								"datatype": {
									"type": "DataSet"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "DataSet",
											"@_href": "#/DataSet"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "DataSets",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of symmetry repeat items.",
					"elements": [
						{
							"method": {
								"shortdesc": "Creates a symmetry repeat art.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The page item(s) to apply to.",
											"datatype": {
												"type": "any"
											},
											"@_name": "sourceArt"
										},
										{
											"shortdesc": "The symmetry repeat configuration.",
											"datatype": {
												"type": {
													"#text": "SymmetryRepeatConfig",
													"@_href": "#/SymmetryRepeatConfig"
												}
											},
											"@_name": "config"
										}
									]
								},
								"datatype": {
									"type": "SymmetryRepeatItem"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "SymmetryRepeatItem",
											"@_href": "#/SymmetryRepeatItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "SymmetryRepeatItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of radial repeat items.",
					"elements": [
						{
							"method": {
								"shortdesc": "Creates a radial repeat art.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The page item(s) to apply to.",
											"datatype": {
												"type": "any"
											},
											"@_name": "sourceArt"
										},
										{
											"shortdesc": "The radial repeat configuration.",
											"datatype": {
												"type": {
													"#text": "RadialRepeatConfig",
													"@_href": "#/RadialRepeatConfig"
												}
											},
											"@_name": "config"
										}
									]
								},
								"datatype": {
									"type": "RadialRepeatItem"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "RadialRepeatItem",
											"@_href": "#/RadialRepeatItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "RadialRepeatItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A collection of grid repeat items.",
					"elements": [
						{
							"method": {
								"shortdesc": "Creates a grid repeat art.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The page item(s) to apply to.",
											"datatype": {
												"type": "any"
											},
											"@_name": "sourceArt"
										},
										{
											"shortdesc": "The grid repeat configuration.",
											"datatype": {
												"type": {
													"#text": "GridRepeatConfig",
													"@_href": "#/GridRepeatConfig"
												}
											},
											"@_name": "config"
										}
									]
								},
								"datatype": {
									"type": "GridRepeatItem"
								},
								"@_name": "add"
							},
							"@_type": "class"
						},
						{
							"property": [
								{
									"shortdesc": "The object's container.",
									"datatype": {
										"type": "Object"
									},
									"@_name": "parent",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "The class name of the object.",
									"datatype": {
										"type": "string"
									},
									"@_name": "typename",
									"@_rwaccess": "readonly"
								},
								{
									"shortdesc": "Number of elements in the collection.",
									"datatype": {
										"type": "int"
									},
									"@_name": "length",
									"@_rwaccess": "readonly"
								}
							],
							"method": [
								{
									"shortdesc": "Deletes all elements.",
									"@_name": "removeAll"
								},
								{
									"shortdesc": "Get the first element in the collection with the provided name.",
									"parameters": {
										"parameter": {
											"datatype": {
												"type": "string"
											},
											"@_name": "name"
										}
									},
									"datatype": {
										"type": {
											"#text": "GridRepeatItem",
											"@_href": "#/GridRepeatItem"
										}
									},
									"@_name": "getByName"
								}
							],
							"@_type": "instance"
						}
					],
					"@_name": "GridRepeatItems",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when opening a file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Choose to update all text objects for documents saved with legacy texts (pre-Illustrator 11)",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "updateLegacyText"
							},
							{
								"shortdesc": "Choose to preserve the spot colors in the gradient mesh objects for legacy documents (pre-Illustrator CS3)",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "updateLegacyGradientMesh"
							},
							{
								"shortdesc": "Open the file as library.",
								"datatype": {
									"type": {
										"#text": "LibraryType",
										"@_href": "#/LibraryType"
									},
									"value": "LibraryType.ILLUSTRATORARTWORK"
								},
								"@_name": "openAs"
							},
							{
								"shortdesc": "Preserve Legacy Artboard (pre-Illustrator CS4) when opening in CS4 or later.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "preserveLegacyArtboard"
							},
							{
								"shortdesc": "Convert crop area to Artboard when opening legacy document (pre-Illustrator CS4) in CS4 or later. If false then crop areas are discarded.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "convertCropAreaToArtboard"
							},
							{
								"shortdesc": "Create Artboard with dimentions of artwork bounding box when opening legacy document (pre-Illustrator CS4) in CS4 or later.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "createArtboardWithArtworkBoundingBox"
							},
							{
								"shortdesc": "Convert print tiles to Artboard when opening legacy document (pre-Illustrator CS4) in CS4 or later.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "convertTilesToArtboard"
							},
							{
								"shortdesc": "Add this file to the list of recently opened files.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "addToRecentFiles"
							}
						],
						"@_type": "class"
					},
					"@_name": "OpenOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when saving a document as an FXG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "All the artboards or range of the artboards will be saved.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveMultipleArtboards"
							},
							{
								"shortdesc": "If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "artboardRange"
							},
							{
								"shortdesc": "The version of the FXG file format to create.",
								"datatype": {
									"type": {
										"#text": "FXGVersion",
										"@_href": "#/FXGVersion"
									},
									"value": "FXGVersion.VERSION2PT0"
								},
								"@_name": "version"
							},
							{
								"shortdesc": "Choose to preserve the editing capabilities of FXG.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "preserveEditingCapabilities"
							},
							{
								"shortdesc": "Choose to include unused symbols.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "includeUnusedSymbols"
							},
							{
								"shortdesc": "Choose to downsample the linked images(72ppi)",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "downsampleLinkedImages"
							},
							{
								"shortdesc": "Choose to include metadata (XMP)",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "includeMetadata"
							},
							{
								"shortdesc": "The policy used by FXG to preserve filters.",
								"datatype": {
									"type": {
										"#text": "FiltersPreservePolicy",
										"@_href": "#/FiltersPreservePolicy"
									},
									"value": "FiltersPreservePolicy.KEEPFILTERSEDITABLE"
								},
								"@_name": "filtersPolicy"
							},
							{
								"shortdesc": "The policy used by FXG to preserve text.",
								"datatype": {
									"type": {
										"#text": "TextPreservePolicy",
										"@_href": "#/TextPreservePolicy"
									},
									"value": "TextPreservePolicy.AUTOMATICALLYCONVERTTEXT"
								},
								"@_name": "textPolicy"
							},
							{
								"shortdesc": "The policy used by FXG to preserve gradients.",
								"datatype": {
									"type": {
										"#text": "GradientsPreservePolicy",
										"@_href": "#/GradientsPreservePolicy"
									},
									"value": "GradientsPreservePolicy.AUTOMATICALLYCONVERTGRADIENTS"
								},
								"@_name": "gradientsPolicy"
							},
							{
								"shortdesc": "The policy used by FXG to expand blends.",
								"datatype": {
									"type": {
										"#text": "BlendsExpandPolicy",
										"@_href": "#/BlendsExpandPolicy"
									},
									"value": "BlendsExpandPolicy.AUTOMATICALLYCONVERTBLENDS"
								},
								"@_name": "blendsPolicy"
							}
						],
						"@_type": "class"
					},
					"@_name": "FXGSaveOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when saving a document as an Illustrator EPS file.",
					"elements": {
						"property": [
							{
								"shortdesc": "What Illustrator file format version to create.",
								"datatype": {
									"type": {
										"#text": "Compatibility",
										"@_href": "#/Compatibility"
									},
									"value": "Compatibility.ILLUSTRATOR24"
								},
								"@_name": "compatibility"
							},
							{
								"shortdesc": "EPS preview format.",
								"datatype": {
									"type": {
										"#text": "EPSPreview",
										"@_href": "#/EPSPreview"
									}
								},
								"@_name": "preview"
							},
							{
								"shortdesc": "Are linked image files to be included in the saved document.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "embedLinkedFiles"
							},
							{
								"shortdesc": "Include thumbnail image of the EPS artwork.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "includeDocumentThumbnails"
							},
							{
								"shortdesc": "Embed all fonts used by the document in the saved file (version 7 or later)",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "embedAllFonts"
							},
							{
								"shortdesc": "Use CMYK PostScript.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "cmykPostScript"
							},
							{
								"shortdesc": "PostScript level to use (level 1 valid for file format version 8 or older)",
								"datatype": {
									"type": {
										"#text": "EPSPostScriptLevelEnum",
										"@_href": "#/EPSPostScriptLevelEnum"
									},
									"value": "EPSPostScriptLevelEnum.LEVEL2"
								},
								"@_name": "postScript"
							},
							{
								"shortdesc": "How should transparency be flattened for older file format versions (pre-version 9)",
								"datatype": {
									"type": {
										"#text": "OutputFlattening",
										"@_href": "#/OutputFlattening"
									},
									"value": "OutputFlattening.PRESERVEAPPEARANCE"
								},
								"@_name": "flattenOutput"
							},
							{
								"shortdesc": "Create a raster item of the gradient or gradient mesh so that PostScript Level 2 printers can print the object.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "compatibleGradientPrinting"
							},
							{
								"datatype": {
									"type": {
										"#text": "PDFOverprint",
										"@_href": "#/PDFOverprint"
									},
									"value": "PDFOverprint.PRESERVEPDFOVERPRINT"
								},
								"@_name": "overprint"
							},
							{
								"shortdesc": "All the artboards or range of the artboards will be saved.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveMultipleArtboards"
							},
							{
								"shortdesc": "If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "artboardRange"
							}
						],
						"@_type": "class"
					},
					"@_name": "EPSSaveOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when saving a document as a PDF file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The max string length is 255 bytes. Name of PDF preset to use.",
								"datatype": {
									"type": "string"
								},
								"@_name": "pDFPreset"
							},
							{
								"shortdesc": "The version of the Acrobat file format to create.",
								"datatype": {
									"type": {
										"#text": "PDFCompatibility",
										"@_href": "#/PDFCompatibility"
									},
									"value": "PDFCompatibility.ACROBAT5"
								},
								"@_name": "compatibility"
							},
							{
								"shortdesc": "This control includes the None option for when the user is not complying with any PDF standard.",
								"datatype": {
									"type": {
										"#text": "PDFXStandard",
										"@_href": "#/PDFXStandard"
									},
									"value": "PDFXStandard.PDFXNONE"
								},
								"@_name": "pDFXStandard"
							},
							{
								"shortdesc": "This displays the description from the selected preset.",
								"datatype": {
									"type": "string"
								},
								"@_name": "pDFXStandardDescription"
							},
							{
								"shortdesc": "Preserve Illustrator editing capabilities when saving the document.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "preserveEditability"
							},
							{
								"shortdesc": "Generate thumbnails for the saved document.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "generateThumbnails"
							},
							{
								"shortdesc": "Should the PDF document be optimized for fast web viewing.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "optimization"
							},
							{
								"shortdesc": "View PDF after saving.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "viewAfterSaving"
							},
							{
								"shortdesc": "How should color bitmap images be compressed.",
								"datatype": {
									"type": {
										"#text": "CompressionQuality",
										"@_href": "#/CompressionQuality"
									},
									"value": "CompressionQuality.None"
								},
								"@_name": "colorCompression"
							},
							{
								"shortdesc": "Tile size when compressing with JPEG2000.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"value": 256
								},
								"@_name": "colorTileSize"
							},
							{
								"shortdesc": "How should color bitmap images be resampled.",
								"datatype": {
									"type": {
										"#text": "DownsampleMethod",
										"@_href": "#/DownsampleMethod"
									},
									"value": "DownsampleMethod.NODOWNSAMPLE"
								},
								"@_name": "colorDownsamplingMethod"
							},
							{
								"shortdesc": "If zero, no downsampling, otherwise, the resolution to downsample color bitmap images to.",
								"datatype": {
									"type": "number",
									"value": 150
								},
								"@_name": "colorDownsampling"
							},
							{
								"shortdesc": "Downsample if the image's resolution is above this value.",
								"datatype": {
									"type": "number",
									"value": 225
								},
								"@_name": "colorDownsamplingImageThreshold"
							},
							{
								"shortdesc": "How should grayscale bitmap images be compressed.",
								"datatype": {
									"type": {
										"#text": "CompressionQuality",
										"@_href": "#/CompressionQuality"
									},
									"value": "CompressionQuality.None"
								},
								"@_name": "grayscaleCompression"
							},
							{
								"shortdesc": "Tile size when compressing with JPEG2000.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"value": 256
								},
								"@_name": "grayscaleTileSize"
							},
							{
								"shortdesc": "How should grayscale bitmap images be resampled.",
								"datatype": {
									"type": {
										"#text": "DownsampleMethod",
										"@_href": "#/DownsampleMethod"
									},
									"value": "DownsampleMethod.NODOWNSAMPLE"
								},
								"@_name": "grayscaleDownsamplingMethod"
							},
							{
								"shortdesc": "If zero, no downsampling, otherwise, the resolution to downsample grayscale images to.",
								"datatype": {
									"type": "number",
									"value": 150
								},
								"@_name": "grayscaleDownsampling"
							},
							{
								"shortdesc": "Downsample if the image's resolution is above this value.",
								"datatype": {
									"type": "number",
									"value": 225
								},
								"@_name": "grayscaleDownsamplingImageThreshold"
							},
							{
								"shortdesc": "How should monochrome bitmap images be compressed.",
								"datatype": {
									"type": {
										"#text": "MonochromeCompression",
										"@_href": "#/MonochromeCompression"
									},
									"value": "MonochromeCompression.None"
								},
								"@_name": "monochromeCompression"
							},
							{
								"shortdesc": "How should monochrome bitmap images be resampled.",
								"datatype": {
									"type": {
										"#text": "DownsampleMethod",
										"@_href": "#/DownsampleMethod"
									},
									"value": "DownsampleMethod.NODOWNSAMPLE"
								},
								"@_name": "monochromeDownsamplingMethod"
							},
							{
								"shortdesc": "If zero, no downsampling, otherwise, the resolution to downsample images to.",
								"datatype": {
									"type": "number",
									"value": 300
								},
								"@_name": "monochromeDownsampling"
							},
							{
								"shortdesc": "Downsample if the image's resolution is above this value.",
								"datatype": {
									"type": "number",
									"value": 450
								},
								"@_name": "monochromeDownsamplingImageThreshold"
							},
							{
								"shortdesc": "Should line art and text be compressed?",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "compressArt"
							},
							{
								"shortdesc": "Draw trim marks.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "trimMarks"
							},
							{
								"shortdesc": "Draw registration marks.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "registrationMarks"
							},
							{
								"shortdesc": "Draw color bars.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "colorBars"
							},
							{
								"shortdesc": "Draw page information.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "pageInformation"
							},
							{
								"shortdesc": "The page marks style.",
								"datatype": {
									"type": {
										"#text": "PageMarksTypes",
										"@_href": "#/PageMarksTypes"
									},
									"value": "PageMarksTypes.Roman"
								},
								"@_name": "pageMarksType"
							},
							{
								"shortdesc": "Trim mark weight.",
								"datatype": {
									"type": {
										"#text": "PDFTrimMarkWeight",
										"@_href": "#/PDFTrimMarkWeight"
									},
									"value": "PDFTrimMarkWeight.TRIMMARKWEIGHT0125"
								},
								"@_name": "trimMarkWeight"
							},
							{
								"shortdesc": "Custom offset (in points) for using the custom paper.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "offset"
							},
							{
								"shortdesc": "The bleed offset rect.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "bleedOffsetRect"
							},
							{
								"shortdesc": "Link 4 bleed values.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "bleedLink"
							},
							{
								"shortdesc": "PDF color conversion policy. Three choices are available: (1)No Color Conversion (2) Repurpose (3) Convert to Destination.",
								"datatype": {
									"type": {
										"#text": "ColorConversion",
										"@_href": "#/ColorConversion"
									},
									"value": "ColorConversion.None"
								},
								"@_name": "colorConversionID"
							},
							{
								"shortdesc": "When NoColorConversion is specified for Color Conversion, NoColorDestination is set.",
								"datatype": {
									"type": {
										"#text": "ColorDestination",
										"@_href": "#/ColorDestination"
									},
									"value": "ColorDestination.None"
								},
								"@_name": "colorDestinationID"
							},
							{
								"shortdesc": "If CMS is off, Don't Include Profiles is set.",
								"datatype": {
									"type": {
										"#text": "ColorProfile",
										"@_href": "#/ColorProfile"
									},
									"value": "ColorProfile.None"
								},
								"@_name": "colorProfileID"
							},
							{
								"shortdesc": "When CMS is on, the output intent profile is the same profile selected for Destination in the Color group box.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "outputIntentProfile"
							},
							{
								"shortdesc": "This is an optional comment which, if present, is added to the PDF file and describes the intended printing condition.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "outputCondition"
							},
							{
								"shortdesc": "If selected for Output Intent Profile Name, you can set the name of a registered printing condition.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "outputConditionID"
							},
							{
								"shortdesc": "URL to the site where the specified output condition is registered. No validation is performed on the URL.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "registryName"
							},
							{
								"shortdesc": "This indicates if manual trapping has been prepared in the document.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "trapped"
							},
							{
								"shortdesc": "Include a subset of fonts when less than this percentage of characters are used.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100,
									"value": 100
								},
								"@_name": "fontSubsetThreshold"
							},
							{
								"shortdesc": "The transparency flattener preset name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "flattenerPreset"
							},
							{
								"shortdesc": "The printing flattener options.",
								"datatype": {
									"type": {
										"#text": "PrintFlattenerOptions",
										"@_href": "#/PrintFlattenerOptions"
									}
								},
								"@_name": "flattenerOptions"
							},
							{
								"shortdesc": "Flattening printer resolution.",
								"datatype": {
									"type": "number",
									"value": 800
								},
								"@_name": "printerResolution"
							},
							{
								"shortdesc": "Create acrobat layers from top-level layers - acrobat 6 only option.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "acrobatLayers"
							},
							{
								"shortdesc": "Require a password to open the document.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "requireDocumentPassword"
							},
							{
								"shortdesc": "A password string to open the document.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "documentPassword"
							},
							{
								"shortdesc": "Use a password to restrict editing security settings.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "requirePermissionPassword"
							},
							{
								"shortdesc": "A password string to restrict editing security settings.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "permissionPassword"
							},
							{
								"shortdesc": "PDF security printing permission.",
								"datatype": {
									"type": {
										"#text": "PDFPrintAllowedEnum",
										"@_href": "#/PDFPrintAllowedEnum"
									},
									"value": "PDFPrintAllowedEnum.PRINT128HIGHRESOLUTION"
								},
								"@_name": "pDFAllowPrinting"
							},
							{
								"shortdesc": "PDF security changes allowed.",
								"datatype": {
									"type": {
										"#text": "PDFChangesAllowedEnum",
										"@_href": "#/PDFChangesAllowedEnum"
									},
									"value": "PDFChangesAllowedEnum.CHANGE128ANYCHANGES"
								},
								"@_name": "pDFChangesAllowed"
							},
							{
								"shortdesc": "Enable copying of text 128-bit.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "enableCopy"
							},
							{
								"shortdesc": "Enable accessing 128-bit.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "enableAccess"
							},
							{
								"shortdesc": "Enable plaintext metadata 128-bit - available only for acrobat 6.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "enablePlainText"
							},
							{
								"shortdesc": "Enable copying and accessing 40-bit.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "enableCopyAccess"
							},
							{
								"shortdesc": "Considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "artboardRange"
							}
						],
						"@_type": "class"
					},
					"@_name": "PDFSaveOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when saving a document as an Illustrator file.",
					"elements": {
						"property": [
							{
								"shortdesc": "What Illustrator file format version to create.",
								"datatype": {
									"type": {
										"#text": "Compatibility",
										"@_href": "#/Compatibility"
									},
									"value": "Compatibility.ILLUSTRATOR24"
								},
								"@_name": "compatibility"
							},
							{
								"shortdesc": "Include a subset of fonts when less than this percentage of characters are used (version 9 or later)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100,
									"value": 100
								},
								"@_name": "fontSubsetThreshold"
							},
							{
								"shortdesc": "Embed the document's ICC profile in the saved file (version 9 or later)",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "embedICCProfile"
							},
							{
								"shortdesc": "Are linked image files to be included in the saved document (versions 7 or later)",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "embedLinkedFiles"
							},
							{
								"shortdesc": "How should transparency be flattened for older file format versions (pre-version 9)",
								"datatype": {
									"type": {
										"#text": "OutputFlattening",
										"@_href": "#/OutputFlattening"
									},
									"value": "OutputFlattening.PRESERVEAPPEARANCE"
								},
								"@_name": "flattenOutput"
							},
							{
								"shortdesc": "Save as a PDF compatible file (version 10 or later)",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "pdfCompatible"
							},
							{
								"shortdesc": "Should the saved file be compressed (version 10 or later)",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "compressed"
							},
							{
								"shortdesc": "All the artboards or range of the artboards will be saved.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveMultipleArtboards"
							},
							{
								"shortdesc": "If SaveMultipleArtboards is true ,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "artboardRange"
							}
						],
						"@_type": "class"
					},
					"@_name": "IllustratorSaveOptions",
					"@_dynamic": "true"
				},
				{
					"elements": {
						"property": [
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "mValueA"
							},
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "mValueB"
							},
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "mValueC"
							},
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "mValueD"
							},
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "mValueTX"
							},
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "mValueTY"
							}
						],
						"@_type": "class"
					},
					"@_name": "Matrix",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "An item that needs to be exported; for example, a document, artboard, or asset.",
					"elements": {
						"property": [
							{
								"shortdesc": "Range of artboards to export [possible values: '', 'all'(default), range]",
								"datatype": {
									"type": "string",
									"value": "all"
								},
								"@_name": "artboards"
							},
							{
								"shortdesc": "Array of asset id to export (default:empty)",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"array": ""
								},
								"@_name": "assets"
							},
							{
								"shortdesc": "Whether to export the document or not.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "document"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportForScreensItemToExport",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be provided when exporting a document as a JPEG100 file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Should the image be compressed.",
								"datatype": {
									"type": {
										"#text": "JPEGCompressionMethodType",
										"@_href": "#/JPEGCompressionMethodType"
									},
									"value": "JPEGCompressionMethodType.BASELINESTANDARD"
								},
								"@_name": "compressionMethod"
							},
							{
								"shortdesc": "Specify the number of detailed scans when downloading a JPEG file using the Progressive option as the CompressionMethod.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 3,
									"max": 5,
									"value": 3
								},
								"@_name": "progressiveScan"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": {
										"#text": "AntiAliasingMethod",
										"@_href": "#/AntiAliasingMethod"
									},
									"value": "AntiAliasingMethod.ARTOPTIMIZED"
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Embed an ICC profile when exporting.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "embedICCProfile"
							},
							{
								"shortdesc": "How should the resulting image be scaled.",
								"datatype": {
									"type": {
										"#text": "ExportForScreensScaleType",
										"@_href": "#/ExportForScreensScaleType"
									},
									"value": "ExportForScreensScaleType.SCALEBYFACTOR"
								},
								"@_name": "scaleType"
							},
							{
								"shortdesc": "The value by which the resulting image should be scaled.",
								"datatype": {
									"type": "number",
									"value": 1
								},
								"@_name": "scaleTypeValue"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportForScreensOptionsJPEG",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be provided when exporting a document as an 8 bit PNG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Number of colors in exported color table.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 2,
									"max": 256,
									"value": 128
								},
								"@_name": "colorCount"
							},
							{
								"shortdesc": "Should the resulting image use transparency.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "transparency"
							},
							{
								"shortdesc": "Should the resulting image be interlaced.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "interlaced"
							},
							{
								"shortdesc": "Should the artboard be matted with a color.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "matte"
							},
							{
								"shortdesc": "The color to use when matting the artboard (default: white)",
								"datatype": {
									"type": {
										"#text": "RGBColor",
										"@_href": "#/RGBColor"
									}
								},
								"@_name": "matteColor"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": {
										"#text": "AntiAliasingMethod",
										"@_href": "#/AntiAliasingMethod"
									},
									"value": "AntiAliasingMethod.ARTOPTIMIZED"
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "How should the resulting image be scaled.",
								"datatype": {
									"type": {
										"#text": "ExportForScreensScaleType",
										"@_href": "#/ExportForScreensScaleType"
									},
									"value": "ExportForScreensScaleType.SCALEBYFACTOR"
								},
								"@_name": "scaleType"
							},
							{
								"shortdesc": "The value by which the resulting image should be scaled.",
								"datatype": {
									"type": "number",
									"value": 1
								},
								"@_name": "scaleTypeValue"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportForScreensOptionsPNG8",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be provided when exporting a document as an 24 bit PNG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Should the resulting image use transparency.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "transparency"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": {
										"#text": "AntiAliasingMethod",
										"@_href": "#/AntiAliasingMethod"
									},
									"value": "AntiAliasingMethod.ARTOPTIMIZED"
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Should the resulting image rasterize against a black background (with value true) or white background(with value false) if it doesn't use transparency.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "backgroundBlack"
							},
							{
								"shortdesc": "Should the resulting image be interlaced.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "interlaced"
							},
							{
								"shortdesc": "How should the resulting image be scaled.",
								"datatype": {
									"type": {
										"#text": "ExportForScreensScaleType",
										"@_href": "#/ExportForScreensScaleType"
									},
									"value": "ExportForScreensScaleType.SCALEBYFACTOR"
								},
								"@_name": "scaleType"
							},
							{
								"shortdesc": "The value by which the resulting image should be scaled.",
								"datatype": {
									"type": "number",
									"value": 1
								},
								"@_name": "scaleTypeValue"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportForScreensOptionsPNG24",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be provided when exporting a document as a web optimized SVG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The type of font that should be included in the exported file.",
								"datatype": {
									"type": {
										"#text": "SVGFontType",
										"@_href": "#/SVGFontType"
									},
									"value": "SVGFontType.SVGFONT"
								},
								"@_name": "fontType"
							},
							{
								"shortdesc": "Decimal precision for element coordinate values.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 1,
									"max": 7,
									"value": 3
								},
								"@_name": "coordinatePrecision"
							},
							{
								"shortdesc": "How should the CSS properties of the document be included in the document.",
								"datatype": {
									"type": {
										"#text": "SVGCSSPropertyLocation",
										"@_href": "#/SVGCSSPropertyLocation"
									},
									"value": "SVGCSSPropertyLocation.STYLEATTRIBUTES"
								},
								"@_name": "cssProperties"
							},
							{
								"shortdesc": "How object names (IDs) are generated in exported SVG.",
								"datatype": {
									"type": {
										"#text": "SVGIdType",
										"@_href": "#/SVGIdType"
									},
									"value": "SVGIdType.SVGIDREGULAR"
								},
								"@_name": "svgId"
							},
							{
								"shortdesc": "Reduces the size of the svg.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "svgMinify"
							},
							{
								"shortdesc": "Makes the SVG Responsive.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "svgResponsive"
							},
							{
								"shortdesc": "Should the raster images in the exported file be included.",
								"datatype": {
									"type": {
										"#text": "RasterImageLocation",
										"@_href": "#/RasterImageLocation"
									},
									"value": "RasterImageLocation.PRESERVE"
								},
								"@_name": "rasterImageLocation"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportForScreensOptionsWebOptimizedSVG",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be provided when exporting a document as a PDF file.",
					"elements": {
						"property": {
							"shortdesc": "The max string length is 255 bytes. Name of PDF preset to use.",
							"datatype": {
								"type": "string",
								"value": ""
							},
							"@_name": "pdfPreset"
						},
						"@_type": "class"
					},
					"@_name": "ExportForScreensPDFOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document as a JPEG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Quality of resulting image.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 0,
									"max": 100,
									"value": 30
								},
								"@_name": "qualitySetting"
							},
							{
								"shortdesc": "Should the image be optimized for web viewing.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "optimization"
							},
							{
								"shortdesc": "Blur the resulting image this much.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 2,
									"value": 0
								},
								"@_name": "blurAmount"
							},
							{
								"shortdesc": "Should the artboard be matted with a color.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "matte"
							},
							{
								"shortdesc": "The color to use when matting the artboard (default: white)",
								"datatype": {
									"type": {
										"#text": "RGBColor",
										"@_href": "#/RGBColor"
									}
								},
								"@_name": "matteColor"
							},
							{
								"shortdesc": "Horizontal scaling factor.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 776.19,
									"value": 100
								},
								"@_name": "horizontalScale"
							},
							{
								"shortdesc": "Vertical scaling factor.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 776.19,
									"value": 100
								},
								"@_name": "verticalScale"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Should the resulting image be clipped to the artboard.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "artBoardClipping"
							},
							{
								"shortdesc": "Should the resulting image be saved as HTML.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveAsHTML"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsJPEG",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document as an 8 bit PNG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Number of colors in exported color table.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 2,
									"max": 256,
									"value": 128
								},
								"@_name": "colorCount"
							},
							{
								"shortdesc": "Method used to reduce the number of colors.",
								"datatype": {
									"type": {
										"#text": "ColorReductionMethod",
										"@_href": "#/ColorReductionMethod"
									},
									"value": "ColorReductionMethod.SELECTIVE"
								},
								"@_name": "colorReduction"
							},
							{
								"shortdesc": "Method used to dither colors.",
								"datatype": {
									"type": {
										"#text": "ColorDitherMethod",
										"@_href": "#/ColorDitherMethod"
									},
									"value": "ColorDitherMethod.DIFFUSION"
								},
								"@_name": "colorDither"
							},
							{
								"shortdesc": "How much should the colors be dithered.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 0,
									"max": 100,
									"value": 88
								},
								"@_name": "ditherPercent"
							},
							{
								"shortdesc": "How much should the color table be changed to match the web palette.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 0,
									"max": 100,
									"value": 0
								},
								"@_name": "webSnap"
							},
							{
								"shortdesc": "Should the resulting image use transparency.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "transparency"
							},
							{
								"shortdesc": "Should the resulting image be interlaced.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "interlaced"
							},
							{
								"shortdesc": "Should the artboard be matted with a color.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "matte"
							},
							{
								"shortdesc": "The color to use when matting the artboard (default: white)",
								"datatype": {
									"type": {
										"#text": "RGBColor",
										"@_href": "#/RGBColor"
									}
								},
								"@_name": "matteColor"
							},
							{
								"shortdesc": "Horizontal scaling factor.",
								"datatype": {
									"type": "number",
									"value": 100
								},
								"@_name": "horizontalScale"
							},
							{
								"shortdesc": "Vertical scaling factor.",
								"datatype": {
									"type": "number",
									"value": 100
								},
								"@_name": "verticalScale"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Should the resulting image be clipped to the artboard.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "artBoardClipping"
							},
							{
								"shortdesc": "Should the resulting image be saved as HTML.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveAsHTML"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsPNG8",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document as an 24 bit PNG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Should the resulting image use transparency.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "transparency"
							},
							{
								"shortdesc": "Should the artboard be matted with a color.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "matte"
							},
							{
								"shortdesc": "The color to use when matting the artboard (default: white)",
								"datatype": {
									"type": {
										"#text": "RGBColor",
										"@_href": "#/RGBColor"
									}
								},
								"@_name": "matteColor"
							},
							{
								"shortdesc": "Horizontal scaling factor.",
								"datatype": {
									"type": "number",
									"value": 100
								},
								"@_name": "horizontalScale"
							},
							{
								"shortdesc": "Vertical scaling factor.",
								"datatype": {
									"type": "number",
									"value": 100
								},
								"@_name": "verticalScale"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Should the resulting image be clipped to the artboard.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "artBoardClipping"
							},
							{
								"shortdesc": "Should the resulting image be saved as HTML.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveAsHTML"
							},
							{
								"shortdesc": "Dimensions in which to contain the resulting raster.",
								"datatype": {
									"type": {
										"#text": "Dimensions",
										"@_href": "#/Dimensions"
									}
								},
								"@_name": "dimensions"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsPNG24",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document as a GIF file.",
					"elements": {
						"property": [
							{
								"shortdesc": "Number of colors in exported color table.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 2,
									"max": 256,
									"value": 128
								},
								"@_name": "colorCount"
							},
							{
								"shortdesc": "Method used to reduce the number of colors.",
								"datatype": {
									"type": {
										"#text": "ColorReductionMethod",
										"@_href": "#/ColorReductionMethod"
									},
									"value": "ColorReductionMethod.SELECTIVE"
								},
								"@_name": "colorReduction"
							},
							{
								"shortdesc": "Level of information loss during compression.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 0,
									"max": 100,
									"value": 0
								},
								"@_name": "infoLossPercent"
							},
							{
								"shortdesc": "Method used to dither colors.",
								"datatype": {
									"type": {
										"#text": "ColorDitherMethod",
										"@_href": "#/ColorDitherMethod"
									},
									"value": "ColorDitherMethod.DIFFUSION"
								},
								"@_name": "colorDither"
							},
							{
								"shortdesc": "How much should the colors be dithered.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 0,
									"max": 100,
									"value": 88
								},
								"@_name": "ditherPercent"
							},
							{
								"shortdesc": "How much should the color table be changed to match the web pallet.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 0,
									"max": 100,
									"value": 0
								},
								"@_name": "webSnap"
							},
							{
								"shortdesc": "Should the resulting image use transparency.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "transparency"
							},
							{
								"shortdesc": "Should the resulting image be interlaced.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "interlaced"
							},
							{
								"shortdesc": "Should the artboard be matted with a color.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "matte"
							},
							{
								"shortdesc": "The color to use when matting the artboard (default: white)",
								"datatype": {
									"type": {
										"#text": "RGBColor",
										"@_href": "#/RGBColor"
									}
								},
								"@_name": "matteColor"
							},
							{
								"shortdesc": "Horizontal scaling factor.",
								"datatype": {
									"type": "number",
									"value": 100
								},
								"@_name": "horizontalScale"
							},
							{
								"shortdesc": "Vertical scaling factor.",
								"datatype": {
									"type": "number",
									"value": 100
								},
								"@_name": "verticalScale"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Should the resulting image be clipped to the artboard.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "artBoardClipping"
							},
							{
								"shortdesc": "Should the resulting image be saved as HTML.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveAsHTML"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsGIF",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document as a Photoshop file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The color space of the exported file.",
								"datatype": {
									"type": {
										"#text": "ImageColorSpace",
										"@_href": "#/ImageColorSpace"
									},
									"value": "ImageColorSpace.RGB"
								},
								"@_name": "imageColorSpace"
							},
							{
								"shortdesc": "The resolution of the exported file.",
								"datatype": {
									"type": "number",
									"min": 72,
									"max": 2400,
									"value": 150
								},
								"@_name": "resolution"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Preserve document layers when exporting.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "writeLayers"
							},
							{
								"shortdesc": "Export text objects as editable text layers.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "editableText"
							},
							{
								"shortdesc": "Embed an ICC profile when exporting.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "embedICCProfile"
							},
							{
								"shortdesc": "Should a warning dialog be displayed because of conflicts in the export settings.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "warnings"
							},
							{
								"shortdesc": "Preserve as much of the original document's structure as possible when exporting.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "maximumEditability"
							},
							{
								"shortdesc": "All the artboards or range of the artboards will be exported.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveMultipleArtboards"
							},
							{
								"shortdesc": "If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "artboardRange"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsPhotoshop",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document as an SVG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The version of DTD that the exported file should be conforming to.",
								"datatype": {
									"type": {
										"#text": "SVGDTDVersion",
										"@_href": "#/SVGDTDVersion"
									},
									"value": "SVGDTDVersion.SVG1_1"
								},
								"@_name": "DTD"
							},
							{
								"shortdesc": "The type of font that should be included in the exported file.",
								"datatype": {
									"type": {
										"#text": "SVGFontType",
										"@_href": "#/SVGFontType"
									},
									"value": "SVGFontType.SVGFONT"
								},
								"@_name": "fontType"
							},
							{
								"shortdesc": "What font glyphs should be included in the exported file.",
								"datatype": {
									"type": {
										"#text": "SVGFontSubsetting",
										"@_href": "#/SVGFontSubsetting"
									},
									"value": "SVGFontSubsetting.ALLGLYPHS"
								},
								"@_name": "fontSubsetting"
							},
							{
								"shortdesc": "Should the raster images in the exported file be included.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "embedRasterImages"
							},
							{
								"shortdesc": "Decimal precision for element coordinate values.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 1,
									"max": 7,
									"value": 3
								},
								"@_name": "coordinatePrecision"
							},
							{
								"shortdesc": "How should the text in the document be encoded.",
								"datatype": {
									"type": {
										"#text": "SVGDocumentEncoding",
										"@_href": "#/SVGDocumentEncoding"
									},
									"value": "SVGDocumentEncoding.ASCII"
								},
								"@_name": "documentEncoding"
							},
							{
								"shortdesc": "How should the CSS properties of the document be included in the document.",
								"datatype": {
									"type": {
										"#text": "SVGCSSPropertyLocation",
										"@_href": "#/SVGCSSPropertyLocation"
									},
									"value": "SVGCSSPropertyLocation.STYLEATTRIBUTES"
								},
								"@_name": "cssProperties"
							},
							{
								"shortdesc": "Should the exported file be compressed.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "compressed"
							},
							{
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "optimizeForSVGViewer"
							},
							{
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "includeVariablesAndDatasets"
							},
							{
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "includeFileInfo"
							},
							{
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "includeUnusedStyles"
							},
							{
								"shortdesc": "Preserve slice data in exported document.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "slices"
							},
							{
								"shortdesc": "Preserve Illustrator editing capabilities when exporting the document.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "preserveEditability"
							},
							{
								"shortdesc": "Is SVG auto kerning allowed?",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "sVGAutoKerning"
							},
							{
								"shortdesc": "Is SVG text-on-path construct allowed?",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "sVGTextOnPath"
							},
							{
								"shortdesc": "All the artboards or range of the artboards will be saved.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveMultipleArtboards"
							},
							{
								"shortdesc": "If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "artboardRange"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsSVG",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document as a Web optimized SVG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The type of font that should be included in the exported file.",
								"datatype": {
									"type": {
										"#text": "SVGFontType",
										"@_href": "#/SVGFontType"
									},
									"value": "SVGFontType.SVGFONT"
								},
								"@_name": "fontType"
							},
							{
								"shortdesc": "Decimal precision for element coordinate values.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 1,
									"max": 7,
									"value": 3
								},
								"@_name": "coordinatePrecision"
							},
							{
								"shortdesc": "How should the CSS properties of the document be included in the document.",
								"datatype": {
									"type": {
										"#text": "SVGCSSPropertyLocation",
										"@_href": "#/SVGCSSPropertyLocation"
									},
									"value": "SVGCSSPropertyLocation.STYLEATTRIBUTES"
								},
								"@_name": "cssProperties"
							},
							{
								"shortdesc": "How object names (IDs) are generated in exported SVG.",
								"datatype": {
									"type": {
										"#text": "SVGIdType",
										"@_href": "#/SVGIdType"
									},
									"value": "SVGIdType.SVGIDREGULAR"
								},
								"@_name": "svgId"
							},
							{
								"shortdesc": "Reduces the size of the svg.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "svgMinify"
							},
							{
								"shortdesc": "Makes the SVG Responsive.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "svgResponsive"
							},
							{
								"shortdesc": "Should the raster images in the exported file be included.",
								"datatype": {
									"type": {
										"#text": "RasterImageLocation",
										"@_href": "#/RasterImageLocation"
									},
									"value": "RasterImageLocation.PRESERVE"
								},
								"@_name": "rasterImageLocation"
							},
							{
								"shortdesc": "All the artboards or range of the artboards will be saved.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveMultipleArtboards"
							},
							{
								"shortdesc": "If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "artboardRange"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsWebOptimizedSVG",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document to AutoCAD formats (.dwg or .dxf)",
					"elements": {
						"property": [
							{
								"shortdesc": "Which format to export the file as.",
								"datatype": {
									"type": {
										"#text": "AutoCADExportFileFormat",
										"@_href": "#/AutoCADExportFileFormat"
									},
									"value": "AutoCADExportFileFormat.DWG"
								},
								"@_name": "exportFileFormat"
							},
							{
								"shortdesc": "Release of AutoCAD to export to.",
								"datatype": {
									"type": {
										"#text": "AutoCADCompatibility",
										"@_href": "#/AutoCADCompatibility"
									},
									"value": "AutoCADCompatibility.AutoCADRelease24"
								},
								"@_name": "version"
							},
							{
								"shortdesc": "Ratio by which to scale the output.",
								"datatype": {
									"type": "number",
									"value": 1
								},
								"@_name": "unitScaleRatio"
							},
							{
								"shortdesc": "Units from which to map.",
								"datatype": {
									"type": {
										"#text": "AutoCADUnit",
										"@_href": "#/AutoCADUnit"
									},
									"value": "AutoCADUnit.Millimeters"
								},
								"@_name": "unit"
							},
							{
								"shortdesc": "Number of colors to export into the AutoCAD file.",
								"datatype": {
									"type": {
										"#text": "AutoCADColors",
										"@_href": "#/AutoCADColors"
									},
									"value": "AutoCADColors.TrueColors"
								},
								"@_name": "colors"
							},
							{
								"shortdesc": "Raster format in which to export raster art.",
								"datatype": {
									"type": {
										"#text": "AutoCADRasterFormat",
										"@_href": "#/AutoCADRasterFormat"
									},
									"value": "AutoCADRasterFormat.PNG"
								},
								"@_name": "rasterFormat"
							},
							{
								"shortdesc": "Whether to preserve appearance or editability during export.",
								"datatype": {
									"type": {
										"#text": "AutoCADExportOption",
										"@_href": "#/AutoCADExportOption"
									},
									"value": "AutoCADExportOption.MaximumEditability"
								},
								"@_name": "exportOption"
							},
							{
								"shortdesc": "Export selected art only.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "exportSelectedArtOnly"
							},
							{
								"shortdesc": "Alter paths for appearance.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "alterPathsForAppearance"
							},
							{
								"shortdesc": "Whether to convert text to outlines.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "convertTextToOutlines"
							},
							{
								"shortdesc": "Whether to scale lineweights by the same amount as rest of the drawing.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "scaleLineweights"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsAutoCAD",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when exporting a document as a TIFF file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The color space of the exported file.",
								"datatype": {
									"type": {
										"#text": "ImageColorSpace",
										"@_href": "#/ImageColorSpace"
									},
									"value": "ImageColorSpace.RGB"
								},
								"@_name": "imageColorSpace"
							},
							{
								"shortdesc": "The resolution of the exported file.",
								"datatype": {
									"type": "number",
									"min": 72,
									"max": 2400,
									"value": 150
								},
								"@_name": "resolution"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": {
										"#text": "AntiAliasingMethod",
										"@_href": "#/AntiAliasingMethod"
									},
									"value": "AntiAliasingMethod.ARTOPTIMIZED"
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Compress TIFF file with LZW Compression when exporting.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "lZWCompression"
							},
							{
								"shortdesc": "Mac or PC byte order when exporting.",
								"datatype": {
									"type": {
										"#text": "TIFFByteOrder",
										"@_href": "#/TIFFByteOrder"
									},
									"value": "TIFFByteOrder.IBMPC"
								},
								"@_name": "byteOrder"
							},
							{
								"shortdesc": "Embed an ICC profile when exporting.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "embedICCProfile"
							},
							{
								"shortdesc": "All the artboards or range of the artboards will be exported.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "saveMultipleArtboards"
							},
							{
								"shortdesc": "If SaveMultipleArtboards is true,this will be considered for multi-asset extraction which specifies artboard range.Empty string will extracts all the artboards.Default is empty string.",
								"datatype": {
									"type": "string",
									"value": ""
								},
								"@_name": "artboardRange"
							}
						],
						"@_type": "class"
					},
					"@_name": "ExportOptionsTIFF",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The parent class for all color values used in Illustrator. See the specific color classes for more information.",
					"elements": {
						"@_type": "class"
					},
					"@_name": "Color",
					"@_dynamic": "true"
				},
				{
					"superclass": "Color",
					"shortdesc": "An Lab color specification.",
					"elements": {
						"property": [
							{
								"shortdesc": "The L color value (between 0.0 and 100.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100,
									"value": 0
								},
								"@_name": "l"
							},
							{
								"shortdesc": "The a color value (between -128.0 and 127.0)",
								"datatype": {
									"type": "number",
									"min": -128,
									"max": 127,
									"value": 0
								},
								"@_name": "a"
							},
							{
								"shortdesc": "The b color value (between -128.0 and 127.0)",
								"datatype": {
									"type": "number",
									"min": -128,
									"max": 127,
									"value": 0
								},
								"@_name": "b"
							}
						],
						"@_type": "class"
					},
					"@_name": "LabColor",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Dimensions (height and width)",
					"elements": {
						"property": [
							{
								"shortdesc": "The Width parameter.",
								"datatype": {
									"type": "number",
									"min": 0
								},
								"@_name": "width"
							},
							{
								"shortdesc": "The Height parameter.",
								"datatype": {
									"type": "number",
									"min": 0
								},
								"@_name": "height"
							}
						],
						"@_type": "class"
					},
					"@_name": "Dimensions",
					"@_dynamic": "true"
				},
				{
					"superclass": "Color",
					"shortdesc": "An RGB color specification.",
					"elements": {
						"property": [
							{
								"shortdesc": "The red color value (between 0.0 and 255.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 255,
									"value": 0
								},
								"@_name": "red"
							},
							{
								"shortdesc": "The green color value (between 0.0 and 255.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 255,
									"value": 0
								},
								"@_name": "green"
							},
							{
								"shortdesc": "The blue color value (between 0.0 and 255.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 255,
									"value": 0
								},
								"@_name": "blue"
							}
						],
						"@_type": "class"
					},
					"@_name": "RGBColor",
					"@_dynamic": "true"
				},
				{
					"superclass": "Color",
					"shortdesc": "A CMYK color specification.",
					"elements": {
						"property": [
							{
								"shortdesc": "The cyan color value (between 0.0 and 100.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100,
									"value": 0
								},
								"@_name": "cyan"
							},
							{
								"shortdesc": "The magenta color value (between 0.0 and 100.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100,
									"value": 0
								},
								"@_name": "magenta"
							},
							{
								"shortdesc": "The yellow color value (between 0.0 and 100.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100,
									"value": 0
								},
								"@_name": "yellow"
							},
							{
								"shortdesc": "The black color value (between 0.0 and 100.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100,
									"value": 0
								},
								"@_name": "black"
							}
						],
						"@_type": "class"
					},
					"@_name": "CMYKColor",
					"@_dynamic": "true"
				},
				{
					"superclass": "Color",
					"shortdesc": "A gray color specification.",
					"elements": {
						"property": {
							"shortdesc": "The gray value (between 0.0 and 100.0)",
							"datatype": {
								"type": "number",
								"min": 0,
								"max": 100,
								"value": 0
							},
							"@_name": "gray"
						},
						"@_type": "class"
					},
					"@_name": "GrayColor",
					"@_dynamic": "true"
				},
				{
					"superclass": "Color",
					"shortdesc": "Represents the 'none' color.",
					"elements": {
						"@_type": "class"
					},
					"@_name": "NoColor",
					"@_dynamic": "true"
				},
				{
					"superclass": "Color",
					"shortdesc": "Information about the spot color.",
					"elements": {
						"property": [
							{
								"shortdesc": "Percentage level of tint to be applied to the spot color.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100,
									"value": 100
								},
								"@_name": "tint"
							},
							{
								"datatype": {
									"type": {
										"#text": "Spot",
										"@_href": "#/Spot"
									}
								},
								"@_name": "spot"
							}
						],
						"@_type": "class"
					},
					"@_name": "SpotColor",
					"@_dynamic": "true"
				},
				{
					"superclass": "Color",
					"shortdesc": "A Pattern color specification.",
					"elements": {
						"property": [
							{
								"shortdesc": "The distance to translate the (unscaled) prototype before filling.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "shiftDistance"
							},
							{
								"shortdesc": "The angle to translate the (unscaled) prototype before filling.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "shiftAngle"
							},
							{
								"shortdesc": "The fraction to scale the prototype before filling.",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "scaleFactor"
							},
							{
								"shortdesc": "The angle to rotate the before filling.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "rotation"
							},
							{
								"shortdesc": "Whether or not the prototype is reflected before filling.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "reflect"
							},
							{
								"shortdesc": "The axis around which to reflect.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "reflectAngle"
							},
							{
								"shortdesc": "The angle to slant the shear by.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "shearAngle"
							},
							{
								"shortdesc": "The axis to shear with respect to.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "shearAxis"
							},
							{
								"shortdesc": "Additional transformation arising from manipulating the path.",
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "matrix"
							},
							{
								"datatype": {
									"type": {
										"#text": "Pattern",
										"@_href": "#/Pattern"
									}
								},
								"@_name": "pattern"
							}
						],
						"@_type": "class"
					},
					"@_name": "PatternColor",
					"@_dynamic": "true"
				},
				{
					"superclass": "Color",
					"shortdesc": "A Gradient color specification.",
					"elements": {
						"property": [
							{
								"shortdesc": "The gradient vector origin.",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "origin"
							},
							{
								"shortdesc": "The gradient vector angle.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "angle"
							},
							{
								"shortdesc": "The gradient vector length.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "length"
							},
							{
								"shortdesc": "The gradient hilite vector angle.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "hiliteAngle"
							},
							{
								"shortdesc": "The gradient hilite vector length.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "hiliteLength"
							},
							{
								"shortdesc": "Additional transformation arising from manipulating the path.",
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "matrix"
							},
							{
								"shortdesc": "Reference to the object defining the gradient.",
								"datatype": {
									"type": {
										"#text": "Gradient",
										"@_href": "#/Gradient"
									}
								},
								"@_name": "gradient"
							}
						],
						"@_type": "class"
					},
					"@_name": "GradientColor",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Tab stop information (returned by tab stops from a paragraph object)",
					"elements": {
						"property": [
							{
								"shortdesc": "The alignment of the tab stop.",
								"datatype": {
									"type": {
										"#text": "TabStopAlignment",
										"@_href": "#/TabStopAlignment"
									},
									"value": "TabStopAlignment.Left"
								},
								"@_name": "alignment"
							},
							{
								"shortdesc": "The character used for decimal tab stops.",
								"datatype": {
									"type": "string",
									"value": "."
								},
								"@_name": "decimalCharacter"
							},
							{
								"shortdesc": "The position of the tab stop expressed in points.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "position"
							},
							{
								"shortdesc": "The leader dot.",
								"datatype": {
									"type": "string"
								},
								"@_name": "leader"
							}
						],
						"@_type": "class"
					},
					"@_name": "TabStopInfo",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "An installed printer.",
					"elements": {
						"property": [
							{
								"shortdesc": "The printer name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The printer information.",
								"datatype": {
									"type": {
										"#text": "PrinterInfo",
										"@_href": "#/PrinterInfo"
									}
								},
								"@_name": "printerInfo"
							}
						],
						"@_type": "class"
					},
					"@_name": "Printer",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Printer information.",
					"elements": {
						"property": [
							{
								"shortdesc": "The printer type.",
								"datatype": {
									"type": {
										"#text": "PrinterTypeEnum",
										"@_href": "#/PrinterTypeEnum"
									}
								},
								"@_name": "printerType"
							},
							{
								"shortdesc": "The PostScript level.",
								"datatype": {
									"type": {
										"#text": "PrinterPostScriptLevelEnum",
										"@_href": "#/PrinterPostScriptLevelEnum"
									}
								},
								"@_name": "postScriptLevel"
							},
							{
								"shortdesc": "The printer color capability.",
								"datatype": {
									"type": {
										"#text": "PrinterColorMode",
										"@_href": "#/PrinterColorMode"
									}
								},
								"@_name": "colorSupport"
							},
							{
								"shortdesc": "The printer default resolution.",
								"datatype": {
									"type": "number"
								},
								"@_name": "deviceResolution"
							},
							{
								"shortdesc": "The printer maximum device resolution.",
								"datatype": {
									"type": "number"
								},
								"@_name": "maxDeviceResolution"
							},
							{
								"shortdesc": "Does the printer support InRIP color separation?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "inRIPSeparationSupport"
							},
							{
								"shortdesc": "Does the printer support binary printing?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "binaryPrintingSupport"
							},
							{
								"shortdesc": "The list of supported paper sizes.",
								"datatype": {
									"type": {
										"#text": "Paper",
										"@_href": "#/Paper"
									},
									"array": ""
								},
								"@_name": "paperSizes"
							},
							{
								"shortdesc": "Does the printer support custom paper size?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "customPaperSupport"
							},
							{
								"shortdesc": "Does the printer support custom paper transverse?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "customPaperTransverseSupport"
							},
							{
								"shortdesc": "Custom paper's minimum width.",
								"datatype": {
									"type": "number"
								},
								"@_name": "minPaperWidth"
							},
							{
								"shortdesc": "Custom paper's maximum width.",
								"datatype": {
									"type": "number"
								},
								"@_name": "maxPaperWidth"
							},
							{
								"shortdesc": "Custom paper's minimum height.",
								"datatype": {
									"type": "number"
								},
								"@_name": "minPaperHeight"
							},
							{
								"shortdesc": "Custom paper's maximum height.",
								"datatype": {
									"type": "number"
								},
								"@_name": "maxPaperHeight"
							},
							{
								"shortdesc": "Custom paper's minimum height offset.",
								"datatype": {
									"type": "number"
								},
								"@_name": "minPaperHeightOffset"
							},
							{
								"shortdesc": "Custom paper's maximum height offset.",
								"datatype": {
									"type": "number"
								},
								"@_name": "maxPaperHeightOffset"
							},
							{
								"shortdesc": "Custom paper's minimum width offset.",
								"datatype": {
									"type": "number"
								},
								"@_name": "minPaperWidthOffset"
							},
							{
								"shortdesc": "Custom paper's maximum width offset.",
								"datatype": {
									"type": "number"
								},
								"@_name": "maxPaperWidthOffset"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrinterInfo",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A PPD file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The PPD model name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The PPD file information.",
								"datatype": {
									"type": {
										"#text": "PPDFileInfo",
										"@_href": "#/PPDFileInfo"
									}
								},
								"@_name": "PPDInfo"
							}
						],
						"@_type": "class"
					},
					"@_name": "PPDFile",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "PPD file information.",
					"elements": {
						"property": [
							{
								"shortdesc": "The PostScript language level.",
								"datatype": {
									"type": "string"
								},
								"@_name": "languageLevel"
							},
							{
								"shortdesc": "Path specification for the PPD file.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "PPDFilePath"
							},
							{
								"shortdesc": "List of color separation screens.",
								"datatype": {
									"type": {
										"#text": "Screen",
										"@_href": "#/Screen"
									},
									"array": ""
								},
								"@_name": "screenList"
							},
							{
								"shortdesc": "List of color separation screen spot functions.",
								"datatype": {
									"type": {
										"#text": "ScreenSpotFunction",
										"@_href": "#/ScreenSpotFunction"
									},
									"array": ""
								},
								"@_name": "screenSpotFunctionList"
							}
						],
						"@_type": "class"
					},
					"@_name": "PPDFileInfo",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Paper size.",
					"elements": {
						"property": [
							{
								"shortdesc": "The paper name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The paper information.",
								"datatype": {
									"type": {
										"#text": "PaperInfo",
										"@_href": "#/PaperInfo"
									}
								},
								"@_name": "paperInfo"
							}
						],
						"@_type": "class"
					},
					"@_name": "Paper",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Paper information.",
					"elements": {
						"property": [
							{
								"shortdesc": "The paper's width (in points)",
								"datatype": {
									"type": "number"
								},
								"@_name": "width"
							},
							{
								"shortdesc": "The paper's height (in points)",
								"datatype": {
									"type": "number"
								},
								"@_name": "height"
							},
							{
								"shortdesc": "The imageable area.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "imageableArea"
							},
							{
								"shortdesc": "Is it a custom paper?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "customPaper"
							}
						],
						"@_type": "class"
					},
					"@_name": "PaperInfo",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Color separation screen.",
					"elements": {
						"property": [
							{
								"shortdesc": "The color separation screen name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The color separation screen information.",
								"datatype": {
									"type": {
										"#text": "ScreenInfo",
										"@_href": "#/ScreenInfo"
									}
								},
								"@_name": "screenInfo"
							}
						],
						"@_type": "class"
					},
					"@_name": "Screen",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Screen information.",
					"elements": {
						"property": [
							{
								"shortdesc": "Is it the default screen?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "defaultScreen"
							},
							{
								"shortdesc": "The screen's frequency.",
								"datatype": {
									"type": "number"
								},
								"@_name": "frequency"
							},
							{
								"shortdesc": "The screen's angle (in degrees)",
								"datatype": {
									"type": "number"
								},
								"@_name": "angle"
							}
						],
						"@_type": "class"
					},
					"@_name": "ScreenInfo",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Color separation screen spot function.",
					"elements": {
						"property": [
							{
								"shortdesc": "The color separation screen spot function name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The spot function in terms of the PostScript commands.",
								"datatype": {
									"type": "string"
								},
								"@_name": "spotFunction"
							}
						],
						"@_type": "class"
					},
					"@_name": "ScreenSpotFunction",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Printer's ink.",
					"elements": {
						"property": [
							{
								"shortdesc": "The ink's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The ink information.",
								"datatype": {
									"type": {
										"#text": "InkInfo",
										"@_href": "#/InkInfo"
									}
								},
								"@_name": "inkInfo"
							}
						],
						"@_type": "class"
					},
					"@_name": "Ink",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Ink information.",
					"elements": {
						"property": [
							{
								"shortdesc": "The ink printing status.",
								"datatype": {
									"type": {
										"#text": "InkPrintStatus",
										"@_href": "#/InkPrintStatus"
									}
								},
								"@_name": "printingStatus"
							},
							{
								"shortdesc": "The ink type.",
								"datatype": {
									"type": {
										"#text": "InkType",
										"@_href": "#/InkType"
									}
								},
								"@_name": "kind"
							},
							{
								"shortdesc": "The trapping type.",
								"datatype": {
									"type": {
										"#text": "TrappingType",
										"@_href": "#/TrappingType"
									}
								},
								"@_name": "trapping"
							},
							{
								"shortdesc": "The order of trapping for the ink.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 1
								},
								"@_name": "trappingOrder"
							},
							{
								"shortdesc": "The neutral density.",
								"datatype": {
									"type": "number",
									"min": 0
								},
								"@_name": "density"
							},
							{
								"shortdesc": "The ink's frequency.",
								"datatype": {
									"type": "number",
									"min": 0
								},
								"@_name": "frequency"
							},
							{
								"shortdesc": "The ink's screen angle (in degrees)",
								"datatype": {
									"type": "number"
								},
								"@_name": "angle"
							},
							{
								"shortdesc": "The color of the custom ink.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "customColor"
							},
							{
								"shortdesc": "The dot shape name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "dotShape"
							}
						],
						"@_type": "class"
					},
					"@_name": "InkInfo",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The new document preset to use for creating a new document.",
					"elements": {
						"property": [
							{
								"shortdesc": "The title for the new document.",
								"datatype": {
									"type": "string",
									"value": "Untitled"
								},
								"@_name": "title"
							},
							{
								"shortdesc": "The width for the new document.",
								"datatype": {
									"type": "number",
									"value": 612
								},
								"@_name": "width"
							},
							{
								"shortdesc": "The height for the new document.",
								"datatype": {
									"type": "number",
									"value": 792
								},
								"@_name": "height"
							},
							{
								"shortdesc": "Number of artboards for new document.Range (1:100).",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"value": 1
								},
								"@_name": "numArtboards"
							},
							{
								"shortdesc": "Layout for artboards.",
								"datatype": {
									"type": {
										"#text": "DocumentArtboardLayout",
										"@_href": "#/DocumentArtboardLayout"
									},
									"value": "DocumentArtboardLayout.GridByRow"
								},
								"@_name": "artboardLayout"
							},
							{
								"shortdesc": "Spacing between artboards.",
								"datatype": {
									"type": "number",
									"value": 20
								},
								"@_name": "artboardSpacing"
							},
							{
								"shortdesc": "Number of rows (for rows layout) OR column(for column layouts)of artboards.Range is 1 to (docNumArtboards - 1) or 1 for single row or column layouts.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"value": 1
								},
								"@_name": "artboardRowsOrCols"
							},
							{
								"shortdesc": "The color mode for the new document.",
								"datatype": {
									"type": {
										"#text": "DocumentColorSpace",
										"@_href": "#/DocumentColorSpace"
									},
									"value": "DocumentColorSpace.CMYK"
								},
								"@_name": "colorMode"
							},
							{
								"shortdesc": "The units for the new document.",
								"datatype": {
									"type": {
										"#text": "RulerUnits",
										"@_href": "#/RulerUnits"
									},
									"value": "RulerUnits.Points"
								},
								"@_name": "units"
							},
							{
								"shortdesc": "The preview mode for the new document.",
								"datatype": {
									"type": {
										"#text": "DocumentPreviewMode",
										"@_href": "#/DocumentPreviewMode"
									},
									"value": "DocumentPreviewMode.DefaultPreview"
								},
								"@_name": "previewMode"
							},
							{
								"shortdesc": "The raster resolution for the new document.",
								"datatype": {
									"type": {
										"#text": "DocumentRasterResolution",
										"@_href": "#/DocumentRasterResolution"
									},
									"value": "DocumentRasterResolution.ScreenResolution"
								},
								"@_name": "rasterResolution"
							},
							{
								"shortdesc": "The transparency grid for the new document.",
								"datatype": {
									"type": {
										"#text": "DocumentTransparencyGrid",
										"@_href": "#/DocumentTransparencyGrid"
									},
									"value": "DocumentTransparencyGrid.TransparencyGridNone"
								},
								"@_name": "transparencyGrid"
							},
							{
								"shortdesc": "Document bleed offset rect.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "documentBleedOffset"
							},
							{
								"shortdesc": "Document link for bleed values.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "documentBleedLink"
							}
						],
						"@_type": "class"
					},
					"@_name": "DocumentPreset",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The print options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The name of the printer to print to.",
								"datatype": {
									"type": "string"
								},
								"@_name": "printerName"
							},
							{
								"shortdesc": "The name of the PPD to use.",
								"datatype": {
									"type": "string"
								},
								"@_name": "PPDName"
							},
							{
								"shortdesc": "The name of a print preset to use.",
								"datatype": {
									"type": "string"
								},
								"@_name": "printPreset"
							},
							{
								"shortdesc": "The transparency flattener preset name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "flattenerPreset"
							},
							{
								"shortdesc": "The paper options.",
								"datatype": {
									"type": {
										"#text": "PrintPaperOptions",
										"@_href": "#/PrintPaperOptions"
									}
								},
								"@_name": "paperOptions"
							},
							{
								"shortdesc": "The printing job options.",
								"datatype": {
									"type": {
										"#text": "PrintJobOptions",
										"@_href": "#/PrintJobOptions"
									}
								},
								"@_name": "jobOptions"
							},
							{
								"shortdesc": "The printing color separation options.",
								"datatype": {
									"type": {
										"#text": "PrintColorSeparationOptions",
										"@_href": "#/PrintColorSeparationOptions"
									}
								},
								"@_name": "colorSeparationOptions"
							},
							{
								"shortdesc": "The printing coordinate options.",
								"datatype": {
									"type": {
										"#text": "PrintCoordinateOptions",
										"@_href": "#/PrintCoordinateOptions"
									}
								},
								"@_name": "coordinateOptions"
							},
							{
								"shortdesc": "The printing page marks options.",
								"datatype": {
									"type": {
										"#text": "PrintPageMarksOptions",
										"@_href": "#/PrintPageMarksOptions"
									}
								},
								"@_name": "pageMarksOptions"
							},
							{
								"shortdesc": "The printing font options.",
								"datatype": {
									"type": {
										"#text": "PrintFontOptions",
										"@_href": "#/PrintFontOptions"
									}
								},
								"@_name": "fontOptions"
							},
							{
								"shortdesc": "The printing PostScript options.",
								"datatype": {
									"type": {
										"#text": "PrintPostScriptOptions",
										"@_href": "#/PrintPostScriptOptions"
									}
								},
								"@_name": "postScriptOptions"
							},
							{
								"shortdesc": "The printing color management options.",
								"datatype": {
									"type": {
										"#text": "PrintColorManagementOptions",
										"@_href": "#/PrintColorManagementOptions"
									}
								},
								"@_name": "colorManagementOptions"
							},
							{
								"shortdesc": "The printing flattener options.",
								"datatype": {
									"type": {
										"#text": "PrintFlattenerOptions",
										"@_href": "#/PrintFlattenerOptions"
									}
								},
								"@_name": "flattenerOptions"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The paper options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The paper's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The custom width (in points) for using the custom paper.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "width"
							},
							{
								"shortdesc": "The custom height (in points) for using the custom paper.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "height"
							},
							{
								"shortdesc": "Custom offset (in points) for using the custom paper.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "offset"
							},
							{
								"shortdesc": "Whether to transverse the artwork (rotate 90 degrees) on the custom paper.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "transverse"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintPaperOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The print job options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The layers/objects to be printed.",
								"datatype": {
									"type": {
										"#text": "PrintArtworkDesignation",
										"@_href": "#/PrintArtworkDesignation"
									},
									"value": "PrintArtworkDesignation.VISIBLEPRINTABLELAYERS"
								},
								"@_name": "designation"
							},
							{
								"shortdesc": "The printing bounds.",
								"datatype": {
									"type": {
										"#text": "PrintingBounds",
										"@_href": "#/PrintingBounds"
									},
									"value": "PrintingBounds.ARTBOARDBOUNDS"
								},
								"@_name": "printArea"
							},
							{
								"shortdesc": "The number of copies to print.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 1,
									"value": 1
								},
								"@_name": "copies"
							},
							{
								"shortdesc": "Print pages in reverse order.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "reversePages"
							},
							{
								"shortdesc": "Whether to collate print pages.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "collate"
							},
							{
								"shortdesc": "The file to be printed to.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "file"
							},
							{
								"shortdesc": "Whether to print as bitmap.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "printAsBitmap"
							},
							{
								"shortdesc": "The bitmap resolution.",
								"datatype": {
									"type": "number",
									"min": 0,
									"value": 0
								},
								"@_name": "bitmapResolution"
							},
							{
								"shortdesc": "The print job name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "Whether to print all artboards.",
								"datatype": {
									"type": "bool",
									"value": true
								},
								"@_name": "printAllArtboards"
							},
							{
								"shortdesc": "Artboard Range to be printed if PrintAllArtboards is false.",
								"datatype": {
									"type": "string",
									"value": "1-"
								},
								"@_name": "artboardRange"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintJobOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Print color separation options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The color separation type.",
								"datatype": {
									"type": {
										"#text": "PrintColorSeparationMode",
										"@_href": "#/PrintColorSeparationMode"
									},
									"value": "PrintColorSeparationMode.COMPOSITE"
								},
								"@_name": "colorSeparationMode"
							},
							{
								"shortdesc": "Whether to convert all spot colors to process colors.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "convertSpotColors"
							},
							{
								"shortdesc": "Whether to overprint in black.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "overPrintBlack"
							},
							{
								"shortdesc": "The list of inks for color separation.",
								"datatype": {
									"type": {
										"#text": "Ink",
										"@_href": "#/Ink"
									},
									"array": ""
								},
								"@_name": "inkList"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintColorSeparationOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The print coordinate options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The artwork orientation.",
								"datatype": {
									"type": {
										"#text": "PrintOrientation",
										"@_href": "#/PrintOrientation"
									},
									"value": "PrintOrientation.PORTRAIT"
								},
								"@_name": "orientation"
							},
							{
								"shortdesc": "Whether to flip artwork horizontally.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "emulsion"
							},
							{
								"shortdesc": "The artwork position on media.",
								"datatype": {
									"type": {
										"#text": "PrintPosition",
										"@_href": "#/PrintPosition"
									},
									"value": "PrintPosition.TRANSLATECENTER"
								},
								"@_name": "position"
							},
							{
								"shortdesc": "Whether to proportionally scale the artwork to fit on the page.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "fitToPage"
							},
							{
								"shortdesc": "The horizontal scaling factor expressed as a percentage (100 = 100%)",
								"datatype": {
									"type": "number",
									"min": 1,
									"max": 10000,
									"value": 100
								},
								"@_name": "horizontalScale"
							},
							{
								"shortdesc": "The vertical scaling factor expressed as a percentage (100 = 100%)",
								"datatype": {
									"type": "number",
									"min": 1,
									"max": 10000,
									"value": 100
								},
								"@_name": "verticalScale"
							},
							{
								"shortdesc": "The page tiling mode.",
								"datatype": {
									"type": {
										"#text": "PrintTiling",
										"@_href": "#/PrintTiling"
									},
									"value": "PrintTiling.TILESINGLEFULLPAGE"
								},
								"@_name": "tiling"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintCoordinateOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The page marks options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The page marks style.",
								"datatype": {
									"type": {
										"#text": "PageMarksTypes",
										"@_href": "#/PageMarksTypes"
									},
									"value": "PageMarksTypes.Roman"
								},
								"@_name": "pageMarksType"
							},
							{
								"shortdesc": "Stroke weight of trim marks.",
								"datatype": {
									"type": "number",
									"min": 0,
									"value": 0.125
								},
								"@_name": "trimMarksWeight"
							},
							{
								"shortdesc": "Whether to enable trim marks printing.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "trimMarks"
							},
							{
								"shortdesc": "Whether to enable registration marks printing.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "registrationMarks"
							},
							{
								"shortdesc": "Whether to enable color bars printing.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "colorBars"
							},
							{
								"shortdesc": "Whether to enable page info marks printing.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "pageInfoMarks"
							},
							{
								"shortdesc": "The bleed offset rect.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "bleedOffsetRect"
							},
							{
								"shortdesc": "The page marks offset rect.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "marksOffsetRect"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintPageMarksOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The font options for printing.",
					"elements": {
						"property": [
							{
								"shortdesc": "The font download mode.",
								"datatype": {
									"type": {
										"#text": "PrintFontDownloadMode",
										"@_href": "#/PrintFontDownloadMode"
									},
									"value": "PrintFontDownloadMode.DOWNLOADSUBSET"
								},
								"@_name": "downloadFonts"
							},
							{
								"shortdesc": "The font substitution policy.",
								"datatype": {
									"type": {
										"#text": "FontSubstitutionPolicy",
										"@_href": "#/FontSubstitutionPolicy"
									},
									"value": "FontSubstitutionPolicy.SUBSTITUTEOBLIQUE"
								},
								"@_name": "fontSubstitution"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintFontOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The PostScript options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The PostScript language level.",
								"datatype": {
									"type": {
										"#text": "PrinterPostScriptLevelEnum",
										"@_href": "#/PrinterPostScriptLevelEnum"
									},
									"value": "PrinterPostScriptLevelEnum.PSLEVEL2"
								},
								"@_name": "postScriptLevel"
							},
							{
								"shortdesc": "Whether to print in binary mode.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "binaryPrinting"
							},
							{
								"shortdesc": "Whether to print in negative mode.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "negativePrinting"
							},
							{
								"shortdesc": "The image compression type.",
								"datatype": {
									"type": {
										"#text": "PostScriptImageCompressionType",
										"@_href": "#/PostScriptImageCompressionType"
									},
									"value": "PostScriptImageCompressionType.IMAGECOMPRESSIONNONE"
								},
								"@_name": "imageCompression"
							},
							{
								"shortdesc": "Whether to force continuous tone.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "forceContinuousTone"
							},
							{
								"shortdesc": "Use PostScript level 1 compatible gradient and gradient mesh printing.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "compatibleShading"
							},
							{
								"shortdesc": "The shading resolution.",
								"datatype": {
									"type": "number",
									"min": 1,
									"max": 9600,
									"value": 300
								},
								"@_name": "shadingResolution"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintPostScriptOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The color management options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The color management profile mode.",
								"datatype": {
									"type": {
										"#text": "PrintColorProfile",
										"@_href": "#/PrintColorProfile"
									},
									"value": "PrintColorProfile.SOURCEPROFILE"
								},
								"@_name": "colorProfileMode"
							},
							{
								"shortdesc": "The color management intent type.",
								"datatype": {
									"type": {
										"#text": "PrintColorIntent",
										"@_href": "#/PrintColorIntent"
									},
									"value": "PrintColorIntent.RELATIVECOLORIMETRIC"
								},
								"@_name": "intent"
							},
							{
								"shortdesc": "The color management profile name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintColorManagementOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The transparency flattening options.",
					"elements": {
						"property": [
							{
								"shortdesc": "The flattening balance.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 0,
									"max": 100,
									"value": 100
								},
								"@_name": "flatteningBalance"
							},
							{
								"shortdesc": "The rasterization resolution.",
								"datatype": {
									"type": "number",
									"min": 1,
									"max": 9600,
									"value": 300
								},
								"@_name": "rasterizationResolution"
							},
							{
								"shortdesc": "The gradient resolution.",
								"datatype": {
									"type": "number",
									"min": 1,
									"max": 9600,
									"value": 300
								},
								"@_name": "gradientResolution"
							},
							{
								"shortdesc": "Whether to convert all text to outlines.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "convertTextToOutlines"
							},
							{
								"shortdesc": "Whether to convert all strokes to outlines.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "convertStrokesToOutlines"
							},
							{
								"shortdesc": "Whether to clip complex regions.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "clipComplexRegions"
							},
							{
								"shortdesc": "Overprint.",
								"datatype": {
									"type": {
										"#text": "PDFOverprint",
										"@_href": "#/PDFOverprint"
									},
									"value": "PDFOverprint.PRESERVEPDFOVERPRINT"
								},
								"@_name": "overprint"
							}
						],
						"@_type": "class"
					},
					"@_name": "PrintFlattenerOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when capturing a portion of the artwork as an 24 bit PNG file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The resolution of the captured image file.",
								"datatype": {
									"type": "number",
									"min": 72,
									"max": 2400,
									"value": 150
								},
								"@_name": "resolution"
							},
							{
								"shortdesc": "Should the resulting image use transparency.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "transparency"
							},
							{
								"shortdesc": "Should the artboard be matted with a color.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "matte"
							},
							{
								"shortdesc": "The color to use when matting the artboard (default: white)",
								"datatype": {
									"type": {
										"#text": "RGBColor",
										"@_href": "#/RGBColor"
									}
								},
								"@_name": "matteColor"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "antiAliasing"
							}
						],
						"@_type": "class"
					},
					"@_name": "ImageCaptureOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The document raster effects settings.",
					"elements": {
						"property": [
							{
								"shortdesc": "The color model for the rasterization.",
								"datatype": {
									"type": {
										"#text": "RasterizationColorModel",
										"@_href": "#/RasterizationColorModel"
									},
									"value": "RasterizationColorModel.DEFAULTCOLORMODEL"
								},
								"@_name": "colorModel"
							},
							{
								"shortdesc": "The rasterization resolution in dots-per-inch (dpi)",
								"datatype": {
									"type": "number",
									"min": 72,
									"max": 2400,
									"value": 300
								},
								"@_name": "resolution"
							},
							{
								"shortdesc": "Should the resulting image use transparency.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "transparency"
							},
							{
								"shortdesc": "Should the resulting image be antialiased.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "antiAliasing"
							},
							{
								"shortdesc": "Should a clipping mask be created for the resulting image.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "clippingMask"
							},
							{
								"shortdesc": "Whether to convert all spot colors to process colors in the resulting image.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "convertSpotColors"
							},
							{
								"shortdesc": "The amount of white space (in points) to be added around the object during rasterization.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "padding"
							}
						],
						"@_type": "class"
					},
					"@_name": "RasterEffectOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when rasterizing the artwork.",
					"elements": {
						"property": [
							{
								"shortdesc": "The color model for the rasterization.",
								"datatype": {
									"type": {
										"#text": "RasterizationColorModel",
										"@_href": "#/RasterizationColorModel"
									},
									"value": "RasterizationColorModel.DEFAULTCOLORMODEL"
								},
								"@_name": "colorModel"
							},
							{
								"shortdesc": "The rasterization resolution in dots-per-inch (dpi)",
								"datatype": {
									"type": "number",
									"min": 72,
									"max": 2400,
									"value": 300
								},
								"@_name": "resolution"
							},
							{
								"shortdesc": "Should the resulting image use transparency.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "transparency"
							},
							{
								"shortdesc": "The type of antialiasing method.",
								"datatype": {
									"type": {
										"#text": "AntiAliasingMethod",
										"@_href": "#/AntiAliasingMethod"
									},
									"value": "AntiAliasingMethod.ARTOPTIMIZED"
								},
								"@_name": "antiAliasingMethod"
							},
							{
								"shortdesc": "Should a clipping mask be created for the resulting image.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "clippingMask"
							},
							{
								"shortdesc": "Whether to convert all spot colors to process colors in the resulting image.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "convertSpotColors"
							},
							{
								"shortdesc": "Should all text be converted to outlines before rasterization.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "convertTextToOutlines"
							},
							{
								"shortdesc": "Should the resulting image incorporates the layer attributes (such as opacity and blend mode)",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "includeLayers"
							},
							{
								"shortdesc": "Should rasterize against a black background instead of white.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "backgroundBlack"
							},
							{
								"shortdesc": "The amount of white space (in points) to be added around the object during rasterization.",
								"datatype": {
									"type": "number",
									"value": 0
								},
								"@_name": "padding"
							}
						],
						"@_type": "class"
					},
					"@_name": "RasterizeOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options for radial repaat art configuration.",
					"elements": {
						"property": [
							{
								"shortdesc": "Number of instances of radial repeat art.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"value": 8
								},
								"@_name": "numberOfInstances"
							},
							{
								"shortdesc": "Reverse overlap of radial repeat art.",
								"datatype": {
									"type": "bool",
									"value": false
								},
								"@_name": "reverseOverlap"
							},
							{
								"shortdesc": "Radius of radial repeat art.",
								"datatype": {
									"type": "number",
									"value": -1
								},
								"@_name": "radius"
							}
						],
						"@_type": "class"
					},
					"@_name": "RadialRepeatConfig",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options for grid repaat art configuration.",
					"elements": {
						"property": [
							{
								"shortdesc": "Spacing between each rows.",
								"datatype": {
									"type": "number",
									"value": 10
								},
								"@_name": "horizontalSpacing"
							},
							{
								"shortdesc": "Spacing between each columns.",
								"datatype": {
									"type": "number",
									"value": 10
								},
								"@_name": "verticalSpacing"
							},
							{
								"shortdesc": "Shift type of grid repeat art.",
								"datatype": {
									"type": {
										"#text": "RepeatGridShiftFlipType",
										"@_href": "#/RepeatGridShiftFlipType"
									},
									"value": "RepeatGridShiftFlipType.NOSF"
								},
								"@_name": "patternType"
							},
							{
								"shortdesc": "Row flip type of grid repeat art.",
								"datatype": {
									"type": {
										"#text": "RepeatGridShiftFlipType",
										"@_href": "#/RepeatGridShiftFlipType"
									},
									"value": "RepeatGridShiftFlipType.NOSF"
								},
								"@_name": "rowFlipType"
							},
							{
								"shortdesc": "Column flip type of grid repeat art.",
								"datatype": {
									"type": {
										"#text": "RepeatGridShiftFlipType",
										"@_href": "#/RepeatGridShiftFlipType"
									},
									"value": "RepeatGridShiftFlipType.NOSF"
								},
								"@_name": "columnFlipType"
							}
						],
						"@_type": "class"
					},
					"@_name": "GridRepeatConfig",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options for symmetry repaat art configuration.",
					"elements": {
						"property": {
							"shortdesc": "Symmetry axis rotation angle wrt x-axis in anti-clockwise fashion.",
							"datatype": {
								"type": "number",
								"value": 1.57
							},
							"@_name": "axisRotationAngleInRadians"
						},
						"@_type": "class"
					},
					"@_name": "SymmetryRepeatConfig",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "The Adobe Illustrator application.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The application's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Path specification for the application.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "path",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The active document.",
								"datatype": {
									"type": {
										"#text": "Document",
										"@_href": "#/Document"
									}
								},
								"@_name": "activeDocument"
							},
							{
								"shortdesc": "The current users adobe id.",
								"datatype": {
									"type": "string"
								},
								"@_name": "userAdobeID",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The current user's GUID.",
								"datatype": {
									"type": "string"
								},
								"@_name": "userGUID",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The version of the Adobe Illustrator application.",
								"datatype": {
									"type": "string"
								},
								"@_name": "version",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The build number of the Adobe Illustrator application.",
								"datatype": {
									"type": "string"
								},
								"@_name": "buildNumber",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The Locale of the Adobe Illustrator application.",
								"datatype": {
									"type": "string"
								},
								"@_name": "locale",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The version of the Scripting plugin.",
								"datatype": {
									"type": "string"
								},
								"@_name": "scriptingVersion",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The amount of unused memory within the Adobe Illustrator partition.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "freeMemory",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is a web browser available?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "browserAvailable",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The selection visible to the user.",
								"datatype": {
									"type": "any"
								},
								"@_name": "selection"
							},
							{
								"shortdesc": "Is the application visible.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "visible",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "What level of interaction with the user should be allowed when handling script commands.",
								"datatype": {
									"type": {
										"#text": "UserInteractionLevel",
										"@_href": "#/UserInteractionLevel"
									}
								},
								"@_name": "userInteractionLevel"
							},
							{
								"shortdesc": "Coordinate System used by script.",
								"datatype": {
									"type": {
										"#text": "CoordinateSystem",
										"@_href": "#/CoordinateSystem"
									}
								},
								"@_name": "coordinateSystem"
							},
							{
								"shortdesc": "Preferences for Illustrator.",
								"datatype": {
									"type": {
										"#text": "Preferences",
										"@_href": "#/Preferences"
									}
								},
								"@_name": "preferences",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of installed printers.",
								"datatype": {
									"type": {
										"#text": "Printer",
										"@_href": "#/Printer"
									},
									"array": ""
								},
								"@_name": "printerList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of PPD files currently available for use. For performance reasons, the PPDFile entry only contains the model name and file spec of each PPD file.",
								"datatype": {
									"type": {
										"#text": "PPDFile",
										"@_href": "#/PPDFile"
									},
									"array": ""
								},
								"@_name": "PPDFileList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of print preset names currently available for use.",
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "printPresetsList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of presets available for creating a new document.",
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "startupPresetsList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of PDF preset names currently available for use.",
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "PDFPresetsList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of flattener style names currently available for use.",
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "flattenerPresetsList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of tracing preset names currently available for use.",
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "tracingPresetsList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of color settings files currently available for use.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									},
									"array": ""
								},
								"@_name": "colorSettingsList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The default color settings file for the current application locale.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "defaultColorSettings",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Does paste operation remember layers structure?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "pasteRemembersLayers"
							},
							{
								"shortdesc": "The open documents.",
								"datatype": {
									"type": {
										"#text": "Documents",
										"@_href": "#/Documents"
									}
								},
								"@_name": "documents",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "True if home Screen is Visible.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "homeScreenVisible",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Installed fonts.",
								"datatype": {
									"type": {
										"#text": "TextFonts",
										"@_href": "#/TextFonts"
									}
								},
								"@_name": "textFonts",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Returns the JSON Data required by Hello.",
								"datatype": {
									"type": "string"
								},
								"@_name": "getHelloJSONData"
							},
							{
								"shortdesc": "Returns the JSON Data required by CCX Welcome.",
								"parameters": {
									"parameter": {
										"shortdesc": "Mode for which the data is to be provided.",
										"datatype": {
											"type": "string",
											"value": ""
										},
										"@_name": "mode",
										"@_optional": "true"
									}
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "getCCXUserJSONData"
							},
							{
								"shortdesc": "Returns if the specified filePath is open.",
								"parameters": {
									"parameter": {
										"shortdesc": "The filePath to be checked.",
										"datatype": {
											"type": "string"
										},
										"@_name": "filePath"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "getIsFileOpen"
							},
							{
								"shortdesc": "Launch cep Extension given its ID.",
								"parameters": {
									"parameter": {
										"shortdesc": "Arguments for Launching Extension - ID of extension in manifest.xml of corresponding extension.",
										"datatype": {
											"type": "string"
										},
										"@_name": "extensionID"
									}
								},
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "launchExtension"
							},
							{
								"shortdesc": "Runs API Tests from the TestAPI Plug-in.",
								"parameters": {
									"parameter": {
										"shortdesc": "Arguments for Running Tests - eg. Name of Test/Suite.",
										"datatype": {
											"type": "string"
										},
										"@_name": "testName"
									}
								},
								"@_name": "runAPITest"
							},
							{
								"shortdesc": "Loads the aat model to the editor.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATLoadModel"
							},
							{
								"shortdesc": "Loads a UI description as an extension to the editor.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATLoadUIExtension"
							},
							{
								"shortdesc": "Loads a session file as an extension to the editor.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATLoadLibExtension"
							},
							{
								"shortdesc": "Executes the active session in the sequencer.",
								"@_name": "aATExecuteSession"
							},
							{
								"shortdesc": "Executes the active session in the sequencer.",
								"parameters": {
									"parameter": {
										"shortdesc": "Execute a session file.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "file"
									}
								},
								"@_name": "aATExecuteSessionFromFile"
							},
							{
								"shortdesc": "Retrieves a file path to the AAT editor swf.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "aATGetEditorDialogFile"
							},
							{
								"shortdesc": "Retrieves a string representing the AAT version.",
								"datatype": {
									"type": "string"
								},
								"@_name": "getVersionString"
							},
							{
								"shortdesc": "Retrieves a file path to the AAT error dialog swf.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "aATGetErrorDialogFile"
							},
							{
								"shortdesc": "Retrieves a boolean indicating the presence of errors in the last script to execute.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "aATErrorsExist"
							},
							{
								"shortdesc": "Retrieves a string containing the results of the last script to execute.",
								"datatype": {
									"type": "string"
								},
								"@_name": "getExecutionOutput"
							},
							{
								"shortdesc": "Clear the sequencer.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATClear"
							},
							{
								"shortdesc": "Get the active session for the sequncer.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATGetSession"
							},
							{
								"shortdesc": "Saves the active session in the sequencer to a file.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATSaveSession"
							},
							{
								"shortdesc": "Saves the active session in the sequencer to a new file.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATSaveAsSession"
							},
							{
								"shortdesc": "Loads a session into the sequencer.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATLoadSessionFile"
							},
							{
								"shortdesc": "Add the specified to the sequencer.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The index in the session of the top-most sequence for the item to add.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "sessionIndex"
										},
										{
											"shortdesc": "The UID for the owning sequence.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "destinationSequenceID"
										},
										{
											"shortdesc": "The item UID where to insert.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "destinationIndex"
										},
										{
											"shortdesc": "The item ID of the item to construct.",
											"datatype": {
												"type": "string"
											},
											"@_name": "srcItemIDData"
										},
										{
											"shortdesc": "The source of the item to construct.",
											"datatype": {
												"type": "string"
											},
											"@_name": "type"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "aATAddItem"
							},
							{
								"shortdesc": "Moves the specified in the sequencer.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The index in the session of the top-most sequence for the item to move.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "sessionIndex"
										},
										{
											"shortdesc": "The UID of the item to replace.",
											"datatype": {
												"type": "string"
											},
											"@_name": "moveThisID"
										},
										{
											"shortdesc": "The index in the session of the destination top-most sequence.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "newSessionIndex"
										},
										{
											"shortdesc": "The UID for the owning sequence.",
											"datatype": {
												"type": "string"
											},
											"@_name": "destinationSequenceID"
										},
										{
											"shortdesc": "The index where to insert.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "destinationIndex"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "aATMoveItem"
							},
							{
								"shortdesc": "Replaces the specified to the sequencer.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The index in the session of the top-most sequence for the item to add.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "sessionIndex"
										},
										{
											"shortdesc": "The UID of the item to replace.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "replaceThisID"
										},
										{
											"shortdesc": "The item ID of the item to construct.",
											"datatype": {
												"type": "string"
											},
											"@_name": "srcItemIDData"
										},
										{
											"shortdesc": "The source of the item to construct.",
											"datatype": {
												"type": "string"
											},
											"@_name": "type"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "aATReplaceItem"
							},
							{
								"shortdesc": "Removes the specified item from the sequencer.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The index in the session of the top-most sequence for the item to add.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "sessionIndex"
										},
										{
											"shortdesc": "The item UID.",
											"datatype": {
												"type": "string"
											},
											"@_name": "item"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "aATRemoveItem"
							},
							{
								"shortdesc": "Duplicates the specified item(s) from the sequencer.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The index in the session of the top-most sequence for the item to add.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "sessionIndex"
										},
										{
											"shortdesc": "The item UID(s)",
											"datatype": {
												"type": "string"
											},
											"@_name": "item"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "aATDuplicateItem"
							},
							{
								"shortdesc": "Opens the specified item from the sequencer in the item editor.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The index in the session of the top-most sequence for the item to add.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "sessionIndex"
										},
										{
											"shortdesc": "The item UID.",
											"datatype": {
												"type": "string"
											},
											"@_name": "item"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "aATEditItem"
							},
							{
								"shortdesc": "Applies the data used in the item editor to the item.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The index in the session of the top-most sequence for the item to edit.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "sessionIndex"
										},
										{
											"shortdesc": "The item UID.",
											"datatype": {
												"type": "string"
											},
											"@_name": "item"
										},
										{
											"shortdesc": "The data to apply in XML format.",
											"datatype": {
												"type": "string"
											},
											"@_name": "data"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "applyDataToItem"
							},
							{
								"shortdesc": "Applies data to the specified item from the sequencer in the item editor.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The index in the session of the top-most sequence for the item to add.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "sessionIndex"
										},
										{
											"shortdesc": "The item UID.",
											"datatype": {
												"type": "string"
											},
											"@_name": "item"
										},
										{
											"shortdesc": "The data to apply in XML format.",
											"datatype": {
												"type": "string"
											},
											"@_name": "dataID"
										},
										{
											"shortdesc": "The data to apply in XML format.",
											"datatype": {
												"type": "string"
											},
											"@_name": "data"
										}
									]
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "applySingleDataPointToItem"
							},
							{
								"shortdesc": "Returns a string translated from the key and source data passed in.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The string to translate.",
											"datatype": {
												"type": "string"
											},
											"@_name": "key"
										},
										{
											"shortdesc": "The plugin name from the source of the key.",
											"datatype": {
												"type": "string"
											},
											"@_name": "source"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "translateString"
							},
							{
								"shortdesc": "Prompts the user to save a file or choose a file or directory and returns a relative path string to the file.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The path relative to the folder specified by Relative.",
											"datatype": {
												"type": "string"
											},
											"@_name": "path"
										},
										{
											"shortdesc": "The current relative path token.",
											"datatype": {
												"type": "string"
											},
											"@_name": "relative"
										},
										{
											"shortdesc": "The type of dialog to show in string format.",
											"datatype": {
												"type": "string"
											},
											"@_name": "type"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "aATFileSaveDialog"
							},
							{
								"shortdesc": "Switches a files relative token and path.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The path relative to the folder specified by Relative.",
											"datatype": {
												"type": "string"
											},
											"@_name": "path"
										},
										{
											"shortdesc": "The current relative path token.",
											"datatype": {
												"type": "string"
											},
											"@_name": "relative"
										},
										{
											"shortdesc": "The new relative path token.",
											"datatype": {
												"type": "string"
											},
											"@_name": "newRelative"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "aATFileRelativeChanged"
							},
							{
								"shortdesc": "Gets an XML string listing the relative paths and the UI strings to display them.",
								"datatype": {
									"type": "string"
								},
								"@_name": "aATGetListOfRelativePaths"
							},
							{
								"shortdesc": "Starts the automation tests for the Sync Settings feature.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "beginSyncSettingsAutomationTest"
							},
							{
								"shortdesc": "Starts the automation tests for the Typekit Font feature.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "beginTypekitFontAutomationTest"
							},
							{
								"shortdesc": "Cut current selection to the clipboard.",
								"@_name": "cut"
							},
							{
								"shortdesc": "Copy current selection to the clipboard.",
								"@_name": "copy"
							},
							{
								"shortdesc": "Paste clipboard into the current document.",
								"@_name": "paste"
							},
							{
								"shortdesc": "Checks if fill is active or not.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "isFillActive"
							},
							{
								"shortdesc": "Checks if stroke is active or not.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "isStrokeActive"
							},
							{
								"shortdesc": "Invokes application's color picker.",
								"parameters": {
									"parameter": {
										"shortdesc": "The color to load in the color picker initially.",
										"datatype": {
											"type": {
												"#text": "Color",
												"@_href": "#/Color"
											}
										},
										"@_name": "color"
									}
								},
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "showColorPicker"
							},
							{
								"shortdesc": "For Internal Use.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "For Internal use.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "assetURL"
										},
										{
											"shortdesc": "For Internal use.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "thumbnailURL"
										},
										{
											"shortdesc": "For internal use.",
											"datatype": {
												"type": "string"
											},
											"@_name": "assetType"
										},
										{
											"shortdesc": "For internal use.",
											"datatype": {
												"type": "any"
											},
											"@_name": "options",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Document",
										"@_href": "#/Document"
									}
								},
								"@_name": "openCloudLibraryAssetForEditing"
							},
							{
								"shortdesc": "For Internal Use.",
								"parameters": {
									"parameter": {
										"shortdesc": "Options for the PNG24 export.",
										"datatype": {
											"type": "any"
										},
										"@_name": "options"
									}
								},
								"@_name": "setThumbnailOptionsForCloudLibrary"
							},
							{
								"shortdesc": "Undo the last transaction.",
								"@_name": "undo"
							},
							{
								"shortdesc": "Redo the last transaction.",
								"@_name": "redo"
							},
							{
								"shortdesc": "Play an action from the Actions Palette.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The name of the action to play (note that the case of letters in the Action name is important and must match the case of the name in the Actions palette)",
											"datatype": {
												"type": "string"
											},
											"@_name": "action"
										},
										{
											"shortdesc": "The name of the action set containing the action being played (note that the case of letters in the Action Set name is important and must match the case of the name in the Actions palette)",
											"datatype": {
												"type": "string"
											},
											"@_name": "from"
										},
										{
											"shortdesc": "Are dialog boxes associated with the action to be presented?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "dialogs",
											"@_optional": "true"
										}
									]
								},
								"@_name": "doScript"
							},
							{
								"shortdesc": "Executes a menu command using the menu shortcut string.",
								"parameters": {
									"parameter": {
										"shortdesc": "Menu command shortcut.",
										"datatype": {
											"type": "string"
										},
										"@_name": "menuCommandString"
									}
								},
								"@_name": "executeMenuCommand"
							},
							{
								"shortdesc": "Given a preset type, returns the full path to the application's default document profile for the type.",
								"parameters": {
									"parameter": {
										"shortdesc": "The preset type.",
										"datatype": {
											"type": {
												"#text": "DocumentPresetType",
												"@_href": "#/DocumentPresetType"
											}
										},
										"@_name": "presetType"
									}
								},
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "getPresetFileOfType"
							},
							{
								"shortdesc": "Load an action into action palette.",
								"parameters": {
									"parameter": {
										"shortdesc": "The path on the system of the action file to be loaded.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "actionFilePath"
									}
								},
								"@_name": "loadAction"
							},
							{
								"shortdesc": "Unloads an action into action palette.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Name of the set to be unloaded.",
											"datatype": {
												"type": "string"
											},
											"@_name": "setName"
										},
										{
											"shortdesc": "Name of the action to be unloaded.",
											"datatype": {
												"type": "string"
											},
											"@_name": "actionName"
										}
									]
								},
								"@_name": "unloadAction"
							},
							{
								"shortdesc": "Sends the script message to the required plugin.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Plugin to which message needs to be sent.",
											"datatype": {
												"type": "string"
											},
											"@_name": "pluginName"
										},
										{
											"shortdesc": "Functionality that is to be executed.",
											"datatype": {
												"type": "string"
											},
											"@_name": "messageSelector"
										},
										{
											"shortdesc": "Pass any data encoded in a string.",
											"datatype": {
												"type": "string"
											},
											"@_name": "inputString"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "sendScriptMessage"
							},
							{
								"shortdesc": "Given a preset name, tries and retrieves the settings from the preset template.",
								"parameters": {
									"parameter": {
										"shortdesc": "The name of the preset.",
										"datatype": {
											"type": "string"
										},
										"@_name": "preset"
									}
								},
								"datatype": {
									"type": {
										"#text": "DocumentPreset",
										"@_href": "#/DocumentPreset"
									}
								},
								"@_name": "getPresetSettings"
							},
							{
								"shortdesc": "Force Illustrator to redraw its window(s)",
								"@_name": "redraw"
							},
							{
								"shortdesc": "Invert a matrix.",
								"parameters": {
									"parameter": {
										"shortdesc": "The matrix to invert.",
										"datatype": {
											"type": {
												"#text": "Matrix",
												"@_href": "#/Matrix"
											}
										},
										"@_name": "matrix"
									}
								},
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "invertMatrix"
							},
							{
								"shortdesc": "Tests if a matrix is singular (cannot be inverted)",
								"parameters": {
									"parameter": {
										"shortdesc": "The matrix to check.",
										"datatype": {
											"type": {
												"#text": "Matrix",
												"@_href": "#/Matrix"
											}
										},
										"@_name": "matrix"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "isSingularMatrix"
							},
							{
								"shortdesc": "Concatenate a translation to a transformation matrix.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The matrix that is to be added to.",
											"datatype": {
												"type": {
													"#text": "Matrix",
													"@_href": "#/Matrix"
												}
											},
											"@_name": "matrix"
										},
										{
											"shortdesc": "Horizontal transformation.",
											"datatype": {
												"type": "number",
												"value": 0
											},
											"@_name": "deltaX",
											"@_optional": "true"
										},
										{
											"shortdesc": "Vertical transformation.",
											"datatype": {
												"type": "number",
												"value": 0
											},
											"@_name": "deltaY",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "concatenateTranslationMatrix"
							},
							{
								"shortdesc": "Concatenate a scale matrix to a transformation matrix.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The matrix that is to be added to.",
											"datatype": {
												"type": {
													"#text": "Matrix",
													"@_href": "#/Matrix"
												}
											},
											"@_name": "matrix"
										},
										{
											"shortdesc": "Horizontal scaling factor expressed as a percentage (100 = 100%)",
											"datatype": {
												"type": "number",
												"value": 100
											},
											"@_name": "scaleX",
											"@_optional": "true"
										},
										{
											"shortdesc": "Vertical scaling factor expressed as a percentage (100 = 100%)",
											"datatype": {
												"type": "number",
												"value": 100
											},
											"@_name": "scaleY",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "concatenateScaleMatrix"
							},
							{
								"shortdesc": "Concatenate a rotation matrix to a transformation matrix.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The matrix that is to be added to.",
											"datatype": {
												"type": {
													"#text": "Matrix",
													"@_href": "#/Matrix"
												}
											},
											"@_name": "matrix"
										},
										{
											"shortdesc": "Angle of rotation (in degrees)",
											"datatype": {
												"type": "number"
											},
											"@_name": "angle"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "concatenateRotationMatrix"
							},
							{
								"shortdesc": "Concatenate two transformation matrices.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The matrix that is to be added to.",
											"datatype": {
												"type": {
													"#text": "Matrix",
													"@_href": "#/Matrix"
												}
											},
											"@_name": "matrix"
										},
										{
											"shortdesc": "Second transformation matrix.",
											"datatype": {
												"type": {
													"#text": "Matrix",
													"@_href": "#/Matrix"
												}
											},
											"@_name": "secondMatrix"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "concatenateMatrix"
							},
							{
								"shortdesc": "Compares two matrices for equality.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "First transformation matrix to compare.",
											"datatype": {
												"type": {
													"#text": "Matrix",
													"@_href": "#/Matrix"
												}
											},
											"@_name": "matrix"
										},
										{
											"shortdesc": "Second transformation matrix.",
											"datatype": {
												"type": {
													"#text": "Matrix",
													"@_href": "#/Matrix"
												}
											},
											"@_name": "secondMatrix"
										}
									]
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "isEqualMatrix"
							},
							{
								"shortdesc": "Returns an identity matrix.",
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "getIdentityMatrix"
							},
							{
								"shortdesc": "Returns a rotation transformation matrix.",
								"parameters": {
									"parameter": {
										"shortdesc": "Angle of rotation (in degrees)",
										"datatype": {
											"type": "number",
											"value": 0
										},
										"@_name": "angle",
										"@_optional": "true"
									}
								},
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "getRotationMatrix"
							},
							{
								"shortdesc": "Returns a scale transformation matrix.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Horizontal scaling factor expressed as a percentage (100 = 100%)",
											"datatype": {
												"type": "number",
												"value": 100
											},
											"@_name": "scaleX",
											"@_optional": "true"
										},
										{
											"shortdesc": "Vertical scaling factor expressed as a percentage (100 = 100%)",
											"datatype": {
												"type": "number",
												"value": 100
											},
											"@_name": "scaleY",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "getScaleMatrix"
							},
							{
								"shortdesc": "Returns a translation matrix.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Horizontal transformation.",
											"datatype": {
												"type": "number",
												"value": 0
											},
											"@_name": "deltaX",
											"@_optional": "true"
										},
										{
											"shortdesc": "Vertical transformation.",
											"datatype": {
												"type": "number",
												"value": 0
											},
											"@_name": "deltaY",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "getTranslationMatrix"
							},
							{
								"shortdesc": "Open the specified document file.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The file to be opened.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "file"
										},
										{
											"shortdesc": "Choose color space only for documents saved with multiple color models (pre-Illustrator 9)",
											"datatype": {
												"type": {
													"#text": "DocumentColorSpace",
													"@_href": "#/DocumentColorSpace"
												}
											},
											"@_name": "documentColorSpace",
											"@_optional": "true"
										},
										{
											"shortdesc": "Options for opening a particular type of file.",
											"datatype": {
												"type": "any"
											},
											"@_name": "options",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Document",
										"@_href": "#/Document"
									}
								},
								"@_name": "open"
							},
							{
								"shortdesc": "Open the specified cloud document.",
								"parameters": {
									"parameter": {
										"shortdesc": "Path of the document to be opened from cloud.",
										"datatype": {
											"type": "string"
										},
										"@_name": "cloudPath"
									}
								},
								"datatype": {
									"type": {
										"#text": "Document",
										"@_href": "#/Document"
									}
								},
								"@_name": "openCloudDocument"
							},
							{
								"shortdesc": "Dump the PGF portion of ai file to txt file.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The AI file to be opened.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "file"
										},
										{
											"shortdesc": "Choose color space only for documents saved with multiple color models (pre-Illustrator 9)",
											"datatype": {
												"type": {
													"#text": "DocumentColorSpace",
													"@_href": "#/DocumentColorSpace"
												}
											},
											"@_name": "documentColorSpace",
											"@_optional": "true"
										},
										{
											"shortdesc": "Folder to save the output PGF file.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "pGFFile"
										}
									]
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "dumpPGFFile"
							},
							{
								"shortdesc": "Quit the application.",
								"@_name": "quit"
							},
							{
								"@_name": "beep"
							},
							{
								"shortdesc": "Translate the placeholder text to regular text. A method to enter unicode points in hex values.",
								"parameters": {
									"parameter": {
										"shortdesc": "The placeholder text to be translated.",
										"datatype": {
											"type": "string"
										},
										"@_name": "text"
									}
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "translatePlaceholderText"
							},
							{
								"shortdesc": "Get presets from the file.",
								"parameters": {
									"parameter": {
										"shortdesc": "File spec to import from.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "fileSpec"
									}
								},
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "showPresets"
							},
							{
								"shortdesc": "Load the color settings from the file. If the file is an empty file spec, the color management will be turned off.",
								"parameters": {
									"parameter": {
										"shortdesc": "File spec for the color settings.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "fileSpec"
									}
								},
								"@_name": "loadColorSettings"
							},
							{
								"shortdesc": "Get detailed info from the specified PPD file.",
								"parameters": {
									"parameter": {
										"shortdesc": "The model name of the PPD file.",
										"datatype": {
											"type": "string"
										},
										"@_name": "name"
									}
								},
								"datatype": {
									"type": {
										"#text": "PPDFileInfo",
										"@_href": "#/PPDFileInfo"
									}
								},
								"@_name": "getPPDFileInfo"
							},
							{
								"shortdesc": "Get the scriptable help group object that represents the search widget in the app bar.",
								"datatype": {
									"type": "any"
								},
								"@_name": "getScriptableHelpGroup"
							},
							{
								"shortdesc": "Converts a sample-component color from one color space to another.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The source color space.",
											"datatype": {
												"type": {
													"#text": "ImageColorSpace",
													"@_href": "#/ImageColorSpace"
												}
											},
											"@_name": "sourceColorSpace"
										},
										{
											"shortdesc": "The color to convert, an array of color components. First location of the array should contain alpha if source-has-alpha is true.",
											"datatype": {
												"type": "number",
												"array": ""
											},
											"@_name": "sourceColor"
										},
										{
											"shortdesc": "The destination color space.",
											"datatype": {
												"type": {
													"#text": "ImageColorSpace",
													"@_href": "#/ImageColorSpace"
												}
											},
											"@_name": "destColorSpace"
										},
										{
											"shortdesc": "The parameter which passes the purpose of conversion.",
											"datatype": {
												"type": {
													"#text": "ColorConvertPurpose",
													"@_href": "#/ColorConvertPurpose"
												}
											},
											"@_name": "colorConvertPurpose"
										},
										{
											"shortdesc": "True if alpha channel is present in source color.",
											"datatype": {
												"type": "bool",
												"value": false
											},
											"@_name": "sourceHasAlpha",
											"@_optional": "true"
										},
										{
											"shortdesc": "True if alpha channel is present in destination color.",
											"datatype": {
												"type": "bool",
												"value": false
											},
											"@_name": "destHasAlpha",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": "number",
									"array": ""
								},
								"@_name": "convertSampleColor"
							},
							{
								"shortdesc": "Generate Creative Suite ActionScript Wrappers in specified directory.",
								"parameters": {
									"parameter": {
										"shortdesc": "Location for the output files.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "$COMMON/javascript.xml#/File"
											}
										},
										"@_name": "outputFolder"
									}
								},
								"@_name": "reflectCSAW"
							},
							{
								"shortdesc": "Switches between workspaces.",
								"parameters": {
									"parameter": {
										"shortdesc": "Workspace Name.",
										"datatype": {
											"type": "string"
										},
										"@_name": "workspaceName"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "switchWorkspace"
							},
							{
								"shortdesc": "Deletes an existing workspace.",
								"parameters": {
									"parameter": {
										"shortdesc": "Workspace Name.",
										"datatype": {
											"type": "string"
										},
										"@_name": "workspaceName"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "deleteWorkspace"
							},
							{
								"shortdesc": "Saves a new workspace.",
								"parameters": {
									"parameter": {
										"shortdesc": "Workspace Name.",
										"datatype": {
											"type": "string"
										},
										"@_name": "workspaceName"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "saveWorkspace"
							},
							{
								"shortdesc": "Resets the current workspace.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "resetWorkspace"
							},
							{
								"shortdesc": "Is In Touch Workspace.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "isTouchWorkspace"
							},
							{
								"shortdesc": "Is user sharing the application usage data.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "isUserSharingAppUsageData"
							},
							{
								"shortdesc": "Select tool using toolname.",
								"parameters": {
									"parameter": {
										"shortdesc": "Tool Name.",
										"datatype": {
											"type": "string"
										},
										"@_name": "toolName"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "selectTool"
							},
							{
								"shortdesc": "Display learn panel with specific content.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Path of the manifest.",
											"datatype": {
												"type": "string"
											},
											"@_name": "manifest"
										},
										{
											"shortdesc": "Url of the html file to be displayed on learn panel.",
											"datatype": {
												"type": "string"
											},
											"@_name": "hTMLPage"
										}
									]
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "showLearnPanelWithContent"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Application",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A document.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is the file a stationery file?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "stationery",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The file associated with the document.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "fullName",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The active layer.",
								"datatype": {
									"type": {
										"#text": "Layer",
										"@_href": "#/Layer"
									}
								},
								"@_name": "activeLayer"
							},
							{
								"shortdesc": "The document's current view.",
								"datatype": {
									"type": {
										"#text": "View",
										"@_href": "#/View"
									}
								},
								"@_name": "activeView",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The bounds of the illustration excluding stroke width.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "geometricBounds",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The visible bounds of the illustration including stroke width.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "visibleBounds",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "rulerOrigin"
							},
							{
								"datatype": {
									"type": {
										"#text": "RulerUnits",
										"@_href": "#/RulerUnits"
									}
								},
								"@_name": "rulerUnits",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "pageOrigin"
							},
							{
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "cropBox"
							},
							{
								"datatype": {
									"type": {
										"#text": "CropOptions",
										"@_href": "#/CropOptions"
									}
								},
								"@_name": "cropStyle"
							},
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "width",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "height",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "bool"
								},
								"@_name": "showPlacedImages",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "number"
								},
								"@_name": "outputResolution",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "bool"
								},
								"@_name": "printTiles",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The selection within the document.",
								"datatype": {
									"type": "any"
								},
								"@_name": "selection"
							},
							{
								"datatype": {
									"type": "bool"
								},
								"@_name": "splitLongPaths",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "bool"
								},
								"@_name": "tileFullPages",
								"@_rwaccess": "readonly"
							},
							{
								"datatype": {
									"type": "bool"
								},
								"@_name": "useDefaultScreen",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The color space used for the document.",
								"datatype": {
									"type": {
										"#text": "DocumentColorSpace",
										"@_href": "#/DocumentColorSpace"
									}
								},
								"@_name": "documentColorSpace",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The document's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Path specification for the document.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "path",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is the document saved on cloud.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "isCloudDocument",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Path specification for the cloud document.",
								"datatype": {
									"type": "string"
								},
								"@_name": "cloudPath",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Has the document been saved?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "saved"
							},
							{
								"shortdesc": "Should a new path be filled?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "defaultFilled"
							},
							{
								"shortdesc": "Default fill color.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "defaultFillColor"
							},
							{
								"shortdesc": "Will art beneath a filled object be overprinted by default?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "defaultFillOverprint"
							},
							{
								"shortdesc": "Should a new path be stroked?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "defaultStroked"
							},
							{
								"shortdesc": "Default stroke color.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "defaultStrokeColor"
							},
							{
								"shortdesc": "Will art beneath a stroked object be overprinted by default?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "defaultStrokeOverprint"
							},
							{
								"shortdesc": "Default width of stroke.",
								"datatype": {
									"type": "number"
								},
								"@_name": "defaultStrokeWidth"
							},
							{
								"shortdesc": "Default dash lengths (set to {} for a solid line)",
								"datatype": {
									"type": "number",
									"array": ""
								},
								"@_name": "defaultStrokeDashes"
							},
							{
								"shortdesc": "The default distance into the dash pattern at which the pattern should be started.",
								"datatype": {
									"type": "number"
								},
								"@_name": "defaultStrokeDashOffset"
							},
							{
								"shortdesc": "Default type of line capping.",
								"datatype": {
									"type": {
										"#text": "StrokeCap",
										"@_href": "#/StrokeCap"
									}
								},
								"@_name": "defaultStrokeCap"
							},
							{
								"shortdesc": "Default type of joints.",
								"datatype": {
									"type": {
										"#text": "StrokeJoin",
										"@_href": "#/StrokeJoin"
									}
								},
								"@_name": "defaultStrokeJoin"
							},
							{
								"shortdesc": "Specifies whether a join is mitered (pointed) or beveled (squared-off) by default.",
								"datatype": {
									"type": "number"
								},
								"@_name": "defaultStrokeMiterLimit"
							},
							{
								"shortdesc": "The active data set.",
								"datatype": {
									"type": {
										"#text": "DataSet",
										"@_href": "#/DataSet"
									}
								},
								"@_name": "activeDataSet"
							},
							{
								"shortdesc": "The locked variables.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "variablesLocked"
							},
							{
								"shortdesc": "The XMP packet string associated with the document.",
								"datatype": {
									"type": "string"
								},
								"@_name": "XMPString"
							},
							{
								"shortdesc": "The document raster effects settings.",
								"datatype": {
									"type": {
										"#text": "RasterEffectOptions",
										"@_href": "#/RasterEffectOptions"
									}
								},
								"@_name": "rasterEffectSettings"
							},
							{
								"shortdesc": "The name of the color profile of the document.",
								"datatype": {
									"type": "string"
								},
								"@_name": "colorProfileName",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The scale factor of the document.",
								"datatype": {
									"type": "number"
								},
								"@_name": "scaleFactor",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All assets in the document.",
								"datatype": {
									"type": {
										"#text": "Assets",
										"@_href": "#/Assets"
									}
								},
								"@_name": "assets",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All artboards in the document.",
								"datatype": {
									"type": {
										"#text": "Artboards",
										"@_href": "#/Artboards"
									}
								},
								"@_name": "artboards",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The compound path artwork in this collection.",
								"datatype": {
									"type": {
										"#text": "CompoundPathItems",
										"@_href": "#/CompoundPathItems"
									}
								},
								"@_name": "compoundPathItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The layers in this document.",
								"datatype": {
									"type": {
										"#text": "Layers",
										"@_href": "#/Layers"
									}
								},
								"@_name": "layers",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the artwork in this document.",
								"datatype": {
									"type": {
										"#text": "PageItems",
										"@_href": "#/PageItems"
									}
								},
								"@_name": "pageItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The path artwork in this document.",
								"datatype": {
									"type": {
										"#text": "PathItems",
										"@_href": "#/PathItems"
									}
								},
								"@_name": "pathItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The tags in this document.",
								"datatype": {
									"type": {
										"#text": "Tags",
										"@_href": "#/Tags"
									}
								},
								"@_name": "tags",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The views in this document.",
								"datatype": {
									"type": {
										"#text": "Views",
										"@_href": "#/Views"
									}
								},
								"@_name": "views",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The raster art items in this document.",
								"datatype": {
									"type": {
										"#text": "RasterItems",
										"@_href": "#/RasterItems"
									}
								},
								"@_name": "rasterItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The placed art items in this document.",
								"datatype": {
									"type": {
										"#text": "PlacedItems",
										"@_href": "#/PlacedItems"
									}
								},
								"@_name": "placedItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The embedded art items in this layer.",
								"datatype": {
									"type": {
										"#text": "EmbeddedItems",
										"@_href": "#/EmbeddedItems"
									}
								},
								"@_name": "embeddedItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The mesh art items in this document.",
								"datatype": {
									"type": {
										"#text": "MeshItems",
										"@_href": "#/MeshItems"
									}
								},
								"@_name": "meshItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The plugin art items in this document.",
								"datatype": {
									"type": {
										"#text": "PluginItems",
										"@_href": "#/PluginItems"
									}
								},
								"@_name": "pluginItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The graph art items in this document.",
								"datatype": {
									"type": {
										"#text": "GraphItems",
										"@_href": "#/GraphItems"
									}
								},
								"@_name": "graphItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The non-native art items in this document.",
								"datatype": {
									"type": {
										"#text": "NonNativeItems",
										"@_href": "#/NonNativeItems"
									}
								},
								"@_name": "nonNativeItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The group items in this document.",
								"datatype": {
									"type": {
										"#text": "GroupItems",
										"@_href": "#/GroupItems"
									}
								},
								"@_name": "groupItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text frame items in this document.",
								"datatype": {
									"type": {
										"#text": "TextFrameItems",
										"@_href": "#/TextFrameItems"
									}
								},
								"@_name": "textFrames",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The story items in this document.",
								"datatype": {
									"type": {
										"#text": "Stories",
										"@_href": "#/Stories"
									}
								},
								"@_name": "stories",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of character styles in this document.",
								"datatype": {
									"type": {
										"#text": "CharacterStyles",
										"@_href": "#/CharacterStyles"
									}
								},
								"@_name": "characterStyles",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of paragraph styles in this document.",
								"datatype": {
									"type": {
										"#text": "ParagraphStyles",
										"@_href": "#/ParagraphStyles"
									}
								},
								"@_name": "paragraphStyles",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The Kinsoku set.",
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "kinsokuSet",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The Mojikumi set.",
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "mojikumiSet",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The swatches in this document.",
								"datatype": {
									"type": {
										"#text": "Swatches",
										"@_href": "#/Swatches"
									}
								},
								"@_name": "swatches",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The Swatch Groups in this document.",
								"datatype": {
									"type": {
										"#text": "SwatchGroups",
										"@_href": "#/SwatchGroups"
									}
								},
								"@_name": "swatchGroups",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The gradients available in this document.",
								"datatype": {
									"type": {
										"#text": "Gradients",
										"@_href": "#/Gradients"
									}
								},
								"@_name": "gradients",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The patterns available in this document.",
								"datatype": {
									"type": {
										"#text": "Patterns",
										"@_href": "#/Patterns"
									}
								},
								"@_name": "patterns",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The custom spot colors available in this document.",
								"datatype": {
									"type": {
										"#text": "Spots",
										"@_href": "#/Spots"
									}
								},
								"@_name": "spots",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symbols defined in this document.",
								"datatype": {
									"type": {
										"#text": "Symbols",
										"@_href": "#/Symbols"
									}
								},
								"@_name": "symbols",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symbol items in this document.",
								"datatype": {
									"type": {
										"#text": "SymbolItems",
										"@_href": "#/SymbolItems"
									}
								},
								"@_name": "symbolItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The brushes defined in this document.",
								"datatype": {
									"type": {
										"#text": "Brushes",
										"@_href": "#/Brushes"
									}
								},
								"@_name": "brushes",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The graphic styles defined in this document.",
								"datatype": {
									"type": {
										"#text": "ArtStyles",
										"@_href": "#/ArtStyles"
									}
								},
								"@_name": "graphicStyles",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The variables defined in this document.",
								"datatype": {
									"type": {
										"#text": "Variables",
										"@_href": "#/Variables"
									}
								},
								"@_name": "variables",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The list of inks in this document.",
								"datatype": {
									"type": {
										"#text": "Ink",
										"@_href": "#/Ink"
									},
									"array": ""
								},
								"@_name": "inkList",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The data sets defined in this document.",
								"datatype": {
									"type": {
										"#text": "DataSets",
										"@_href": "#/DataSets"
									}
								},
								"@_name": "dataSets",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text frame items in this story.",
								"datatype": {
									"type": {
										"#text": "LegacyTextItems",
										"@_href": "#/LegacyTextItems"
									}
								},
								"@_name": "legacyTextItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symmetry repeat items in this document.",
								"datatype": {
									"type": {
										"#text": "SymmetryRepeatItems",
										"@_href": "#/SymmetryRepeatItems"
									}
								},
								"@_name": "symmetryRepeatItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The radial repeat items in this document.",
								"datatype": {
									"type": {
										"#text": "RadialRepeatItems",
										"@_href": "#/RadialRepeatItems"
									}
								},
								"@_name": "radialRepeatItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The grid repeat items in this document.",
								"datatype": {
									"type": {
										"#text": "GridRepeatItems",
										"@_href": "#/GridRepeatItems"
									}
								},
								"@_name": "gridRepeatItems",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Close the specified document(s)",
								"parameters": {
									"parameter": {
										"shortdesc": "Specifies whether changes should be saved before closing.",
										"datatype": {
											"type": {
												"#text": "SaveOptions",
												"@_href": "#/SaveOptions"
											}
										},
										"@_name": "saving",
										"@_optional": "true"
									}
								},
								"@_name": "close"
							},
							{
								"shortdesc": "Process a gesture based on input points.",
								"parameters": {
									"parameter": {
										"shortdesc": "File Path containing points constituting the gesture.",
										"datatype": {
											"type": "string"
										},
										"@_name": "gesturePointsFile"
									}
								},
								"@_name": "processGesture"
							},
							{
								"shortdesc": "Save the document.",
								"@_name": "save"
							},
							{
								"shortdesc": "Save the document with specific save options.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The file to save the document in.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "saveIn"
										},
										{
											"shortdesc": "Options for the file type specified.",
											"datatype": {
												"type": "any"
											},
											"@_name": "options",
											"@_optional": "true"
										}
									]
								},
								"@_name": "saveAs"
							},
							{
								"shortdesc": "Save the document to cloud at the specified path.",
								"parameters": {
									"parameter": {
										"shortdesc": "Path of the document to be saved on cloud.",
										"datatype": {
											"type": "string"
										},
										"@_name": "cloudPath"
									}
								},
								"@_name": "saveToCloud"
							},
							{
								"shortdesc": "Print the document.",
								"parameters": {
									"parameter": {
										"shortdesc": "Print options.",
										"datatype": {
											"type": {
												"#text": "PrintOptions",
												"@_href": "#/PrintOptions"
											}
										},
										"@_name": "options",
										"@_optional": "true"
									}
								},
								"@_name": "print"
							},
							{
								"shortdesc": "Export the specified document/asset(s)/artboard(s)",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The folder where the exported documents/assets/artboards are saved.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "exportFolder"
										},
										{
											"shortdesc": "The file type in which the document is exported.",
											"datatype": {
												"type": {
													"#text": "ExportForScreensType",
													"@_href": "#/ExportForScreensType"
												}
											},
											"@_name": "exportFormat"
										},
										{
											"shortdesc": "Options for the file type specified.",
											"datatype": {
												"type": "any"
											},
											"@_name": "options",
											"@_optional": "true"
										},
										{
											"shortdesc": "What to export.",
											"datatype": {
												"type": {
													"#text": "ExportForScreensItemToExport",
													"@_href": "#/ExportForScreensItemToExport"
												}
											},
											"@_name": "itemToExport",
											"@_optional": "true"
										},
										{
											"shortdesc": "String prepended to each file name.",
											"datatype": {
												"type": "string"
											},
											"@_name": "fileNamePrefix",
											"@_optional": "true"
										}
									]
								},
								"@_name": "exportForScreens"
							},
							{
								"shortdesc": "Export the specified document(s)",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The file to export the document to.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "exportFile"
										},
										{
											"shortdesc": "The file type to export the document as.",
											"datatype": {
												"type": {
													"#text": "ExportType",
													"@_href": "#/ExportType"
												}
											},
											"@_name": "exportFormat"
										},
										{
											"shortdesc": "Options for the file type specified.",
											"datatype": {
												"type": "any"
											},
											"@_name": "options",
											"@_optional": "true"
										}
									]
								},
								"@_name": "exportFile"
							},
							{
								"shortdesc": "Convert the document to Large Canvas Document.",
								"@_name": "convertToLargeCanvas"
							},
							{
								"shortdesc": "Export the selection as PNG file.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The file to export the selection to.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "exportFile"
										},
										{
											"shortdesc": "Options for the PNG24 export.",
											"datatype": {
												"type": "any"
											},
											"@_name": "options",
											"@_optional": "true"
										}
									]
								},
								"@_name": "exportSelectionAsPNG"
							},
							{
								"shortdesc": "Export the selection as Ai file.",
								"parameters": {
									"parameter": {
										"shortdesc": "The file to export the selection to.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "exportFile"
									}
								},
								"@_name": "exportSelectionAsAi"
							},
							{
								"shortdesc": "Write the document to a file as a library of specified type.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The file to write the library in.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "file"
										},
										{
											"shortdesc": "Type of library to write as.",
											"datatype": {
												"type": {
													"#text": "LibraryType",
													"@_href": "#/LibraryType"
												}
											},
											"@_name": "libraryType"
										}
									]
								},
								"@_name": "writeAsLibrary"
							},
							{
								"shortdesc": "Import the file into current Ai document.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The file to import in the current document.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "importFile"
										},
										{
											"shortdesc": "Is AssetLiveLinked.",
											"datatype": {
												"type": "bool"
											},
											"@_name": "isLinked"
										},
										{
											"shortdesc": "For Internal Use.",
											"datatype": {
												"type": "string"
											},
											"@_name": "libraryName",
											"@_optional": "true"
										},
										{
											"shortdesc": "For Internal Use.",
											"datatype": {
												"type": "string"
											},
											"@_name": "itemName",
											"@_optional": "true"
										},
										{
											"shortdesc": "For Internal Use.",
											"datatype": {
												"type": "string"
											},
											"@_name": "elementRef",
											"@_optional": "true"
										},
										{
											"shortdesc": "For Internal Use.",
											"datatype": {
												"type": "number"
											},
											"@_name": "modifiedTime",
											"@_optional": "true"
										},
										{
											"shortdesc": "For Internal Use.",
											"datatype": {
												"type": "number"
											},
											"@_name": "creationTime",
											"@_optional": "true"
										},
										{
											"shortdesc": "For Internal Use.",
											"datatype": {
												"type": "string"
											},
											"@_name": "adobeStockId",
											"@_optional": "true"
										},
										{
											"shortdesc": "For Internal Use.",
											"datatype": {
												"type": "string"
											},
											"@_name": "adobeStockLicense",
											"@_optional": "true"
										},
										{
											"shortdesc": "Whether or not to load the imported file to placegun.",
											"datatype": {
												"type": "bool"
											},
											"@_name": "shouldLoadToPlaceGun",
											"@_optional": "true"
										}
									]
								},
								"@_name": "importFile"
							},
							{
								"shortdesc": "Activate the first window associated with the document.",
								"@_name": "activate"
							},
							{
								"shortdesc": "Import a library containing datasets, variables and their associated dynamic data. Importing variables will overwrite existing variables and datasets.",
								"parameters": {
									"parameter": {
										"shortdesc": "File spec to import from.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "fileSpec"
									}
								},
								"@_name": "importVariables"
							},
							{
								"shortdesc": "Save datasets into an XML library. The datasets contain variables and their associated dynamic data.",
								"parameters": {
									"parameter": {
										"shortdesc": "File spec to export to.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "file"
									}
								},
								"@_name": "exportVariables"
							},
							{
								"shortdesc": "Load the character styles from the Illustrator file.",
								"parameters": {
									"parameter": {
										"shortdesc": "File spec to import from.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "fileSpec"
									}
								},
								"@_name": "importCharacterStyles"
							},
							{
								"shortdesc": "Load the paragraph styles from the Illustrator file.",
								"parameters": {
									"parameter": {
										"shortdesc": "File spec to import from.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "fileSpec"
									}
								},
								"@_name": "importParagraphStyles"
							},
							{
								"shortdesc": "Apply the named print preset from the file to the current print setting.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The name of a print preset to import.",
											"datatype": {
												"type": "string"
											},
											"@_name": "printPreset"
										},
										{
											"shortdesc": "File to import from.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "fileSpec"
										}
									]
								},
								"@_name": "importPrintPreset"
							},
							{
								"shortdesc": "Export the current print setting to the preset file.",
								"parameters": {
									"parameter": {
										"shortdesc": "File to export to.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "file"
									}
								},
								"@_name": "exportPrintPreset"
							},
							{
								"shortdesc": "Load all PDF presets from a file.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "File to import from.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "fileSpec"
										},
										{
											"shortdesc": "Should existing editable presets be replaced?",
											"datatype": {
												"type": "bool",
												"value": false
											},
											"@_name": "replacingPreset",
											"@_optional": "true"
										}
									]
								},
								"@_name": "importPDFPreset"
							},
							{
								"shortdesc": "Save all PDF presets to a file.",
								"parameters": {
									"parameter": {
										"shortdesc": "File to export to.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "file"
									}
								},
								"@_name": "exportPDFPreset"
							},
							{
								"shortdesc": "Loads mentioned perspective grid preset, if preset name is specified, else loads all(if no preset name is specified) presets, from the specified file.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "File to import from.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "fileSpec"
										},
										{
											"shortdesc": "Name of perspective grid preset.",
											"datatype": {
												"type": "string",
												"value": ""
											},
											"@_name": "perspectivePreset",
											"@_optional": "true"
										}
									]
								},
								"@_name": "importPerspectiveGridPreset"
							},
							{
								"shortdesc": "Saves all perspective grid presets to a file.",
								"parameters": {
									"parameter": {
										"shortdesc": "File to export to.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "file"
									}
								},
								"@_name": "exportPerspectiveGridPreset"
							},
							{
								"shortdesc": "Capture the artwork content inside the clip bound as raster image, and write out the captured image data into the target image file.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The file to which the captured image should be written.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "imageFile"
										},
										{
											"shortdesc": "The rectangular region of the artwork for image capture. If the parameter is omitted, the entire artwork bound is captured.",
											"datatype": {
												"type": {
													"#text": "Rect",
													"@_href": "#/Rect"
												}
											},
											"@_name": "clipBounds",
											"@_optional": "true"
										},
										{
											"shortdesc": "Describes the image capture options.",
											"datatype": {
												"type": {
													"#text": "ImageCaptureOptions",
													"@_href": "#/ImageCaptureOptions"
												}
											},
											"@_name": "options",
											"@_optional": "true"
										}
									]
								},
								"@_name": "imageCapture"
							},
							{
								"shortdesc": "Capture the current document window to the target TIFF image file.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The TIFF file to which the captured image should be written.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "imageFile"
										},
										{
											"shortdesc": "The size to make the window before capture.",
											"datatype": {
												"type": {
													"#text": "Point",
													"@_href": "#/Point"
												}
											},
											"@_name": "windowSize"
										}
									]
								},
								"@_name": "windowCapture"
							},
							{
								"shortdesc": "Rasterize the source art(s) within the specified clip bounds. The source art(s) are disposed as a result of the rasterization.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The page item(s) to be rasterized.",
											"datatype": {
												"type": "any"
											},
											"@_name": "sourceArt"
										},
										{
											"shortdesc": "The rectangular region of the artwork for the rasterization. If the parameter is omitted, the bounds of the source art(s) is used instead.",
											"datatype": {
												"type": {
													"#text": "Rect",
													"@_href": "#/Rect"
												}
											},
											"@_name": "clipBounds",
											"@_optional": "true"
										},
										{
											"shortdesc": "Describes the rasterization options.",
											"datatype": {
												"type": {
													"#text": "RasterizeOptions",
													"@_href": "#/RasterizeOptions"
												}
											},
											"@_name": "options",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PageItem",
										"@_href": "#/PageItem"
									}
								},
								"@_name": "rasterize"
							},
							{
								"shortdesc": "Rearrange Artboards in the document.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Layout of artboards for rearrangement.",
											"datatype": {
												"type": {
													"#text": "DocumentArtboardLayout",
													"@_href": "#/DocumentArtboardLayout"
												},
												"value": "DocumentArtboardLayout.GridByRow"
											},
											"@_name": "artboardLayout",
											"@_optional": "true"
										},
										{
											"shortdesc": "Number of rows (for rows layout) OR column(for column layouts)of artboards.Range is 1 to (docNumArtboards - 1) or 1 for single row or column layouts.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												},
												"value": 1
											},
											"@_name": "artboardRowsOrCols",
											"@_optional": "true"
										},
										{
											"shortdesc": "Spacing between artboards.",
											"datatype": {
												"type": "number",
												"value": 20
											},
											"@_name": "artboardSpacing",
											"@_optional": "true"
										},
										{
											"shortdesc": "Whether to move artwork with artboards.",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "artboardMoveArtwork",
											"@_optional": "true"
										}
									]
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "rearrangeArtboards"
							},
							{
								"shortdesc": "Select art objects in active artboard.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "selectObjectsOnActiveArtboard"
							},
							{
								"shortdesc": "Change the artboard to selected art bounds.",
								"parameters": {
									"parameter": {
										"shortdesc": "The index of the artboard to update.",
										"datatype": {
											"type": {
												"#text": "Int32",
												"@_href": "#/Int32"
											}
										},
										"@_name": "index",
										"@_optional": "true"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "fitArtboardToSelectedArt"
							},
							{
								"shortdesc": "Converts the coordinate system of a single point from one coordinate system to another.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The Coordinate to convert.",
											"datatype": {
												"type": {
													"#text": "Point",
													"@_href": "#/Point"
												}
											},
											"@_name": "coordinate"
										},
										{
											"shortdesc": "The source coordinate system.",
											"datatype": {
												"type": {
													"#text": "CoordinateSystem",
													"@_href": "#/CoordinateSystem"
												}
											},
											"@_name": "source"
										},
										{
											"shortdesc": "The destination coordinate system.",
											"datatype": {
												"type": {
													"#text": "CoordinateSystem",
													"@_href": "#/CoordinateSystem"
												}
											},
											"@_name": "destination"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "convertCoordinate"
							},
							{
								"shortdesc": "Selects a predefined preset to define grid for the current document.",
								"parameters": {
									"parameter": {
										"shortdesc": "Name of perspective grid preset.",
										"datatype": {
											"type": "string"
										},
										"@_name": "perspectivePreset"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "selectPerspectivePreset"
							},
							{
								"shortdesc": "Shows the current active perspective grid for the document, if no active perspective grid then shows the default perspective grid for the document.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "showPerspectiveGrid"
							},
							{
								"shortdesc": "Hides the current active perspective grid for the document, if there is visible perspective grid.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "hidePerspectiveGrid"
							},
							{
								"shortdesc": "Gets the active plane of the active perspective grid of the document.",
								"datatype": {
									"type": {
										"#text": "PerspectiveGridPlaneType",
										"@_href": "#/PerspectiveGridPlaneType"
									}
								},
								"@_name": "getPerspectiveActivePlane"
							},
							{
								"shortdesc": "Sets the active perspective plane for the active grid of the document.",
								"parameters": {
									"parameter": {
										"shortdesc": "Type of perspective grid plane.",
										"datatype": {
											"type": {
												"#text": "PerspectiveGridPlaneType",
												"@_href": "#/PerspectiveGridPlaneType"
											}
										},
										"@_name": "perspectiveGridPlane"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "setPerspectiveActivePlane"
							},
							{
								"shortdesc": "Retrieves the pageitem using Uuid.",
								"parameters": {
									"parameter": {
										"shortdesc": "Uuid of pageitem.",
										"datatype": {
											"type": "string"
										},
										"@_name": "uuid"
									}
								},
								"datatype": {
									"type": {
										"#text": "PageItem",
										"@_href": "#/PageItem"
									}
								},
								"@_name": "getPageItemFromUuid"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Document",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A layer.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is the layer visible?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "visible"
							},
							{
								"shortdesc": "Is the layer editable?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "locked"
							},
							{
								"shortdesc": "Is the layer printable?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "printable"
							},
							{
								"shortdesc": "Is any artwork in this layer selected? Setting this property to false deselects all artwork in the layer.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "hasSelectedArtwork"
							},
							{
								"shortdesc": "Is the layer rendered in preview mode?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "preview"
							},
							{
								"shortdesc": "Is rendered as dimmed in this layer?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "dimPlacedImages"
							},
							{
								"shortdesc": "Color used when outlining artwork in this layer.",
								"datatype": {
									"type": {
										"#text": "RGBColor",
										"@_href": "#/RGBColor"
									}
								},
								"@_name": "color"
							},
							{
								"shortdesc": "The layer's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The layer's opacity (between 0.0 and 100.0)",
								"datatype": {
									"type": "number"
								},
								"@_name": "opacity"
							},
							{
								"shortdesc": "The drawing order of the layer.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "zOrderPosition",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The absolute drawing order of the layer.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "absoluteZOrderPosition",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is the layer sliced (default: false)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "sliced"
							},
							{
								"shortdesc": "The mode used when compositing an object.",
								"datatype": {
									"type": {
										"#text": "BlendModes",
										"@_href": "#/BlendModes"
									}
								},
								"@_name": "blendingMode"
							},
							{
								"shortdesc": "Is the artwork isolated.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "isIsolated"
							},
							{
								"shortdesc": "Is the artwork used to create a knockout.",
								"datatype": {
									"type": {
										"#text": "KnockoutState",
										"@_href": "#/KnockoutState"
									}
								},
								"@_name": "artworkKnockout"
							},
							{
								"shortdesc": "The compound path artwork in this layer.",
								"datatype": {
									"type": {
										"#text": "CompoundPathItems",
										"@_href": "#/CompoundPathItems"
									}
								},
								"@_name": "compoundPathItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the artwork in this layer.",
								"datatype": {
									"type": {
										"#text": "PageItems",
										"@_href": "#/PageItems"
									}
								},
								"@_name": "pageItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The path artwork in this layer.",
								"datatype": {
									"type": {
										"#text": "PathItems",
										"@_href": "#/PathItems"
									}
								},
								"@_name": "pathItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The raster art items in this layer.",
								"datatype": {
									"type": {
										"#text": "RasterItems",
										"@_href": "#/RasterItems"
									}
								},
								"@_name": "rasterItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The placed art items in this layer.",
								"datatype": {
									"type": {
										"#text": "PlacedItems",
										"@_href": "#/PlacedItems"
									}
								},
								"@_name": "placedItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The mesh art items in this layer.",
								"datatype": {
									"type": {
										"#text": "MeshItems",
										"@_href": "#/MeshItems"
									}
								},
								"@_name": "meshItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The plugin art items in this layer.",
								"datatype": {
									"type": {
										"#text": "PluginItems",
										"@_href": "#/PluginItems"
									}
								},
								"@_name": "pluginItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The graph art items in this layer.",
								"datatype": {
									"type": {
										"#text": "GraphItems",
										"@_href": "#/GraphItems"
									}
								},
								"@_name": "graphItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The non-native art items in this layer.",
								"datatype": {
									"type": {
										"#text": "NonNativeItems",
										"@_href": "#/NonNativeItems"
									}
								},
								"@_name": "nonNativeItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The group items in this layer.",
								"datatype": {
									"type": {
										"#text": "GroupItems",
										"@_href": "#/GroupItems"
									}
								},
								"@_name": "groupItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text frame items in this layer.",
								"datatype": {
									"type": {
										"#text": "TextFrameItems",
										"@_href": "#/TextFrameItems"
									}
								},
								"@_name": "textFrames",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Nested layers.",
								"datatype": {
									"type": {
										"#text": "Layers",
										"@_href": "#/Layers"
									}
								},
								"@_name": "layers",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symbol items in this layer.",
								"datatype": {
									"type": {
										"#text": "SymbolItems",
										"@_href": "#/SymbolItems"
									}
								},
								"@_name": "symbolItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text frame items in this story.",
								"datatype": {
									"type": {
										"#text": "LegacyTextItems",
										"@_href": "#/LegacyTextItems"
									}
								},
								"@_name": "legacyTextItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symmetry repeat items in this layer.",
								"datatype": {
									"type": {
										"#text": "SymmetryRepeatItems",
										"@_href": "#/SymmetryRepeatItems"
									}
								},
								"@_name": "symmetryRepeatItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The radial repeat items in this layer.",
								"datatype": {
									"type": {
										"#text": "RadialRepeatItems",
										"@_href": "#/RadialRepeatItems"
									}
								},
								"@_name": "radialRepeatItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The grid repeat items in this layer.",
								"datatype": {
									"type": {
										"#text": "GridRepeatItems",
										"@_href": "#/GridRepeatItems"
									}
								},
								"@_name": "gridRepeatItems",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Layer",
										"@_href": "#/Layer"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Arranges the layer relative to other layers.",
								"parameters": {
									"parameter": {
										"shortdesc": "How to arrange the layer.",
										"datatype": {
											"type": {
												"#text": "ZOrderMethod",
												"@_href": "#/ZOrderMethod"
											}
										},
										"@_name": "zOrderCmd"
									}
								},
								"@_name": "zOrder"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Layer",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A view.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The bounding rectangle of this view.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "bounds",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The center point of this view.",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "centerPoint"
							},
							{
								"shortdesc": "The zoom factor of this view.",
								"datatype": {
									"type": "number"
								},
								"@_name": "zoom"
							},
							{
								"shortdesc": "The zoom factor of this view that is visible to user.",
								"datatype": {
									"type": "number"
								},
								"@_name": "visibleZoom"
							},
							{
								"shortdesc": "The rotation angle of this view.",
								"datatype": {
									"type": "number"
								},
								"@_name": "rotate"
							},
							{
								"shortdesc": "The mode of display.",
								"datatype": {
									"type": {
										"#text": "ScreenMode",
										"@_href": "#/ScreenMode"
									}
								},
								"@_name": "screenMode"
							}
						],
						"@_type": "instance"
					},
					"@_name": "View",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A gradient.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The gradient type.",
								"datatype": {
									"type": {
										"#text": "GradientType",
										"@_href": "#/GradientType"
									}
								},
								"@_name": "type"
							},
							{
								"shortdesc": "The gradient's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The stops in this gradient.",
								"datatype": {
									"type": {
										"#text": "GradientStops",
										"@_href": "#/GradientStops"
									}
								},
								"@_name": "gradientStops",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Gradient",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A gradient stop.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Midpoint key value in percent.",
								"datatype": {
									"type": "number",
									"min": 13,
									"max": 87
								},
								"@_name": "midPoint"
							},
							{
								"shortdesc": "Location of color in the blend (in percent)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100
								},
								"@_name": "rampPoint"
							},
							{
								"shortdesc": "The color linked to this gradient stop.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "color"
							},
							{
								"shortdesc": "The opacity (between 0.0 and 100.0) value for the gradient stop.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100
								},
								"@_name": "opacity"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "GradientStop",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Preferences for Illustrator.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Options to use when opening or placing a Photoshop file.",
								"datatype": {
									"type": {
										"#text": "OpenOptionsPhotoshop",
										"@_href": "#/OpenOptionsPhotoshop"
									}
								},
								"@_name": "photoshopFileOptions",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Options to use when opening or placing a PDF file.",
								"datatype": {
									"type": {
										"#text": "OpenOptionsPDF",
										"@_href": "#/OpenOptionsPDF"
									}
								},
								"@_name": "PDFFileOptions",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Options to use when opening or placing a AutoCAD file.",
								"datatype": {
									"type": {
										"#text": "OpenOptionsAutoCAD",
										"@_href": "#/OpenOptionsAutoCAD"
									}
								},
								"@_name": "AutoCADFileOptions",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Retrieve the value of the application preference key as boolean.",
								"parameters": {
									"parameter": {
										"shortdesc": "The preference key.",
										"datatype": {
											"type": "string"
										},
										"@_name": "key"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "getBooleanPreference"
							},
							{
								"shortdesc": "Set the value of the application preference key as boolean.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The preference key.",
											"datatype": {
												"type": "string"
											},
											"@_name": "key"
										},
										{
											"shortdesc": "The boolean value of the preference key.",
											"datatype": {
												"type": "bool"
											},
											"@_name": "value"
										}
									]
								},
								"@_name": "setBooleanPreference"
							},
							{
								"shortdesc": "Retrieve the value of the application preference key as integer.",
								"parameters": {
									"parameter": {
										"shortdesc": "The preference key.",
										"datatype": {
											"type": "string"
										},
										"@_name": "key"
									}
								},
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "getIntegerPreference"
							},
							{
								"shortdesc": "Set the value of the application preference key as integer.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The preference key.",
											"datatype": {
												"type": "string"
											},
											"@_name": "key"
										},
										{
											"shortdesc": "The boolean value of the preference key.",
											"datatype": {
												"type": {
													"#text": "Int32",
													"@_href": "#/Int32"
												}
											},
											"@_name": "value"
										}
									]
								},
								"@_name": "setIntegerPreference"
							},
							{
								"shortdesc": "Retrieve the value of the application preference key as real number.",
								"parameters": {
									"parameter": {
										"shortdesc": "The preference key.",
										"datatype": {
											"type": "string"
										},
										"@_name": "key"
									}
								},
								"datatype": {
									"type": "number"
								},
								"@_name": "getRealPreference"
							},
							{
								"shortdesc": "Set the value of the application preference key as real number.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The preference key.",
											"datatype": {
												"type": "string"
											},
											"@_name": "key"
										},
										{
											"shortdesc": "The real value of the preference key.",
											"datatype": {
												"type": "number"
											},
											"@_name": "value"
										}
									]
								},
								"@_name": "setRealPreference"
							},
							{
								"shortdesc": "Retrieve the value of the application preference key as string type.",
								"parameters": {
									"parameter": {
										"shortdesc": "The preference key.",
										"datatype": {
											"type": "string"
										},
										"@_name": "key"
									}
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "getStringPreference"
							},
							{
								"shortdesc": "Set the value of the application preference key as string type.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The preference key.",
											"datatype": {
												"type": "string"
											},
											"@_name": "key"
										},
										{
											"shortdesc": "The string value of the preference key.",
											"datatype": {
												"type": "string"
											},
											"@_name": "value"
										}
									]
								},
								"@_name": "setStringPreference"
							},
							{
								"shortdesc": "Delete the application preference key.",
								"parameters": {
									"parameter": {
										"shortdesc": "The preference key.",
										"datatype": {
											"type": "string"
										},
										"@_name": "key"
									}
								},
								"@_name": "removePreference"
							},
							{
								"shortdesc": "Checks whether the application preference key exists.",
								"parameters": {
									"parameter": {
										"shortdesc": "The preference key.",
										"datatype": {
											"type": "string"
										},
										"@_name": "key"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "preferenceExists"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Preferences",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A custom color.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The custom color's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "color"
							},
							{
								"shortdesc": "Type of the custom color.",
								"datatype": {
									"type": {
										"#text": "ColorModel",
										"@_href": "#/ColorModel"
									}
								},
								"@_name": "colorType"
							},
							{
								"shortdesc": "Kind of the spot color (i.e. RGB, CMYK or LAB), it is the name of color kind contained in spot.",
								"datatype": {
									"type": {
										"#text": "SpotColorKind",
										"@_href": "#/SpotColorKind"
									}
								},
								"@_name": "spotKind",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Gets the internal color of a spot.",
								"datatype": {
									"type": "number",
									"array": ""
								},
								"@_name": "getInternalColor"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Spot",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Dynamic object used to create data-driven graphics.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The variable's type.",
								"datatype": {
									"type": {
										"#text": "VariableKind",
										"@_href": "#/VariableKind"
									}
								},
								"@_name": "kind"
							},
							{
								"shortdesc": "The name of this variable.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "All the artwork in this document.",
								"datatype": {
									"type": {
										"#text": "PageItems",
										"@_href": "#/PageItems"
									}
								},
								"@_name": "pageItems",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Variable",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A set of variables and their associated dynamic data which will be used for dynamic publishing.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The name of this dataset.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Displays the dynamic data that has been captured in the dataset.",
								"@_name": "display"
							},
							{
								"shortdesc": "Re-apply the dynamic data of the active dataset to the artboard.",
								"@_name": "update"
							}
						],
						"@_type": "instance"
					},
					"@_name": "DataSet",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A color swatch.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The swatch's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The color information of the swatch.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "color"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Swatch",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A Swatch group.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Name of the swatch group.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Add a swatch to the group.",
								"parameters": {
									"parameter": {
										"shortdesc": "The swatch to be added to the group.",
										"datatype": {
											"type": {
												"#text": "Swatch",
												"@_href": "#/Swatch"
											}
										},
										"@_name": "swatch"
									}
								},
								"@_name": "addSwatch"
							},
							{
								"shortdesc": "Get all swatches in the swatch group.",
								"datatype": {
									"type": {
										"#text": "Swatch",
										"@_href": "#/Swatch"
									},
									"array": ""
								},
								"@_name": "getAllSwatches"
							},
							{
								"shortdesc": "Add a spot swatch to the group.",
								"parameters": {
									"parameter": {
										"shortdesc": "The spot swatch to be added to the group.",
										"datatype": {
											"type": {
												"#text": "Spot",
												"@_href": "#/Spot"
											}
										},
										"@_name": "spot"
									}
								},
								"@_name": "addSpot"
							}
						],
						"@_type": "instance"
					},
					"@_name": "SwatchGroup",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A pattern.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The pattern's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Pattern",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A symbol.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symbol's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							}
						],
						"method": [
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "Symbol",
										"@_href": "#/Symbol"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Symbol",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A brush.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The brush's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							}
						],
						"method": {
							"shortdesc": "Apply a brush or art style to object(s)",
							"parameters": {
								"parameter": {
									"shortdesc": "The page item(s) to apply to.",
									"datatype": {
										"type": "any"
									},
									"@_name": "artItem"
								}
							},
							"@_name": "applyTo"
						},
						"@_type": "instance"
					},
					"@_name": "Brush",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "An art style.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The art style's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Apply a brush or art style to object(s)",
								"parameters": {
									"parameter": {
										"shortdesc": "The page item(s) to apply to.",
										"datatype": {
											"type": "any"
										},
										"@_name": "artItem"
									}
								},
								"@_name": "applyTo"
							},
							{
								"shortdesc": "Merge an art style to object(s) current style(s)",
								"parameters": {
									"parameter": {
										"shortdesc": "The page item(s) to merge to.",
										"datatype": {
											"type": "any"
										},
										"@_name": "artItem"
									}
								},
								"@_name": "mergeTo"
							}
						],
						"@_type": "instance"
					},
					"@_name": "ArtStyle",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "An installed font.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The font's full name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The font's family name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "family",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The font's style name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "style",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The font's Axis Vector.",
								"datatype": {
									"type": "number",
									"array": ""
								},
								"@_name": "axisVector",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "instance"
					},
					"@_name": "TextFont",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A page item object.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The value of the Adobe URL tag assigned to this artwork item.",
								"datatype": {
									"type": "string"
								},
								"@_name": "URL"
							},
							{
								"shortdesc": "The note assigned to this artwork item.",
								"datatype": {
									"type": "string"
								},
								"@_name": "note"
							},
							{
								"shortdesc": "The layer to which this artwork belongs.",
								"datatype": {
									"type": {
										"#text": "Layer",
										"@_href": "#/Layer"
									}
								},
								"@_name": "layer",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is this artwork item locked?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "locked"
							},
							{
								"shortdesc": "Is this artwork item hidden?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "hidden"
							},
							{
								"shortdesc": "Is this artwork item selected?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "selected"
							},
							{
								"shortdesc": "The position of the top left corner of the art item.",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "position"
							},
							{
								"shortdesc": "The width of the art item.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 16348
								},
								"@_name": "width"
							},
							{
								"shortdesc": "The height of the art item.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 16348
								},
								"@_name": "height"
							},
							{
								"shortdesc": "The bounds of the artwork excluding stroke width.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "geometricBounds",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The visible bounds of the artwork including stroke width.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "visibleBounds",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The bounds of the artwork including stroke width and controls.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "controlBounds",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The item's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The item's unique identifier.",
								"datatype": {
									"type": "string"
								},
								"@_name": "uuid",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The mode used when compositing an object.",
								"datatype": {
									"type": {
										"#text": "BlendModes",
										"@_href": "#/BlendModes"
									}
								},
								"@_name": "blendingMode"
							},
							{
								"shortdesc": "The object's opacity (between 0.0 and 100.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100
								},
								"@_name": "opacity"
							},
							{
								"shortdesc": "Is the artwork isolated.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "isIsolated"
							},
							{
								"shortdesc": "Is the artwork used to create a knockout.",
								"datatype": {
									"type": {
										"#text": "KnockoutState",
										"@_href": "#/KnockoutState"
									}
								},
								"@_name": "artworkKnockout"
							},
							{
								"shortdesc": "The drawing order of the art within it's group or layer.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "zOrderPosition",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The absolute drawing order of the layer.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "absoluteZOrderPosition",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Can the art item be modified.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "editable",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is the art item sliced (default: false)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "sliced"
							},
							{
								"shortdesc": "The top position of the art item.",
								"datatype": {
									"type": "number"
								},
								"@_name": "top"
							},
							{
								"shortdesc": "The left position of the art item.",
								"datatype": {
									"type": "number"
								},
								"@_name": "left"
							},
							{
								"shortdesc": "The visibility variable bound to this page item.",
								"datatype": {
									"type": "any"
								},
								"@_name": "visibilityVariable"
							},
							{
								"shortdesc": "The collection of tags associated with this page item.",
								"datatype": {
									"type": {
										"#text": "Tags",
										"@_href": "#/Tags"
									}
								},
								"@_name": "tags",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is this artwork item aligned to Pixel Grid?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "pixelAligned"
							},
							{
								"shortdesc": "Wrap text frame objects around this object (text frame must be above the object)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "wrapped"
							},
							{
								"shortdesc": "Use this offset when wrapping text around this object.",
								"datatype": {
									"type": "number"
								},
								"@_name": "wrapOffset"
							},
							{
								"shortdesc": "Should the text frame object be wrapped inside this object?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "wrapInside"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PageItem",
										"@_href": "#/PageItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PageItem",
										"@_href": "#/PageItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Reposition art object(s)",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Horizontal transformation.",
											"datatype": {
												"type": "number",
												"value": 0
											},
											"@_name": "deltaX",
											"@_optional": "true"
										},
										{
											"shortdesc": "Vertical transformation.",
											"datatype": {
												"type": "number",
												"value": 0
											},
											"@_name": "deltaY",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are art object positions and orientations affected?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "transformObjects",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the fill patterns assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "transformFillPatterns",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the fill gradients assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "transformFillGradients",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the stroke patterns assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "transformStrokePattern",
											"@_optional": "true"
										}
									]
								},
								"@_name": "translate"
							},
							{
								"shortdesc": "Scale art object(s)",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Horizontal scaling factor expressed as a percentage (100 = 100%)",
											"datatype": {
												"type": "number"
											},
											"@_name": "scaleX"
										},
										{
											"shortdesc": "Vertical scaling factor expressed as a percentage (100 = 100%)",
											"datatype": {
												"type": "number"
											},
											"@_name": "scaleY"
										},
										{
											"shortdesc": "Are art object positions and orientations effected?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changePositions",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the fill patterns assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeFillPatterns",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the fill gradients assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeFillGradients",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the stroke patterns assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeStrokePattern",
											"@_optional": "true"
										},
										{
											"shortdesc": "The amount line widths are to be scaled (expressed as a percentage)",
											"datatype": {
												"type": "number",
												"value": 100
											},
											"@_name": "changeLineWidths",
											"@_optional": "true"
										},
										{
											"shortdesc": "The point on the art item's bounding box to which the scale is applied.",
											"datatype": {
												"type": {
													"#text": "Transformation",
													"@_href": "#/Transformation"
												},
												"value": "Transformation.CENTER"
											},
											"@_name": "scaleAbout",
											"@_optional": "true"
										}
									]
								},
								"@_name": "resize"
							},
							{
								"shortdesc": "Rotate art object(s)",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Angle of rotation (in degrees). Rotation is performed counter-clock wise.",
											"datatype": {
												"type": "number"
											},
											"@_name": "angle"
										},
										{
											"shortdesc": "Are art object positions and orientations effected?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changePositions",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the fill patterns assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeFillPatterns",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the fill gradients assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeFillGradients",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the stroke patterns assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeStrokePattern",
											"@_optional": "true"
										},
										{
											"shortdesc": "The point on the art item's bounding box to which the rotation is applied.",
											"datatype": {
												"type": {
													"#text": "Transformation",
													"@_href": "#/Transformation"
												},
												"value": "Transformation.CENTER"
											},
											"@_name": "rotateAbout",
											"@_optional": "true"
										}
									]
								},
								"@_name": "rotate"
							},
							{
								"shortdesc": "Transform art object(s) using a transformation matrix.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The transformation matrix to be applied to the objects.",
											"datatype": {
												"type": {
													"#text": "Matrix",
													"@_href": "#/Matrix"
												}
											},
											"@_name": "transformationMatrix"
										},
										{
											"shortdesc": "Are art object positions and orientations effected?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changePositions",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the fill patterns assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeFillPatterns",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the fill gradients assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeFillGradients",
											"@_optional": "true"
										},
										{
											"shortdesc": "Are the stroke patterns assigned to paths to be transformed?",
											"datatype": {
												"type": "bool",
												"value": true
											},
											"@_name": "changeStrokePattern",
											"@_optional": "true"
										},
										{
											"shortdesc": "The amount line widths are to be scaled (expressed as a percentage)",
											"datatype": {
												"type": "number",
												"value": 100
											},
											"@_name": "changeLineWidths",
											"@_optional": "true"
										},
										{
											"shortdesc": "The point on the art item's bounding box to which scale and rotation operations apply.",
											"datatype": {
												"type": {
													"#text": "Transformation",
													"@_href": "#/Transformation"
												},
												"value": "Transformation.CENTER"
											},
											"@_name": "transformAbout",
											"@_optional": "true"
										}
									]
								},
								"@_name": "transform"
							},
							{
								"shortdesc": "Place art object(s)in perspective grid at spedified perspective plane and coordinate.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Position towards X direction of specified or active perspective grid plane.",
											"datatype": {
												"type": "number"
											},
											"@_name": "positionX"
										},
										{
											"shortdesc": "Position towards Y direction of specified or active perspective grid plane.",
											"datatype": {
												"type": "number"
											},
											"@_name": "positionY"
										},
										{
											"shortdesc": "Type of perspective grid plane.",
											"datatype": {
												"type": {
													"#text": "PerspectiveGridPlaneType",
													"@_href": "#/PerspectiveGridPlaneType"
												}
											},
											"@_name": "perspectiveGridPlane"
										}
									]
								},
								"@_name": "bringInPerspective"
							},
							{
								"shortdesc": "Arranges the art relative to other art in the group or layer.",
								"parameters": {
									"parameter": {
										"shortdesc": "How to arrange the art.",
										"datatype": {
											"type": {
												"#text": "ZOrderMethod",
												"@_href": "#/ZOrderMethod"
											}
										},
										"@_name": "zOrderCmd"
									}
								},
								"@_name": "zOrder"
							},
							{
								"shortdesc": "Apply effect to selected artItem.",
								"parameters": {
									"parameter": {
										"datatype": {
											"type": "string"
										},
										"@_name": "liveEffectXML"
									}
								},
								"@_name": "applyEffect"
							},
							{
								"shortdesc": "Sends the script message to the required plugin.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Plugin to which message needs to be sent.",
											"datatype": {
												"type": "string"
											},
											"@_name": "pluginName"
										},
										{
											"shortdesc": "Functionality that is to be executed.",
											"datatype": {
												"type": "string"
											},
											"@_name": "messageSelector"
										},
										{
											"shortdesc": "Pass any data encoded in a string.",
											"datatype": {
												"type": "string"
											},
											"@_name": "inputString"
										}
									]
								},
								"datatype": {
									"type": "string"
								},
								"@_name": "sendScriptMessage"
							}
						],
						"@_type": "instance"
					},
					"@_name": "PageItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Compound path artwork item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The path artwork in this compound path.",
								"datatype": {
									"type": {
										"#text": "PathItems",
										"@_href": "#/PathItems"
									}
								},
								"@_name": "pathItems",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "CompoundPathItem",
										"@_href": "#/CompoundPathItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "CompoundPathItem",
										"@_href": "#/CompoundPathItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "CompoundPathItem",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A tag associated with a piece of artwork.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The tag's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The data stored in this tag.",
								"datatype": {
									"type": "string"
								},
								"@_name": "value"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Tag",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "An artwork path item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is this path closed?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "closed"
							},
							{
								"shortdesc": "The area of this path in square points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "area",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The length of this path in points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is this path a guide object?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "guides"
							},
							{
								"shortdesc": "Should the path be filled?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "filled"
							},
							{
								"shortdesc": "Fill color.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "fillColor"
							},
							{
								"shortdesc": "Will art beneath a filled object be overprinted?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "fillOverprint"
							},
							{
								"shortdesc": "Should the path be stroked?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "stroked"
							},
							{
								"shortdesc": "Stroke color.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "strokeColor"
							},
							{
								"shortdesc": "Will art beneath a stroked object be overprinted?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "strokeOverprint"
							},
							{
								"shortdesc": "Width of stroke.",
								"datatype": {
									"type": "number"
								},
								"@_name": "strokeWidth"
							},
							{
								"shortdesc": "Dash lengths (set to {} for a solid line)",
								"datatype": {
									"type": "number",
									"array": ""
								},
								"@_name": "strokeDashes"
							},
							{
								"shortdesc": "The default distance into the dash pattern at which the pattern should be started.",
								"datatype": {
									"type": "number"
								},
								"@_name": "strokeDashOffset"
							},
							{
								"shortdesc": "Type of line capping.",
								"datatype": {
									"type": {
										"#text": "StrokeCap",
										"@_href": "#/StrokeCap"
									}
								},
								"@_name": "strokeCap"
							},
							{
								"shortdesc": "Type of joints.",
								"datatype": {
									"type": {
										"#text": "StrokeJoin",
										"@_href": "#/StrokeJoin"
									}
								},
								"@_name": "strokeJoin"
							},
							{
								"shortdesc": "Whether a join is mitered (pointed) or beveled (squared-off)",
								"datatype": {
									"type": "number"
								},
								"@_name": "strokeMiterLimit"
							},
							{
								"shortdesc": "Should this be used as a clipping path?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "clipping"
							},
							{
								"shortdesc": "Should the even-odd rule be used to determine insideness?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "evenodd"
							},
							{
								"shortdesc": "The resolution of the path.",
								"datatype": {
									"type": "number"
								},
								"@_name": "resolution"
							},
							{
								"shortdesc": "All the selected points in the path.",
								"datatype": {
									"type": {
										"#text": "ObjectArray",
										"@_href": "#/ObjectArray"
									}
								},
								"@_name": "selectedPathPoints",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The polarity the path.",
								"datatype": {
									"type": {
										"#text": "PolarityValues",
										"@_href": "#/PolarityValues"
									}
								},
								"@_name": "polarity"
							},
							{
								"datatype": {
									"type": {
										"#text": "PathPoints",
										"@_href": "#/PathPoints"
									}
								},
								"@_name": "pathPoints",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PathItem",
										"@_href": "#/PathItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PathItem",
										"@_href": "#/PathItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Set the path using the provided array of path point (x, y) coordinate pairs.",
								"parameters": {
									"parameter": {
										"shortdesc": "Array of (x, y) coordinate pairs for the path points.",
										"datatype": {
											"type": "any",
											"array": ""
										},
										"@_name": "pathPoints"
									}
								},
								"@_name": "setEntirePath"
							}
						],
						"@_type": "instance"
					},
					"@_name": "PathItem",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A point on a path.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The position (coordinates) of the anchor point.",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "anchor"
							},
							{
								"shortdesc": "Location of the left direction point (in position)",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "leftDirection"
							},
							{
								"shortdesc": "Location of the right direction point (out position)",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "rightDirection"
							},
							{
								"shortdesc": "The type of point: smooth/corner.",
								"datatype": {
									"type": {
										"#text": "PointType",
										"@_href": "#/PointType"
									}
								},
								"@_name": "pointType"
							},
							{
								"shortdesc": "The path point selected state.",
								"datatype": {
									"type": {
										"#text": "PathPointSelection",
										"@_href": "#/PathPointSelection"
									}
								},
								"@_name": "selected"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "PathPoint",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Raster artwork item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The file containing the raster artwork.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "file",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The transformation matrix of the raster art object.",
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "matrix"
							},
							{
								"shortdesc": "Dimensions of raster art object regardless of transformations.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "boundingBox"
							},
							{
								"shortdesc": "The color space of the raster image.",
								"datatype": {
									"type": {
										"#text": "ImageColorSpace",
										"@_href": "#/ImageColorSpace"
									}
								},
								"@_name": "imageColorSpace",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is the raster art embedded within the illustration?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "embedded"
							},
							{
								"shortdesc": "Is the raster art overprinting?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "overprint"
							},
							{
								"shortdesc": "Is the raster art a colorized grayscale image?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "colorizedGrayscale",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is the raster art transparent?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "transparent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The number of image channels.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "channels",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The number of bits per channel.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "bitsPerChannel",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "List of colorant names.",
								"datatype": {
									"type": "string",
									"array": ""
								},
								"@_name": "colorants",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Status of the linked image.",
								"datatype": {
									"type": {
										"#text": "RasterLinkState",
										"@_href": "#/RasterLinkState"
									}
								},
								"@_name": "status",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The content variable bound to this raster art object.",
								"datatype": {
									"type": "any"
								},
								"@_name": "contentVariable"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "RasterItem",
										"@_href": "#/RasterItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "RasterItem",
										"@_href": "#/RasterItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Colorize the RasterItem with a CMYK or RGB Color.",
								"parameters": {
									"parameter": {
										"shortdesc": "The color to use for coloring the TIFF image.",
										"datatype": {
											"type": {
												"#text": "Color",
												"@_href": "#/Color"
											}
										},
										"@_name": "rasterColor"
									}
								},
								"@_name": "colorize"
							},
							{
								"shortdesc": "Trace this raster object using default options. Reorders this raster to the source art.",
								"datatype": {
									"type": {
										"#text": "PluginItem",
										"@_href": "#/PluginItem"
									}
								},
								"@_name": "trace"
							}
						],
						"@_type": "instance"
					},
					"@_name": "RasterItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Placed artwork item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The file containing the placed artwork.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "file"
							},
							{
								"shortdesc": "The transformation matrix of the placed art object.",
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "matrix"
							},
							{
								"shortdesc": "Dimensions of placed art object, regardless of transformations.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "boundingBox",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The content variable bound to this placed art object.",
								"datatype": {
									"type": "any"
								},
								"@_name": "contentVariable"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PlacedItem",
										"@_href": "#/PlacedItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PlacedItem",
										"@_href": "#/PlacedItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Embed the placed art within the illustration.",
								"@_name": "embed"
							},
							{
								"shortdesc": "Trace this raster object using default options. Reorders this placed to the source art.",
								"datatype": {
									"type": {
										"#text": "PluginItem",
										"@_href": "#/PluginItem"
									}
								},
								"@_name": "trace"
							},
							{
								"shortdesc": "Relink the placed art with supplied art from file.",
								"parameters": {
									"parameter": {
										"shortdesc": "File spec to relink from.",
										"datatype": {
											"type": {
												"#text": "File",
												"@_href": "#/File"
											}
										},
										"@_name": "fileSpec"
									}
								},
								"@_name": "relink"
							}
						],
						"@_type": "instance"
					},
					"@_name": "PlacedItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Embedded artwork item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The file containing the placed artwork.",
								"datatype": {
									"type": {
										"#text": "File",
										"@_href": "#/File"
									}
								},
								"@_name": "file"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "EmbedItem",
										"@_href": "#/EmbedItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "EmbedItem",
										"@_href": "#/EmbedItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "EmbedItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Graph artwork item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The content variable bound to this graph.",
								"datatype": {
									"type": "any"
								},
								"@_name": "contentVariable"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "GraphItem",
										"@_href": "#/GraphItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "GraphItem",
										"@_href": "#/GraphItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "GraphItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Non-native artwork item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "NonNativeItem",
										"@_href": "#/NonNativeItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "NonNativeItem",
										"@_href": "#/NonNativeItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "NonNativeItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Mesh artwork item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "MeshItem",
										"@_href": "#/MeshItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "MeshItem",
										"@_href": "#/MeshItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "MeshItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Plugin artwork item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is the plugin group a tracing?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "isTracing",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The tracing object associated with this plugin item.",
								"datatype": {
									"type": {
										"#text": "TracingObject",
										"@_href": "#/TracingObject"
									}
								},
								"@_name": "tracing",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PluginItem",
										"@_href": "#/PluginItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "PluginItem",
										"@_href": "#/PluginItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "PluginItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "An artwork group item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Are the group elements clipped to the clipping path?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "clipped"
							},
							{
								"shortdesc": "The group items in this group.",
								"datatype": {
									"type": {
										"#text": "GroupItems",
										"@_href": "#/GroupItems"
									}
								},
								"@_name": "groupItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the artwork in this group.",
								"datatype": {
									"type": {
										"#text": "PageItems",
										"@_href": "#/PageItems"
									}
								},
								"@_name": "pageItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The compound path artwork in this group.",
								"datatype": {
									"type": {
										"#text": "CompoundPathItems",
										"@_href": "#/CompoundPathItems"
									}
								},
								"@_name": "compoundPathItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The path artwork in this group.",
								"datatype": {
									"type": {
										"#text": "PathItems",
										"@_href": "#/PathItems"
									}
								},
								"@_name": "pathItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The raster art items in this group.",
								"datatype": {
									"type": {
										"#text": "RasterItems",
										"@_href": "#/RasterItems"
									}
								},
								"@_name": "rasterItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The placed art items in this group.",
								"datatype": {
									"type": {
										"#text": "PlacedItems",
										"@_href": "#/PlacedItems"
									}
								},
								"@_name": "placedItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The mesh art items in this group.",
								"datatype": {
									"type": {
										"#text": "MeshItems",
										"@_href": "#/MeshItems"
									}
								},
								"@_name": "meshItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The plugin art items in this group.",
								"datatype": {
									"type": {
										"#text": "PluginItems",
										"@_href": "#/PluginItems"
									}
								},
								"@_name": "pluginItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The graph art items in this group.",
								"datatype": {
									"type": {
										"#text": "GraphItems",
										"@_href": "#/GraphItems"
									}
								},
								"@_name": "graphItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The non-native art items in this group.",
								"datatype": {
									"type": {
										"#text": "NonNativeItems",
										"@_href": "#/NonNativeItems"
									}
								},
								"@_name": "nonNativeItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text frame items in this group.",
								"datatype": {
									"type": {
										"#text": "TextFrameItems",
										"@_href": "#/TextFrameItems"
									}
								},
								"@_name": "textFrames",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symbol items in this group.",
								"datatype": {
									"type": {
										"#text": "SymbolItems",
										"@_href": "#/SymbolItems"
									}
								},
								"@_name": "symbolItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text frame items in this story.",
								"datatype": {
									"type": {
										"#text": "LegacyTextItems",
										"@_href": "#/LegacyTextItems"
									}
								},
								"@_name": "legacyTextItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symmetry repeat items in this document.",
								"datatype": {
									"type": {
										"#text": "SymmetryRepeatItems",
										"@_href": "#/SymmetryRepeatItems"
									}
								},
								"@_name": "symmetryRepeatItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The radial repeat items in this document.",
								"datatype": {
									"type": {
										"#text": "RadialRepeatItems",
										"@_href": "#/RadialRepeatItems"
									}
								},
								"@_name": "radialRepeatItems",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The grid repeat items in this document.",
								"datatype": {
									"type": {
										"#text": "GridRepeatItems",
										"@_href": "#/GridRepeatItems"
									}
								},
								"@_name": "gridRepeatItems",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "GroupItem",
										"@_href": "#/GroupItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "GroupItem",
										"@_href": "#/GroupItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "GroupItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "An instance of a Symbol.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The symbol that was used to create this symbol item.",
								"datatype": {
									"type": {
										"#text": "Symbol",
										"@_href": "#/Symbol"
									}
								},
								"@_name": "symbol"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "SymbolItem",
										"@_href": "#/SymbolItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "SymbolItem",
										"@_href": "#/SymbolItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Break link to the symbol.",
								"@_name": "breakLink"
							}
						],
						"@_type": "instance"
					},
					"@_name": "SymbolItem",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A text path item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The position of the top left corner of the text path.",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "position"
							},
							{
								"shortdesc": "The width of the text path.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 16348
								},
								"@_name": "width"
							},
							{
								"shortdesc": "The height of the text path.",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 16348
								},
								"@_name": "height"
							},
							{
								"shortdesc": "The mode used when compositing an object.",
								"datatype": {
									"type": {
										"#text": "BlendModes",
										"@_href": "#/BlendModes"
									}
								},
								"@_name": "blendingMode"
							},
							{
								"shortdesc": "The object's opacity (between 0.0 and 100.0)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 100
								},
								"@_name": "opacity"
							},
							{
								"shortdesc": "Can the text path be modified.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "editable",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The top position of the text path.",
								"datatype": {
									"type": "number"
								},
								"@_name": "top"
							},
							{
								"shortdesc": "The left position of the text path.",
								"datatype": {
									"type": "number"
								},
								"@_name": "left"
							},
							{
								"shortdesc": "Is this path closed?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "closed"
							},
							{
								"shortdesc": "The area of this path in square points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "area",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Is this path a guide object?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "guides"
							},
							{
								"shortdesc": "Should the path be filled?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "filled"
							},
							{
								"shortdesc": "Fill color.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "fillColor"
							},
							{
								"shortdesc": "Will art beneath a filled object be overprinted?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "fillOverprint"
							},
							{
								"shortdesc": "Should the path be stroked?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "stroked"
							},
							{
								"shortdesc": "Stroke color.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "strokeColor"
							},
							{
								"shortdesc": "Will art beneath a stroked object be overprinted?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "strokeOverprint"
							},
							{
								"shortdesc": "Width of stroke.",
								"datatype": {
									"type": "number"
								},
								"@_name": "strokeWidth"
							},
							{
								"shortdesc": "Dash lengths (set to {} for a solid line)",
								"datatype": {
									"type": "number",
									"array": ""
								},
								"@_name": "strokeDashes"
							},
							{
								"shortdesc": "The default distance into the dash pattern at which the pattern should be started.",
								"datatype": {
									"type": "number"
								},
								"@_name": "strokeDashOffset"
							},
							{
								"shortdesc": "Type of line capping.",
								"datatype": {
									"type": {
										"#text": "StrokeCap",
										"@_href": "#/StrokeCap"
									}
								},
								"@_name": "strokeCap"
							},
							{
								"shortdesc": "Type of joints.",
								"datatype": {
									"type": {
										"#text": "StrokeJoin",
										"@_href": "#/StrokeJoin"
									}
								},
								"@_name": "strokeJoin"
							},
							{
								"shortdesc": "Whether a join is mitered (pointed) or beveled (squared-off)",
								"datatype": {
									"type": "number"
								},
								"@_name": "strokeMiterLimit"
							},
							{
								"shortdesc": "Should this be used as a clipping path?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "clipping"
							},
							{
								"shortdesc": "Should the even-odd rule be used to determine insideness?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "evenodd"
							},
							{
								"shortdesc": "The resolution of the path.",
								"datatype": {
									"type": "number"
								},
								"@_name": "resolution"
							},
							{
								"shortdesc": "Note assigned to the path.",
								"datatype": {
									"type": "string"
								},
								"@_name": "note"
							},
							{
								"shortdesc": "All the selected points in the path.",
								"datatype": {
									"type": {
										"#text": "ObjectArray",
										"@_href": "#/ObjectArray"
									}
								},
								"@_name": "selectedPathPoints",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The polarity the path.",
								"datatype": {
									"type": {
										"#text": "PolarityValues",
										"@_href": "#/PolarityValues"
									}
								},
								"@_name": "polarity"
							},
							{
								"datatype": {
									"type": {
										"#text": "PathPoints",
										"@_href": "#/PathPoints"
									}
								},
								"@_name": "pathPoints",
								"@_rwaccess": "readonly"
							}
						],
						"method": {
							"shortdesc": "Set the path using the provided array of anchor points.",
							"parameters": {
								"parameter": {
									"shortdesc": "Array of anchor values for the path points.",
									"datatype": {
										"type": "any",
										"array": ""
									},
									"@_name": "pathPoints"
								}
							},
							"@_name": "setEntirePath"
						},
						"@_type": "instance"
					},
					"@_name": "TextPath",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A contiguous block of text.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text range of the story.",
								"datatype": {
									"type": {
										"#text": "TextRange",
										"@_href": "#/TextRange"
									}
								},
								"@_name": "textRange",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text frame items in this story.",
								"datatype": {
									"type": {
										"#text": "TextFrameItems",
										"@_href": "#/TextFrameItems"
									}
								},
								"@_name": "textFrames",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The selected text (ranges) in the story.",
								"datatype": {
									"type": {
										"#text": "TextRange",
										"@_href": "#/TextRange"
									},
									"array": ""
								},
								"@_name": "textSelection",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the characters in this text range.",
								"datatype": {
									"type": {
										"#text": "Characters",
										"@_href": "#/Characters"
									}
								},
								"@_name": "characters",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the words in this text range.",
								"datatype": {
									"type": {
										"#text": "Words",
										"@_href": "#/Words"
									}
								},
								"@_name": "words",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the lines in this text range.",
								"datatype": {
									"type": {
										"#text": "Lines",
										"@_href": "#/Lines"
									}
								},
								"@_name": "lines",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the paragraphs in this text range.",
								"datatype": {
									"type": {
										"#text": "Paragraphs",
										"@_href": "#/Paragraphs"
									}
								},
								"@_name": "paragraphs",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the text in this text range.",
								"datatype": {
									"type": {
										"#text": "TextRanges",
										"@_href": "#/TextRanges"
									}
								},
								"@_name": "textRanges",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the insertion points in this text range.",
								"datatype": {
									"type": {
										"#text": "InsertionPoints",
										"@_href": "#/InsertionPoints"
									}
								},
								"@_name": "insertionPoints",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The number of characters in the story.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Story",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Text frame item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The story of the text frame.",
								"datatype": {
									"type": {
										"#text": "Story",
										"@_href": "#/Story"
									}
								},
								"@_name": "story",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text contents of this text frame.",
								"datatype": {
									"type": "string"
								},
								"@_name": "contents"
							},
							{
								"shortdesc": "The text range of the text frame.",
								"datatype": {
									"type": {
										"#text": "TextRange",
										"@_href": "#/TextRange"
									}
								},
								"@_name": "textRange",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The selected text (ranges) in the story.",
								"datatype": {
									"type": {
										"#text": "TextRange",
										"@_href": "#/TextRange"
									},
									"array": ""
								},
								"@_name": "textSelection",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The row count in the text frame (area text only)",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "rowCount"
							},
							{
								"shortdesc": "The column count in the text frame (area text only)",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "columnCount"
							},
							{
								"shortdesc": "The row gutter in the text frame (area text only)",
								"datatype": {
									"type": "number"
								},
								"@_name": "rowGutter"
							},
							{
								"shortdesc": "The column gutter in the text frame (area text only)",
								"datatype": {
									"type": "number"
								},
								"@_name": "columnGutter"
							},
							{
								"shortdesc": "Flow text between linked frame horizontally first. (area text only)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "flowLinksHorizontally"
							},
							{
								"shortdesc": "The amount of spacing (path text only)",
								"datatype": {
									"type": "number"
								},
								"@_name": "spacing"
							},
							{
								"shortdesc": "Is the optical alignment active?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "opticalAlignment"
							},
							{
								"shortdesc": "The type of a text frame item.",
								"datatype": {
									"type": {
										"#text": "TextType",
										"@_href": "#/TextType"
									}
								},
								"@_name": "kind",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The content variable bound to this text art item.",
								"datatype": {
									"type": "any"
								},
								"@_name": "contentVariable"
							},
							{
								"shortdesc": "The orientation of the text in the frame.",
								"datatype": {
									"type": {
										"#text": "TextOrientation",
										"@_href": "#/TextOrientation"
									}
								},
								"@_name": "orientation"
							},
							{
								"shortdesc": "The path for the text frame (area and path text)",
								"datatype": {
									"type": {
										"#text": "TextPath",
										"@_href": "#/TextPath"
									}
								},
								"@_name": "textPath",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The position of the anchor point (start of base line for point text)",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "anchor"
							},
							{
								"shortdesc": "The start position of text along a path, as a value relative to the path's segments (path text only)",
								"datatype": {
									"type": "number"
								},
								"@_name": "startTValue"
							},
							{
								"shortdesc": "The end position of text along a path, as a value relative to the path's segments (path text only)",
								"datatype": {
									"type": "number"
								},
								"@_name": "endTValue"
							},
							{
								"shortdesc": "The linked text frame preceding this one.",
								"datatype": {
									"type": {
										"#text": "TextFrameItem",
										"@_href": "#/TextFrameItem"
									}
								},
								"@_name": "previousFrame"
							},
							{
								"shortdesc": "The linked text frame following this one.",
								"datatype": {
									"type": {
										"#text": "TextFrameItem",
										"@_href": "#/TextFrameItem"
									}
								},
								"@_name": "nextFrame"
							},
							{
								"shortdesc": "The transformation matrix of the text frame object.",
								"datatype": {
									"type": {
										"#text": "Matrix",
										"@_href": "#/Matrix"
									}
								},
								"@_name": "matrix",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The type of a text anti-aliasing on text frame item.",
								"datatype": {
									"type": {
										"#text": "TextAntialias",
										"@_href": "#/TextAntialias"
									}
								},
								"@_name": "antialias"
							},
							{
								"shortdesc": "The first baseline offset type for text frame item (for Area Text only)",
								"datatype": {
									"type": {
										"#text": "FirstBaselineType",
										"@_href": "#/FirstBaselineType"
									}
								},
								"@_name": "firstBaseline"
							},
							{
								"shortdesc": "The first baseline offset minimum value for text frame item (for Area Text only)",
								"datatype": {
									"type": "number"
								},
								"@_name": "firstBaselineMin"
							},
							{
								"shortdesc": "All the characters in this text range.",
								"datatype": {
									"type": {
										"#text": "Characters",
										"@_href": "#/Characters"
									}
								},
								"@_name": "characters",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the words in this text range.",
								"datatype": {
									"type": {
										"#text": "Words",
										"@_href": "#/Words"
									}
								},
								"@_name": "words",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the lines in this text range.",
								"datatype": {
									"type": {
										"#text": "Lines",
										"@_href": "#/Lines"
									}
								},
								"@_name": "lines",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the paragraphs in this text range.",
								"datatype": {
									"type": {
										"#text": "Paragraphs",
										"@_href": "#/Paragraphs"
									}
								},
								"@_name": "paragraphs",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the text in this text range.",
								"datatype": {
									"type": {
										"#text": "TextRanges",
										"@_href": "#/TextRanges"
									}
								},
								"@_name": "textRanges",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the insertion points in this text range.",
								"datatype": {
									"type": {
										"#text": "InsertionPoints",
										"@_href": "#/InsertionPoints"
									}
								},
								"@_name": "insertionPoints",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "TextFrameItem",
										"@_href": "#/TextFrameItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "TextFrameItem",
										"@_href": "#/TextFrameItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Convert text item to path items.",
								"datatype": {
									"type": {
										"#text": "GroupItem",
										"@_href": "#/GroupItem"
									}
								},
								"@_name": "createOutline"
							},
							{
								"shortdesc": "Convert Area Type Text Object To Point Type Object.",
								"datatype": {
									"type": {
										"#text": "TextFrameItem",
										"@_href": "#/TextFrameItem"
									}
								},
								"@_name": "convertAreaObjectToPointObject"
							},
							{
								"shortdesc": "Convert Point Type Text Object To Area Type Object.",
								"datatype": {
									"type": {
										"#text": "TextFrameItem",
										"@_href": "#/TextFrameItem"
									}
								},
								"@_name": "convertPointObjectToAreaObject"
							},
							{
								"shortdesc": "Generates the thumbnail with the properties of first character in the text frame.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The text string which is to be used in the thumbnail generation.",
											"datatype": {
												"type": "string"
											},
											"@_name": "textString"
										},
										{
											"shortdesc": "The size in points of the text string.",
											"datatype": {
												"type": "number"
											},
											"@_name": "fontSize"
										},
										{
											"shortdesc": "The color of the text string.",
											"datatype": {
												"type": {
													"#text": "Color",
													"@_href": "#/Color"
												}
											},
											"@_name": "textColor"
										},
										{
											"shortdesc": "The location at which the thumbnail is to be stored.",
											"datatype": {
												"type": {
													"#text": "File",
													"@_href": "#/File"
												}
											},
											"@_name": "destinationPath"
										}
									]
								},
								"@_name": "generateThumbnailWithTextFrameProperties"
							}
						],
						"@_type": "instance"
					},
					"@_name": "TextFrameItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "Unconverted legacy text items from documents in pre-version 11 formats.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Has the legacy text item been updated to a native text frame item?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "converted",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "LegacyTextItem",
										"@_href": "#/LegacyTextItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Create a native text frame from a legacy text item. The original legacy text item is deleted.",
								"datatype": {
									"type": {
										"#text": "GroupItem",
										"@_href": "#/GroupItem"
									}
								},
								"@_name": "convertToNative"
							}
						],
						"@_type": "instance"
					},
					"@_name": "LegacyTextItem",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A range of characters from a text item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Offset of the first character of the range from the beginning of the story, in characters.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "characterOffset"
							},
							{
								"shortdesc": "Length of text range.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 0
								},
								"@_name": "length"
							},
							{
								"shortdesc": "The text string.",
								"datatype": {
									"type": "string"
								},
								"@_name": "contents"
							},
							{
								"shortdesc": "Controls the spacing between two characters (in milli-ems)",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "kerning"
							},
							{
								"shortdesc": "The story of the text range.",
								"datatype": {
									"type": {
										"#text": "Story",
										"@_href": "#/Story"
									}
								},
								"@_name": "story",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The selected text (ranges) in the text range.",
								"datatype": {
									"type": {
										"#text": "TextRange",
										"@_href": "#/TextRange"
									},
									"array": ""
								},
								"@_name": "textSelection",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the characters in this text range.",
								"datatype": {
									"type": {
										"#text": "Characters",
										"@_href": "#/Characters"
									}
								},
								"@_name": "characters",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the words in this text range.",
								"datatype": {
									"type": {
										"#text": "Words",
										"@_href": "#/Words"
									}
								},
								"@_name": "words",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the lines in this text range.",
								"datatype": {
									"type": {
										"#text": "Lines",
										"@_href": "#/Lines"
									}
								},
								"@_name": "lines",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the paragraphs in this text range.",
								"datatype": {
									"type": {
										"#text": "Paragraphs",
										"@_href": "#/Paragraphs"
									}
								},
								"@_name": "paragraphs",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the text in this text range.",
								"datatype": {
									"type": {
										"#text": "TextRanges",
										"@_href": "#/TextRanges"
									}
								},
								"@_name": "textRanges",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the insertion points in this text range.",
								"datatype": {
									"type": {
										"#text": "InsertionPoints",
										"@_href": "#/InsertionPoints"
									}
								},
								"@_name": "insertionPoints",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "List of referenced character styles in the text range.",
								"datatype": {
									"type": {
										"#text": "CharacterStyles",
										"@_href": "#/CharacterStyles"
									}
								},
								"@_name": "characterStyles",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "List of referenced paragraph styles in the text range.",
								"datatype": {
									"type": {
										"#text": "ParagraphStyles",
										"@_href": "#/ParagraphStyles"
									}
								},
								"@_name": "paragraphStyles",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The character properties for the text range.",
								"datatype": {
									"type": {
										"#text": "CharacterAttributes",
										"@_href": "#/CharacterAttributes"
									}
								},
								"@_name": "characterAttributes",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The paragraph properties for the text range.",
								"datatype": {
									"type": {
										"#text": "ParagraphAttributes",
										"@_href": "#/ParagraphAttributes"
									}
								},
								"@_name": "paragraphAttributes",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Start index of the text range.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "start"
							},
							{
								"shortdesc": "End index of the text range.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "end"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "TextRange",
										"@_href": "#/TextRange"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "TextRange",
										"@_href": "#/TextRange"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Select the text range.",
								"parameters": {
									"parameter": {
										"shortdesc": "Whether to add the text range to the document text selection.",
										"datatype": {
											"type": "bool",
											"value": false
										},
										"@_name": "addToDocument",
										"@_optional": "true"
									}
								},
								"@_name": "select"
							},
							{
								"shortdesc": "Deselect the text range.",
								"@_name": "deSelect"
							},
							{
								"shortdesc": "Get the length of the first text run.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "getTextRunLength"
							},
							{
								"shortdesc": "Get the length of the first paragraph.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "getParagraphLength"
							},
							{
								"shortdesc": "Change the capitalization of text.",
								"parameters": {
									"parameter": {
										"shortdesc": "The type of case.",
										"datatype": {
											"type": {
												"#text": "CaseChangeType",
												"@_href": "#/CaseChangeType"
											}
										},
										"@_name": "type"
									}
								},
								"@_name": "changeCaseTo"
							}
						],
						"@_type": "instance"
					},
					"@_name": "TextRange",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A location between characters, used to insert new text objects.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The story of the text range.",
								"datatype": {
									"type": {
										"#text": "Story",
										"@_href": "#/Story"
									}
								},
								"@_name": "story",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the characters in this text range.",
								"datatype": {
									"type": {
										"#text": "Characters",
										"@_href": "#/Characters"
									}
								},
								"@_name": "characters",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the words in this text range.",
								"datatype": {
									"type": {
										"#text": "Words",
										"@_href": "#/Words"
									}
								},
								"@_name": "words",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the lines in this text range.",
								"datatype": {
									"type": {
										"#text": "Lines",
										"@_href": "#/Lines"
									}
								},
								"@_name": "lines",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the paragraphs in this text range.",
								"datatype": {
									"type": {
										"#text": "Paragraphs",
										"@_href": "#/Paragraphs"
									}
								},
								"@_name": "paragraphs",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "All the text in this text range.",
								"datatype": {
									"type": {
										"#text": "TextRanges",
										"@_href": "#/TextRanges"
									}
								},
								"@_name": "textRanges",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "instance"
					},
					"@_name": "InsertionPoint",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A named style that remembers character attributes.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The character style's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The character properties for the text range.",
								"datatype": {
									"type": {
										"#text": "CharacterAttributes",
										"@_href": "#/CharacterAttributes"
									}
								},
								"@_name": "characterAttributes",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Adds an element.",
								"datatype": {
									"type": {
										"#text": "CharacterStyle",
										"@_href": "#/CharacterStyle"
									}
								},
								"@_name": "add"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Apply the character style to text object(s)",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The text object(s) to apply the style to.",
											"datatype": {
												"type": "any"
											},
											"@_name": "textItem"
										},
										{
											"shortdesc": "Whether to clear any text attributes before apply the style.",
											"datatype": {
												"type": "bool",
												"value": false
											},
											"@_name": "clearingOverrides",
											"@_optional": "true"
										}
									]
								},
								"@_name": "applyTo"
							},
							{
								"shortdesc": "Remove all the attributes from this character style.",
								"@_name": "clear"
							}
						],
						"@_type": "instance"
					},
					"@_name": "CharacterStyle",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A named style that remembers paragraph attributes.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The paragraph style's name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							},
							{
								"shortdesc": "The character properties for the text range.",
								"datatype": {
									"type": {
										"#text": "CharacterAttributes",
										"@_href": "#/CharacterAttributes"
									}
								},
								"@_name": "characterAttributes",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The paragraph properties for the text range.",
								"datatype": {
									"type": {
										"#text": "ParagraphAttributes",
										"@_href": "#/ParagraphAttributes"
									}
								},
								"@_name": "paragraphAttributes",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Adds an element.",
								"datatype": {
									"type": {
										"#text": "ParagraphStyle",
										"@_href": "#/ParagraphStyle"
									}
								},
								"@_name": "add"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Apply the paragraph style to text object(s)",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "The text object(s) to apply the style to.",
											"datatype": {
												"type": "any"
											},
											"@_name": "textItem"
										},
										{
											"shortdesc": "Whether to clear any text attributes before apply the style.",
											"datatype": {
												"type": "bool",
												"value": false
											},
											"@_name": "clearingOverrides",
											"@_optional": "true"
										}
									]
								},
								"@_name": "applyTo"
							},
							{
								"shortdesc": "Remove all the attributes from this paragraph style.",
								"@_name": "clear"
							}
						],
						"@_type": "instance"
					},
					"@_name": "ParagraphStyle",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Properties of a character.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The text font.",
								"datatype": {
									"type": {
										"#text": "TextFont",
										"@_href": "#/TextFont"
									}
								},
								"@_name": "textFont"
							},
							{
								"shortdesc": "Font size in points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "size"
							},
							{
								"shortdesc": "Character horizontal scaling factor expressed as a percentage (100 = 100%)",
								"datatype": {
									"type": "number"
								},
								"@_name": "horizontalScale"
							},
							{
								"shortdesc": "Character vertical scaling factor expressed as a percentage (100 = 100%)",
								"datatype": {
									"type": "number"
								},
								"@_name": "verticalScale"
							},
							{
								"shortdesc": "Whether to use automatic leading.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "autoLeading"
							},
							{
								"shortdesc": "The amount of space between two lines of text (in points)",
								"datatype": {
									"type": "number"
								},
								"@_name": "leading"
							},
							{
								"shortdesc": "The tracking or range kerning amount in thousands of an em.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "tracking"
							},
							{
								"shortdesc": "The amount of shift (in points) of the text baseline.",
								"datatype": {
									"type": "number"
								},
								"@_name": "baselineShift"
							},
							{
								"shortdesc": "The character rotation angle (in degrees)",
								"datatype": {
									"type": "number"
								},
								"@_name": "rotation"
							},
							{
								"shortdesc": "The automatic kerning method to use.",
								"datatype": {
									"type": {
										"#text": "AutoKernType",
										"@_href": "#/AutoKernType"
									}
								},
								"@_name": "kerningMethod"
							},
							{
								"shortdesc": "The case of text.",
								"datatype": {
									"type": {
										"#text": "FontCapsOption",
										"@_href": "#/FontCapsOption"
									}
								},
								"@_name": "capitalization"
							},
							{
								"shortdesc": "The baseline position of text.",
								"datatype": {
									"type": {
										"#text": "FontBaselineOption",
										"@_href": "#/FontBaselineOption"
									}
								},
								"@_name": "baselinePosition"
							},
							{
								"shortdesc": "The OpenType baseline position.",
								"datatype": {
									"type": {
										"#text": "FontOpenTypePositionOption",
										"@_href": "#/FontOpenTypePositionOption"
									}
								},
								"@_name": "openTypePosition"
							},
							{
								"shortdesc": "Whether the ligature should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "ligature"
							},
							{
								"shortdesc": "Whether the discretionary ligature should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "discretionaryLigature"
							},
							{
								"shortdesc": "Whether the contextual ligature should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "contextualLigature"
							},
							{
								"shortdesc": "Whether the OpenType fractions should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "fractions"
							},
							{
								"shortdesc": "Whether the OpenType ordinals should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "ordinals"
							},
							{
								"shortdesc": "Whether the OpenType swash should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "swash"
							},
							{
								"shortdesc": "Whether the OpenType titling alternates should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "titling"
							},
							{
								"shortdesc": "Whether the OpenType connection forms should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "connectionForms"
							},
							{
								"shortdesc": "Whether the OpenType stylistic alternates should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "stylisticAlternates"
							},
							{
								"shortdesc": "Whether the OpenType ornaments should be used.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "ornaments"
							},
							{
								"shortdesc": "Which figure style to use in OpenType font.",
								"datatype": {
									"type": {
										"#text": "FigureStyleType",
										"@_href": "#/FigureStyleType"
									}
								},
								"@_name": "figureStyle"
							},
							{
								"shortdesc": "Does the Japanese OpenType support proportional font?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "proportionalMetrics"
							},
							{
								"shortdesc": "Does the Japanese OpenType support kana?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "kana"
							},
							{
								"shortdesc": "Does the Japanese OpenType support italics?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "italics"
							},
							{
								"shortdesc": "The Japanese text baseline direction.",
								"datatype": {
									"type": {
										"#text": "BaselineDirectionType",
										"@_href": "#/BaselineDirectionType"
									}
								},
								"@_name": "baselineDirection"
							},
							{
								"shortdesc": "The language of text.",
								"datatype": {
									"type": {
										"#text": "LanguageType",
										"@_href": "#/LanguageType"
									}
								},
								"@_name": "language"
							},
							{
								"shortdesc": "The alternate glyphs form.",
								"datatype": {
									"type": {
										"#text": "AlternateGlyphsForm",
										"@_href": "#/AlternateGlyphsForm"
									}
								},
								"@_name": "alternateGlyphs"
							},
							{
								"shortdesc": "The percentage of space reduction around a Japanese character (100 = 100%)",
								"datatype": {
									"type": "number"
								},
								"@_name": "Tsume"
							},
							{
								"shortdesc": "The character alignment type.",
								"datatype": {
									"type": {
										"#text": "StyleRunAlignmentType",
										"@_href": "#/StyleRunAlignmentType"
									}
								},
								"@_name": "alignment"
							},
							{
								"shortdesc": "Whether WariChu is enabled.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "wariChuEnabled"
							},
							{
								"shortdesc": "The number of Wari-Chu (multiple text lines fit into a space meant for one) lines.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "wariChuLines"
							},
							{
								"shortdesc": "The Wari-Chu line gap.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "wariChuLineGap"
							},
							{
								"shortdesc": "The Wari-Chu scale.",
								"datatype": {
									"type": "number"
								},
								"@_name": "wariChuScale"
							},
							{
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "wariChuCharactersBeforeBreak"
							},
							{
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "wariChuCharactersAfterBreak"
							},
							{
								"datatype": {
									"type": {
										"#text": "WariChuJustificationType",
										"@_href": "#/WariChuJustificationType"
									}
								},
								"@_name": "wariChuJustification"
							},
							{
								"shortdesc": "The Tate-Chu-Yoko vertical adjustment in points.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "tateChuYokoVertical"
							},
							{
								"shortdesc": "The Tate-Chu-Yoko horizontal adjustment in points.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "tateChuYokoHorizontal"
							},
							{
								"shortdesc": "The em amount of left aki.",
								"datatype": {
									"type": "number"
								},
								"@_name": "akiLeft"
							},
							{
								"shortdesc": "The em amount of right aki amount.",
								"datatype": {
									"type": "number"
								},
								"@_name": "akiRight"
							},
							{
								"shortdesc": "Whether line breaks are allowed.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "noBreak"
							},
							{
								"shortdesc": "The color of the text fill.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "fillColor"
							},
							{
								"shortdesc": "The color of the text stroke.",
								"datatype": {
									"type": {
										"#text": "Color",
										"@_href": "#/Color"
									}
								},
								"@_name": "strokeColor"
							},
							{
								"shortdesc": "Whether to overprint the stroke of the text.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "overprintStroke"
							},
							{
								"shortdesc": "Whether to overprint the fill of the text.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "overprintFill"
							},
							{
								"shortdesc": "Line width of stroke.",
								"datatype": {
									"type": "number"
								},
								"@_name": "strokeWeight"
							},
							{
								"shortdesc": "Whether to underline the text.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "underline"
							},
							{
								"shortdesc": "Whether to draw a strike through line over the text.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "strikeThrough"
							},
							{
								"shortdesc": "Kashidas attribute.",
								"datatype": {
									"type": {
										"#text": "KashidasType",
										"@_href": "#/KashidasType"
									}
								},
								"@_name": "kashidas"
							},
							{
								"shortdesc": "Direction override attribute.",
								"datatype": {
									"type": {
										"#text": "DirOverrideType",
										"@_href": "#/DirOverrideType"
									}
								},
								"@_name": "dirOverride"
							},
							{
								"shortdesc": "Digit set attribute.",
								"datatype": {
									"type": {
										"#text": "DigitSetType",
										"@_href": "#/DigitSetType"
									}
								},
								"@_name": "digitSet"
							},
							{
								"shortdesc": "Diacritics positioning attribute.",
								"datatype": {
									"type": {
										"#text": "DiacVPosType",
										"@_href": "#/DiacVPosType"
									}
								},
								"@_name": "diacVPos"
							},
							{
								"shortdesc": "Diacritics x offset attribute.",
								"datatype": {
									"type": "number"
								},
								"@_name": "diacXOffset"
							},
							{
								"shortdesc": "Diacritics y offset attribute.",
								"datatype": {
									"type": "number"
								},
								"@_name": "diacYOffset"
							},
							{
								"shortdesc": "Justification alternates attribute.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "justificationAlternates"
							},
							{
								"shortdesc": "Stylistic sets attribute.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "stylisticSets"
							}
						],
						"@_type": "instance"
					},
					"@_name": "CharacterAttributes",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Properties of a paragraph.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Paragraph justification.",
								"datatype": {
									"type": {
										"#text": "Justification",
										"@_href": "#/Justification"
									}
								},
								"@_name": "justification"
							},
							{
								"shortdesc": "First line left indent expressed in points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "firstLineIndent"
							},
							{
								"shortdesc": "Left indent of margin expressed in points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "leftIndent"
							},
							{
								"shortdesc": "Right indent of margin expressed in points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "rightIndent"
							},
							{
								"shortdesc": "Spacing before paragraph in points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "spaceBefore"
							},
							{
								"shortdesc": "Spacing after paragraph in points.",
								"datatype": {
									"type": "number"
								},
								"@_name": "spaceAfter"
							},
							{
								"shortdesc": "Is hyphenation enabled for the paragraph?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "hyphenation"
							},
							{
								"shortdesc": "Minimum hyphenated word size.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "minimumHyphenatedWordSize"
							},
							{
								"shortdesc": "Minimum number of characters before a hyphen.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "minimumBeforeHyphen"
							},
							{
								"shortdesc": "Minimum number of characters after a hyphen.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "minimumAfterHyphen"
							},
							{
								"shortdesc": "Maximum number of consecutive hypenated lines.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "maximumConsecutiveHyphens"
							},
							{
								"shortdesc": "Size of the hyphenation zone.",
								"datatype": {
									"type": "number"
								},
								"@_name": "hyphenationZone"
							},
							{
								"shortdesc": "Is hyphenation enabled for the capitalized words?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "hyphenateCapitalizedWords"
							},
							{
								"shortdesc": "Hyphenation preference scale for better spacing (0) or fewer hyphens (1)",
								"datatype": {
									"type": "number",
									"min": 0,
									"max": 1
								},
								"@_name": "hyphenationPreference"
							},
							{
								"shortdesc": "Desired word spacing expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "desiredWordSpacing"
							},
							{
								"shortdesc": "Maximum word spacing expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "maximumWordSpacing"
							},
							{
								"shortdesc": "Minimum word spacing expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "minimumWordSpacing"
							},
							{
								"shortdesc": "Desired letter spacing expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "desiredLetterSpacing"
							},
							{
								"shortdesc": "Maximum letter spacing expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "maximumLetterSpacing"
							},
							{
								"shortdesc": "Minimum letter spacing expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "minimumLetterSpacing"
							},
							{
								"shortdesc": "Desired glyph scaling expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "desiredGlyphScaling"
							},
							{
								"shortdesc": "Maximum glyph scaling expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "maximumGlyphScaling"
							},
							{
								"shortdesc": "Minimum glyph scaling expressed as a percentage.",
								"datatype": {
									"type": "number"
								},
								"@_name": "minimumGlyphScaling"
							},
							{
								"shortdesc": "Single word justification.",
								"datatype": {
									"type": {
										"#text": "Justification",
										"@_href": "#/Justification"
									}
								},
								"@_name": "singleWordJustification"
							},
							{
								"shortdesc": "Auto leading amount (in percentage)",
								"datatype": {
									"type": "number"
								},
								"@_name": "autoLeadingAmount"
							},
							{
								"shortdesc": "Auto leading type.",
								"datatype": {
									"type": {
										"#text": "AutoLeadingType",
										"@_href": "#/AutoLeadingType"
									}
								},
								"@_name": "leadingType"
							},
							{
								"shortdesc": "Tab stop settings.",
								"datatype": {
									"type": {
										"#text": "TabStopInfo",
										"@_href": "#/TabStopInfo"
									},
									"array": ""
								},
								"@_name": "tabStops"
							},
							{
								"shortdesc": "Is Roman hanging punctuation enabled?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "romanHanging"
							},
							{
								"shortdesc": "Is BunriKinshi enabled?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "bunriKinshi"
							},
							{
								"shortdesc": "The Burasagari type.",
								"datatype": {
									"type": {
										"#text": "BurasagariTypeEnum",
										"@_href": "#/BurasagariTypeEnum"
									}
								},
								"@_name": "burasagariType"
							},
							{
								"shortdesc": "The preferred Kinsoku order.",
								"datatype": {
									"type": {
										"#text": "KinsokuOrderEnum",
										"@_href": "#/KinsokuOrderEnum"
									}
								},
								"@_name": "kinsokuOrder"
							},
							{
								"shortdesc": "Is KurikaeshiMojiShori enabled?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "kurikaeshiMojiShori"
							},
							{
								"shortdesc": "The Kinsoku Shori name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "kinsoku"
							},
							{
								"shortdesc": "The Mojikumi name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "mojikumi"
							},
							{
								"shortdesc": "Whether to enable every line composer (as opposed to single line composer)?",
								"datatype": {
									"type": "bool"
								},
								"@_name": "everyLineComposer"
							},
							{
								"shortdesc": "Main writing direction attribute.",
								"datatype": {
									"type": {
										"#text": "ParagraphDirectionType",
										"@_href": "#/ParagraphDirectionType"
									}
								},
								"@_name": "paragraphDirection"
							},
							{
								"shortdesc": "The Kashida Width attribute.",
								"datatype": {
									"type": {
										"#text": "KashidaWidthType",
										"@_href": "#/KashidaWidthType"
									}
								},
								"@_name": "kashidaWidth"
							},
							{
								"shortdesc": "Composer engine attribute.",
								"datatype": {
									"type": {
										"#text": "ComposerEngineType",
										"@_href": "#/ComposerEngineType"
									}
								},
								"@_name": "composerEngine"
							}
						],
						"@_type": "instance"
					},
					"@_name": "ParagraphAttributes",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which are applied when opening or placing a Photoshop file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Should layers be Preserve when the document is converted (default: true)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "preserveLayers"
							},
							{
								"shortdesc": "Should image maps be preserved when the document is converted (default: true)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "preserveImageMaps"
							},
							{
								"shortdesc": "Should slices be preserved when the document is converted (default: true)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "preserveSlices"
							},
							{
								"shortdesc": "Should hidden layers be preserved when the document is converted (default: false)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "preserveHiddenLayers"
							},
							{
								"shortdesc": "Should use the specified LayerComp.",
								"datatype": {
									"type": "string"
								},
								"@_name": "layerComp"
							}
						],
						"@_type": "instance"
					},
					"@_name": "OpenOptionsPhotoshop",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when opening a PDF file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "What page should be used when opening a multipage document (default: 1)",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "pageToOpen"
							},
							{
								"shortdesc": "What box should be used when placing a multipage document (default: PDF media box)",
								"datatype": {
									"type": {
										"#text": "PDFBoxType",
										"@_href": "#/PDFBoxType"
									}
								},
								"@_name": "pDFCropToBox"
							},
							{
								"shortdesc": "Range of pages when opening a multipage document [possible values: 'all', range(for example: '1,2,3-5,8')]",
								"datatype": {
									"type": "string"
								},
								"@_name": "pageRangeToOpen"
							},
							{
								"shortdesc": "Import PDF pages as links for optimal performance (default: true for PageRangeToOpen=all; false otherwise)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "placeAsLinks"
							}
						],
						"@_type": "instance"
					},
					"@_name": "OpenOptionsPDF",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Options which may be supplied when opening a AutoCAD file.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "How to scale the AutoCAD drawing on import (default: Fit Artboard)",
								"datatype": {
									"type": {
										"#text": "AutoCADGlobalScaleOption",
										"@_href": "#/AutoCADGlobalScaleOption"
									}
								},
								"@_name": "globalScaleOption"
							},
							{
								"shortdesc": "Percentage scaling to apply globally on the AutoCAD drawing (default: 1.0)",
								"datatype": {
									"type": "number"
								},
								"@_name": "globalScalePercent"
							},
							{
								"shortdesc": "Ratio by which to scale while mapping the units (default: 1.0)",
								"datatype": {
									"type": "number"
								},
								"@_name": "unitScaleRatio"
							},
							{
								"shortdesc": "Units to which to map (default: Millimeters)",
								"datatype": {
									"type": {
										"#text": "AutoCADUnit",
										"@_href": "#/AutoCADUnit"
									}
								},
								"@_name": "unit"
							},
							{
								"shortdesc": "Name of layout in the AutoCAD drawing to import.",
								"datatype": {
									"type": "string"
								},
								"@_name": "selectedLayoutName"
							},
							{
								"shortdesc": "To center the created artwork on the artboard (default: true)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "centerArtwork"
							},
							{
								"shortdesc": "To merge the layers of the artwork (default: false)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "mergeLayers"
							},
							{
								"shortdesc": "To scale lineweights by the same amount as rest of the drawing (default: false)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "scaleLineweights"
							}
						],
						"@_type": "instance"
					},
					"@_name": "OpenOptionsAutoCAD",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Tracing options that guide the tracing process.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The name of the preset in use. Read-only.",
								"datatype": {
									"type": "string"
								},
								"@_name": "preset",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The visualization mode.",
								"datatype": {
									"type": {
										"#text": "ViewType",
										"@_href": "#/ViewType"
									}
								},
								"@_name": "viewMode"
							},
							{
								"shortdesc": "The tracing mode: color, gray, black and white.",
								"datatype": {
									"type": {
										"#text": "TracingModeType",
										"@_href": "#/TracingModeType"
									}
								},
								"@_name": "tracingMode"
							},
							{
								"shortdesc": "Color Type used for tracing, TracingLimitedColor or TracingFullColor .",
								"datatype": {
									"type": {
										"#text": "TracingColorType",
										"@_href": "#/TracingColorType"
									}
								},
								"@_name": "tracingColorTypeValue"
							},
							{
								"shortdesc": "The color palette (Library) name used for tracing. Use 'Document Library' or any other imported library name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "palette"
							},
							{
								"shortdesc": "The color group name used for tracing. Use 'All' or any color group name available in color Palette (library).",
								"datatype": {
									"type": "string"
								},
								"@_name": "colorGroup"
							},
							{
								"shortdesc": "Maximum number of colors allowed for tracing when TracingColorTypeValue is TracingLimitedColor.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "tracingColors"
							},
							{
								"shortdesc": "ColorFidelity when TracingColorTypeValue is TracingFullColor.",
								"datatype": {
									"type": "number"
								},
								"@_name": "colorFidelity"
							},
							{
								"shortdesc": "The threshold value for a black and white mode tracing.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 1,
									"max": 256
								},
								"@_name": "threshold"
							},
							{
								"shortdesc": "The gray levels for a grayscale mode tracing..",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									},
									"min": 1,
									"max": 256
								},
								"@_name": "grayLevels"
							},
							{
								"shortdesc": "Path fidelity for tracing.",
								"datatype": {
									"type": "number"
								},
								"@_name": "pathFidelity"
							},
							{
								"shortdesc": "Corner fidelity for tracing.",
								"datatype": {
									"type": "number"
								},
								"@_name": "cornerFidelity"
							},
							{
								"shortdesc": "Specifies minimum area of pixels to be vectorized.",
								"datatype": {
									"type": "number"
								},
								"@_name": "noiseFidelity"
							},
							{
								"shortdesc": "Method for tracing, either abutting or adjoining paths.",
								"datatype": {
									"type": {
										"#text": "TracingMethodType",
										"@_href": "#/TracingMethodType"
									}
								},
								"@_name": "tracingMethod"
							},
							{
								"shortdesc": "Tracing with fills. Fills, Strokes or both must be on.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "fills"
							},
							{
								"shortdesc": "Tracing with strokes. Fills, Strokes or both must be on.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "strokes"
							},
							{
								"shortdesc": "Maximum stroke weight (stroke only).",
								"datatype": {
									"type": "number"
								},
								"@_name": "maxStrokeWeight"
							},
							{
								"shortdesc": "Controls whether to snap curve to lines.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "snapCurveToLines"
							},
							{
								"shortdesc": "Controls whether to ignore white fill color. Works only if TracingMethod is TracingMethodAbutting and mode is Black and white.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "ignoreWhite"
							}
						],
						"method": [
							{
								"shortdesc": "Load options from preset.",
								"parameters": {
									"parameter": {
										"shortdesc": "The name of the preset.",
										"datatype": {
											"type": "string"
										},
										"@_name": "presetName"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "loadFromPreset"
							},
							{
								"shortdesc": "Store options to a preset kAiVectorizeSuite. Will overwrite an existing (unlocked) preset if names match.",
								"parameters": {
									"parameter": {
										"shortdesc": "The name of the preset.",
										"datatype": {
											"type": "string"
										},
										"@_name": "presetName"
									}
								},
								"datatype": {
									"type": "bool"
								},
								"@_name": "storeToPreset"
							}
						],
						"@_type": "instance"
					},
					"@_name": "TracingOptions",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "A tracing object.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The source art used when creating a new tracing object.",
								"datatype": {
									"type": {
										"#text": "PageItem",
										"@_href": "#/PageItem"
									}
								},
								"@_name": "sourceArt",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The options used when tracing the artwork.",
								"datatype": {
									"type": {
										"#text": "TracingOptions",
										"@_href": "#/TracingOptions"
									}
								},
								"@_name": "tracingOptions",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The number of paths in the tracing result.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "pathCount",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The number of anchors in the tracing result.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "anchorCount",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The number of colors used in the tracing result.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "usedColorCount",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Release the source artwork for the tracing object. Deletes this tracing object.",
								"datatype": {
									"type": {
										"#text": "PageItem",
										"@_href": "#/PageItem"
									}
								},
								"@_name": "releaseTracing"
							},
							{
								"shortdesc": "Expand the tracing to paths. Deletes this tracing object.",
								"parameters": {
									"parameter": {
										"shortdesc": "Expand as viewed with the raster and vector view modes.",
										"datatype": {
											"type": "bool",
											"value": false
										},
										"@_name": "viewed",
										"@_optional": "true"
									}
								},
								"datatype": {
									"type": {
										"#text": "GroupItem",
										"@_href": "#/GroupItem"
									}
								},
								"@_name": "expandTracing"
							}
						],
						"@_type": "instance"
					},
					"@_name": "TracingObject",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "An (exportable) asset.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The UID for the asset which is unique within a document.",
								"datatype": {
									"type": {
										"#text": "Int32",
										"@_href": "#/Int32"
									}
								},
								"@_name": "assetID",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Name of the asset.",
								"datatype": {
									"type": "string"
								},
								"@_name": "assetName"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Gets the normalized name without special characters, such that it can be used as a file name.",
								"datatype": {
									"type": "string"
								},
								"@_name": "getNormalizedName"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Asset",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "An artboard object.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Size and position of artboard.",
								"datatype": {
									"type": {
										"#text": "Rect",
										"@_href": "#/Rect"
									}
								},
								"@_name": "artboardRect"
							},
							{
								"shortdesc": "Pixel aspect ratio, used in ruler visualization if the units are pixels.",
								"datatype": {
									"type": "number",
									"min": 0.1,
									"max": 10
								},
								"@_name": "rulerPAR"
							},
							{
								"shortdesc": "Show center mark.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "showCenter"
							},
							{
								"shortdesc": "Show cross hairs.",
								"datatype": {
									"type": "bool"
								},
								"@_name": "showCrossHairs"
							},
							{
								"shortdesc": "Show title and action safe areas (for video)",
								"datatype": {
									"type": "bool"
								},
								"@_name": "showSafeAreas"
							},
							{
								"shortdesc": "Ruler origin of artboard.It is relative to left-bottom corner of the Artboard.",
								"datatype": {
									"type": {
										"#text": "Point",
										"@_href": "#/Point"
									}
								},
								"@_name": "rulerOrigin"
							},
							{
								"shortdesc": "The name of the artboard.",
								"datatype": {
									"type": "string"
								},
								"@_name": "name"
							}
						],
						"method": [
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Artboard",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "A symmetry repeat item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Symmetry repeat config for repeat art.",
								"datatype": {
									"type": {
										"#text": "SymmetryRepeatConfig",
										"@_href": "#/SymmetryRepeatConfig"
									}
								},
								"@_name": "symmetryConfig",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "SymmetryRepeatItem",
										"@_href": "#/SymmetryRepeatItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "SymmetryRepeatItem",
										"@_href": "#/SymmetryRepeatItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Update the symmetry repeat art.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Updated symmetry repeat configuration.",
											"datatype": {
												"type": {
													"#text": "SymmetryRepeatConfig",
													"@_href": "#/SymmetryRepeatConfig"
												}
											},
											"@_name": "config"
										},
										{
											"shortdesc": "Specify which properties of symmetry repeat gets updated.",
											"datatype": {
												"type": {
													"#text": "SymmetryRepeatUpdate",
													"@_href": "#/SymmetryRepeatUpdate"
												}
											},
											"@_name": "state"
										}
									]
								},
								"@_name": "setSymmetryConfiguration"
							}
						],
						"@_type": "instance"
					},
					"@_name": "SymmetryRepeatItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "A radial repeat item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Radial repeat config for repeat art.",
								"datatype": {
									"type": {
										"#text": "RadialRepeatConfig",
										"@_href": "#/RadialRepeatConfig"
									}
								},
								"@_name": "radialConfig",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "RadialRepeatItem",
										"@_href": "#/RadialRepeatItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "RadialRepeatItem",
										"@_href": "#/RadialRepeatItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Update the radial repeat art.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Updated radial repeat configuration.",
											"datatype": {
												"type": {
													"#text": "RadialRepeatConfig",
													"@_href": "#/RadialRepeatConfig"
												}
											},
											"@_name": "config"
										},
										{
											"shortdesc": "Specify which properties of radial repeat gets updated.",
											"datatype": {
												"type": {
													"#text": "RadialRepeatUpdate",
													"@_href": "#/RadialRepeatUpdate"
												}
											},
											"@_name": "state"
										}
									]
								},
								"@_name": "setRadialConfiguration"
							}
						],
						"@_type": "instance"
					},
					"@_name": "RadialRepeatItem",
					"@_dynamic": "true"
				},
				{
					"superclass": "PageItem",
					"shortdesc": "A grid repeat item.",
					"elements": {
						"property": [
							{
								"shortdesc": "The object's container.",
								"datatype": {
									"type": "Object"
								},
								"@_name": "parent",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "The class name of the object.",
								"datatype": {
									"type": "string"
								},
								"@_name": "typename",
								"@_rwaccess": "readonly"
							},
							{
								"shortdesc": "Grid repeat config for repeat art.",
								"datatype": {
									"type": {
										"#text": "GridRepeatConfig",
										"@_href": "#/GridRepeatConfig"
									}
								},
								"@_name": "gridConfig",
								"@_rwaccess": "readonly"
							}
						],
						"method": [
							{
								"shortdesc": "Move the object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "GridRepeatItem",
										"@_href": "#/GridRepeatItem"
									}
								},
								"@_name": "move"
							},
							{
								"shortdesc": "Duplicate this object.",
								"parameters": {
									"parameter": [
										{
											"datatype": {
												"type": "Object"
											},
											"@_name": "relativeObject"
										},
										{
											"datatype": {
												"type": {
													"#text": "ElementPlacement",
													"@_href": "#/ElementPlacement"
												}
											},
											"@_name": "insertionLocation"
										}
									]
								},
								"datatype": {
									"type": {
										"#text": "GridRepeatItem",
										"@_href": "#/GridRepeatItem"
									}
								},
								"@_name": "duplicate"
							},
							{
								"shortdesc": "Deletes this object.",
								"@_name": "remove"
							},
							{
								"shortdesc": "Deletes all elements.",
								"@_name": "removeAll"
							},
							{
								"shortdesc": "Update the grid repeat art.",
								"parameters": {
									"parameter": [
										{
											"shortdesc": "Updated grid repeat configuration.",
											"datatype": {
												"type": {
													"#text": "GridRepeatConfig",
													"@_href": "#/GridRepeatConfig"
												}
											},
											"@_name": "config"
										},
										{
											"shortdesc": "Specify which properties of grid repeat gets updated.",
											"datatype": {
												"type": {
													"#text": "GridRepeatUpdate",
													"@_href": "#/GridRepeatUpdate"
												}
											},
											"@_name": "state"
										}
									]
								},
								"@_name": "setGridConfiguration"
							}
						],
						"@_type": "instance"
					},
					"@_name": "GridRepeatItem",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Describes a point. This class is also a two-element collection.",
					"elements": {
						"property": [
							{
								"shortdesc": "The left coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "x"
							},
							{
								"shortdesc": "The top coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "y"
							},
							{
								"shortdesc": "The left coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "left"
							},
							{
								"shortdesc": "The top coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "top"
							},
							{
								"shortdesc": "The array length.",
								"datatype": {
									"type": "number",
									"value": 2
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Point",
					"@_dynamic": "true"
				},
				{
					"shortdesc": "Describes a rectangle. This class is also a four-element collection.",
					"elements": {
						"property": [
							{
								"shortdesc": "The left coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "x"
							},
							{
								"shortdesc": "The top coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "y"
							},
							{
								"shortdesc": "The width.",
								"datatype": {
									"type": "number"
								},
								"@_name": "width"
							},
							{
								"shortdesc": "The height.",
								"datatype": {
									"type": "number"
								},
								"@_name": "height"
							},
							{
								"shortdesc": "The left coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "left"
							},
							{
								"shortdesc": "The right coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "right"
							},
							{
								"shortdesc": "The top coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "top"
							},
							{
								"shortdesc": "The bottom coordinate.",
								"datatype": {
									"type": "number"
								},
								"@_name": "bottom"
							},
							{
								"shortdesc": "The array length.",
								"datatype": {
									"type": "number",
									"value": 4
								},
								"@_name": "length",
								"@_rwaccess": "readonly"
							}
						],
						"@_type": "instance"
					},
					"@_name": "Rectangle",
					"@_dynamic": "true"
				}
			]
		},
		"@_xsi:schemaLocation": "http://schema.adobe.com/omv/1.0/omv.xsd omv.xsd",
		"@_xmlns": "http://schema.adobe.com/omv/1.0/omv.xsd",
		"@_xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance"
	}
}